{
  "version": "2",
  "toolVersion": "1.67.0",
  "snippets": {
    "933b517f55ec88906a74c04d98e4609ae7bc856f11a072036b41127f6f2578a9": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apprunner as apprunner",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AppRunner;",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apprunner.*;",
          "version": "1"
        },
        "go": {
          "source": "import apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"",
          "version": "1"
        },
        "$": {
          "source": "import * as apprunner from '@aws-cdk/aws-apprunner';",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apprunner"
        },
        "field": {
          "field": "markdown",
          "line": 26
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "import * as apprunner from '@aws-cdk/aws-apprunner';",
      "syntaxKindCounter": {
        "10": 1,
        "75": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "a66839b934aa05433604532ef522b391f9ce69a882276bf3011a652cc5af85cf": {
      "translations": {
        "python": {
          "source": "apprunner.Service(self, \"Service\",\n    source=apprunner.Source.from_ecr_public(\n        image_configuration=apprunner.ImageConfiguration(port=8000),\n        image_identifier=\"public.ecr.aws/aws-containers/hello-app-runner:latest\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Service(this, \"Service\", new ServiceProps {\n    Source = Source.FromEcrPublic(new EcrPublicProps {\n        ImageConfiguration = new ImageConfiguration { Port = 8000 },\n        ImageIdentifier = \"public.ecr.aws/aws-containers/hello-app-runner:latest\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Service.Builder.create(this, \"Service\")\n        .source(Source.fromEcrPublic(EcrPublicProps.builder()\n                .imageConfiguration(ImageConfiguration.builder().port(8000).build())\n                .imageIdentifier(\"public.ecr.aws/aws-containers/hello-app-runner:latest\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "apprunner.NewService(this, jsii.String(\"Service\"), &serviceProps{\n\tsource: apprunner.source.fromEcrPublic(&ecrPublicProps{\n\t\timageConfiguration: &imageConfiguration{\n\t\t\tport: jsii.Number(8000),\n\t\t},\n\t\timageIdentifier: jsii.String(\"public.ecr.aws/aws-containers/hello-app-runner:latest\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apprunner"
        },
        "field": {
          "field": "markdown",
          "line": 48
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.EcrPublicProps",
        "@aws-cdk/aws-apprunner.ImageConfiguration",
        "@aws-cdk/aws-apprunner.Service",
        "@aws-cdk/aws-apprunner.ServiceProps",
        "@aws-cdk/aws-apprunner.Source",
        "@aws-cdk/aws-apprunner.Source#fromEcrPublic",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 9,
        "104": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "e22a7564a5e17c6eb1863064de55983ef636b018fd7a9a20242b83cb49276b94"
    },
    "337c00fdcb8a016894e7828cd29d3a48eea6be10255c05bf07e189dad859845c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ecr as ecr\n\n\napprunner.Service(self, \"Service\",\n    source=apprunner.Source.from_ecr(\n        image_configuration=apprunner.ImageConfiguration(port=80),\n        repository=ecr.Repository.from_repository_name(self, \"NginxRepository\", \"nginx\"),\n        tag_or_digest=\"latest\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ECR;\n\n\nnew Service(this, \"Service\", new ServiceProps {\n    Source = Source.FromEcr(new EcrProps {\n        ImageConfiguration = new ImageConfiguration { Port = 80 },\n        Repository = Repository.FromRepositoryName(this, \"NginxRepository\", \"nginx\"),\n        TagOrDigest = \"latest\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ecr.*;\n\n\nService.Builder.create(this, \"Service\")\n        .source(Source.fromEcr(EcrProps.builder()\n                .imageConfiguration(ImageConfiguration.builder().port(80).build())\n                .repository(Repository.fromRepositoryName(this, \"NginxRepository\", \"nginx\"))\n                .tagOrDigest(\"latest\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ecr \"github.com/aws-samples/dummy/awscdkawsecr\"\n\n\napprunner.NewService(this, jsii.String(\"Service\"), &serviceProps{\n\tsource: apprunner.source.fromEcr(&ecrProps{\n\t\timageConfiguration: &imageConfiguration{\n\t\t\tport: jsii.Number(80),\n\t\t},\n\t\trepository: ecr.repository.fromRepositoryName(this, jsii.String(\"NginxRepository\"), jsii.String(\"nginx\")),\n\t\ttagOrDigest: jsii.String(\"latest\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ecr from '@aws-cdk/aws-ecr';\n\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcr({\n    imageConfiguration: { port: 80 },\n    repository: ecr.Repository.fromRepositoryName(this, 'NginxRepository', 'nginx'),\n    tagOrDigest: 'latest',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apprunner"
        },
        "field": {
          "field": "markdown",
          "line": 61
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.EcrProps",
        "@aws-cdk/aws-apprunner.ImageConfiguration",
        "@aws-cdk/aws-apprunner.Service",
        "@aws-cdk/aws-apprunner.ServiceProps",
        "@aws-cdk/aws-apprunner.Source",
        "@aws-cdk/aws-apprunner.Source#fromEcr",
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-ecr.Repository",
        "@aws-cdk/aws-ecr.Repository#fromRepositoryName",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ecr from '@aws-cdk/aws-ecr';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcr({\n    imageConfiguration: { port: 80 },\n    repository: ecr.Repository.fromRepositoryName(this, 'NginxRepository', 'nginx'),\n    tagOrDigest: 'latest',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 14,
        "104": 2,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "226": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "ac2e0e92580905d8ae0d102c79d2d3ae3eb3abffb3fb1e16af73fbe97b10e4f8"
    },
    "3fd5abeda05aa33dd868a786eafaf36a29e19eb5ec16a6eee28ff4e3649f6be0": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ecr_assets as assets\n\n\nimage_asset = assets.DockerImageAsset(self, \"ImageAssets\",\n    directory=path.join(__dirname, \"./docker.assets\")\n)\napprunner.Service(self, \"Service\",\n    source=apprunner.Source.from_asset(\n        image_configuration=apprunner.ImageConfiguration(port=8000),\n        asset=image_asset\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Ecr.Assets;\n\n\nDockerImageAsset imageAsset = new DockerImageAsset(this, \"ImageAssets\", new DockerImageAssetProps {\n    Directory = Join(__dirname, \"./docker.assets\")\n});\nnew Service(this, \"Service\", new ServiceProps {\n    Source = Source.FromAsset(new AssetProps {\n        ImageConfiguration = new ImageConfiguration { Port = 8000 },\n        Asset = imageAsset\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ecr.assets.*;\n\n\nDockerImageAsset imageAsset = DockerImageAsset.Builder.create(this, \"ImageAssets\")\n        .directory(join(__dirname, \"./docker.assets\"))\n        .build();\nService.Builder.create(this, \"Service\")\n        .source(Source.fromAsset(AssetProps.builder()\n                .imageConfiguration(ImageConfiguration.builder().port(8000).build())\n                .asset(imageAsset)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import assets \"github.com/aws-samples/dummy/awscdkawsecrassets\"\n\n\nimageAsset := assets.NewDockerImageAsset(this, jsii.String(\"ImageAssets\"), &dockerImageAssetProps{\n\tdirectory: path.join(__dirname, jsii.String(\"./docker.assets\")),\n})\napprunner.NewService(this, jsii.String(\"Service\"), &serviceProps{\n\tsource: apprunner.source.fromAsset(&assetProps{\n\t\timageConfiguration: &imageConfiguration{\n\t\t\tport: jsii.Number(8000),\n\t\t},\n\t\tasset: imageAsset,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as assets from '@aws-cdk/aws-ecr-assets';\n\nconst imageAsset = new assets.DockerImageAsset(this, 'ImageAssets', {\n  directory: path.join(__dirname, './docker.assets'),\n});\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromAsset({\n    imageConfiguration: { port: 8000 },\n    asset: imageAsset,\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apprunner"
        },
        "field": {
          "field": "markdown",
          "line": 75
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.AssetProps",
        "@aws-cdk/aws-apprunner.ImageConfiguration",
        "@aws-cdk/aws-apprunner.Service",
        "@aws-cdk/aws-apprunner.ServiceProps",
        "@aws-cdk/aws-apprunner.Source",
        "@aws-cdk/aws-apprunner.Source#fromAsset",
        "@aws-cdk/aws-ecr-assets.DockerImageAsset",
        "@aws-cdk/aws-ecr-assets.DockerImageAssetProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as assets from '@aws-cdk/aws-ecr-assets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst imageAsset = new assets.DockerImageAsset(this, 'ImageAssets', {\n  directory: path.join(__dirname, './docker.assets'),\n});\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromAsset({\n    imageConfiguration: { port: 8000 },\n    asset: imageAsset,\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 18,
        "104": 2,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "a2b2cb98ffc6a00d9ad1e80fecc78429e63d49c8a64ed7d58beb18e21173b9ce"
    },
    "3d54af170809727c3c5425bd5aae58a1a8a20610513446406b3da6bb8b454488": {
      "translations": {
        "python": {
          "source": "apprunner.Service(self, \"Service\",\n    source=apprunner.Source.from_git_hub(\n        repository_url=\"https://github.com/aws-containers/hello-app-runner\",\n        branch=\"main\",\n        configuration_source=apprunner.ConfigurationSourceType.REPOSITORY,\n        connection=apprunner.GitHubConnection.from_connection_arn(\"CONNECTION_ARN\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Service(this, \"Service\", new ServiceProps {\n    Source = Source.FromGitHub(new GithubRepositoryProps {\n        RepositoryUrl = \"https://github.com/aws-containers/hello-app-runner\",\n        Branch = \"main\",\n        ConfigurationSource = ConfigurationSourceType.REPOSITORY,\n        Connection = GitHubConnection.FromConnectionArn(\"CONNECTION_ARN\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Service.Builder.create(this, \"Service\")\n        .source(Source.fromGitHub(GithubRepositoryProps.builder()\n                .repositoryUrl(\"https://github.com/aws-containers/hello-app-runner\")\n                .branch(\"main\")\n                .configurationSource(ConfigurationSourceType.REPOSITORY)\n                .connection(GitHubConnection.fromConnectionArn(\"CONNECTION_ARN\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "apprunner.NewService(this, jsii.String(\"Service\"), &serviceProps{\n\tsource: apprunner.source.fromGitHub(&githubRepositoryProps{\n\t\trepositoryUrl: jsii.String(\"https://github.com/aws-containers/hello-app-runner\"),\n\t\tbranch: jsii.String(\"main\"),\n\t\tconfigurationSource: apprunner.configurationSourceType_REPOSITORY,\n\t\tconnection: apprunner.gitHubConnection.fromConnectionArn(jsii.String(\"CONNECTION_ARN\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apprunner"
        },
        "field": {
          "field": "markdown",
          "line": 95
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.ConfigurationSourceType",
        "@aws-cdk/aws-apprunner.ConfigurationSourceType#REPOSITORY",
        "@aws-cdk/aws-apprunner.GitHubConnection",
        "@aws-cdk/aws-apprunner.GitHubConnection#fromConnectionArn",
        "@aws-cdk/aws-apprunner.GithubRepositoryProps",
        "@aws-cdk/aws-apprunner.Service",
        "@aws-cdk/aws-apprunner.ServiceProps",
        "@aws-cdk/aws-apprunner.Source",
        "@aws-cdk/aws-apprunner.Source#fromGitHub",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "104": 1,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "9f38d5e146a9bec25b41bf26291fc54f1c6afc6eb48c7aecf40a5b7d35b0e4a9"
    },
    "e0fbcecee0c1b13b1997f8baeb89094c3cb3c14806dfc28069d10f51046491d4": {
      "translations": {
        "python": {
          "source": "apprunner.Service(self, \"Service\",\n    source=apprunner.Source.from_git_hub(\n        repository_url=\"https://github.com/aws-containers/hello-app-runner\",\n        branch=\"main\",\n        configuration_source=apprunner.ConfigurationSourceType.API,\n        code_configuration_values=apprunner.CodeConfigurationValues(\n            runtime=apprunner.Runtime.PYTHON_3,\n            port=\"8000\",\n            start_command=\"python app.py\",\n            build_command=\"yum install -y pycairo && pip install -r requirements.txt\"\n        ),\n        connection=apprunner.GitHubConnection.from_connection_arn(\"CONNECTION_ARN\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Service(this, \"Service\", new ServiceProps {\n    Source = Source.FromGitHub(new GithubRepositoryProps {\n        RepositoryUrl = \"https://github.com/aws-containers/hello-app-runner\",\n        Branch = \"main\",\n        ConfigurationSource = ConfigurationSourceType.API,\n        CodeConfigurationValues = new CodeConfigurationValues {\n            Runtime = Runtime.PYTHON_3,\n            Port = \"8000\",\n            StartCommand = \"python app.py\",\n            BuildCommand = \"yum install -y pycairo && pip install -r requirements.txt\"\n        },\n        Connection = GitHubConnection.FromConnectionArn(\"CONNECTION_ARN\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Service.Builder.create(this, \"Service\")\n        .source(Source.fromGitHub(GithubRepositoryProps.builder()\n                .repositoryUrl(\"https://github.com/aws-containers/hello-app-runner\")\n                .branch(\"main\")\n                .configurationSource(ConfigurationSourceType.API)\n                .codeConfigurationValues(CodeConfigurationValues.builder()\n                        .runtime(Runtime.PYTHON_3)\n                        .port(\"8000\")\n                        .startCommand(\"python app.py\")\n                        .buildCommand(\"yum install -y pycairo && pip install -r requirements.txt\")\n                        .build())\n                .connection(GitHubConnection.fromConnectionArn(\"CONNECTION_ARN\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "apprunner.NewService(this, jsii.String(\"Service\"), &serviceProps{\n\tsource: apprunner.source.fromGitHub(&githubRepositoryProps{\n\t\trepositoryUrl: jsii.String(\"https://github.com/aws-containers/hello-app-runner\"),\n\t\tbranch: jsii.String(\"main\"),\n\t\tconfigurationSource: apprunner.configurationSourceType_API,\n\t\tcodeConfigurationValues: &codeConfigurationValues{\n\t\t\truntime: apprunner.runtime_PYTHON_3(),\n\t\t\tport: jsii.String(\"8000\"),\n\t\t\tstartCommand: jsii.String(\"python app.py\"),\n\t\t\tbuildCommand: jsii.String(\"yum install -y pycairo && pip install -r requirements.txt\"),\n\t\t},\n\t\tconnection: apprunner.gitHubConnection.fromConnectionArn(jsii.String(\"CONNECTION_ARN\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.API,\n    codeConfigurationValues: {\n      runtime: apprunner.Runtime.PYTHON_3,\n      port: '8000',\n      startCommand: 'python app.py',\n      buildCommand: 'yum install -y pycairo && pip install -r requirements.txt',\n    },\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apprunner"
        },
        "field": {
          "field": "markdown",
          "line": 108
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CodeConfigurationValues",
        "@aws-cdk/aws-apprunner.ConfigurationSourceType",
        "@aws-cdk/aws-apprunner.ConfigurationSourceType#API",
        "@aws-cdk/aws-apprunner.GitHubConnection",
        "@aws-cdk/aws-apprunner.GitHubConnection#fromConnectionArn",
        "@aws-cdk/aws-apprunner.GithubRepositoryProps",
        "@aws-cdk/aws-apprunner.Runtime",
        "@aws-cdk/aws-apprunner.Runtime#PYTHON_3",
        "@aws-cdk/aws-apprunner.Service",
        "@aws-cdk/aws-apprunner.ServiceProps",
        "@aws-cdk/aws-apprunner.Source",
        "@aws-cdk/aws-apprunner.Source#fromGitHub",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.API,\n    codeConfigurationValues: {\n      runtime: apprunner.Runtime.PYTHON_3,\n      port: '8000',\n      startCommand: 'python app.py',\n      buildCommand: 'yum install -y pycairo && pip install -r requirements.txt',\n    },\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 7,
        "75": 24,
        "104": 1,
        "193": 3,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 10
      },
      "fqnsFingerprint": "4837f3e8a6f1ccf010b119aa73088a03369df1c6000519bfd1a2fac4c3cfd94f"
    },
    "b0a955b2747d3ef882bfcca67b6a22fc778bb1d7326127344ca8fb8b12bed712": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\n\n\nvpc = ec2.Vpc(self, \"Vpc\",\n    cidr=\"10.0.0.0/16\"\n)\n\nvpc_connector = apprunner.VpcConnector(self, \"VpcConnector\",\n    vpc=vpc,\n    vpc_subnets=vpc.select_subnets(subnet_type=ec2.SubnetType.PUBLIC),\n    vpc_connector_name=\"MyVpcConnector\"\n)\n\napprunner.Service(self, \"Service\",\n    source=apprunner.Source.from_ecr_public(\n        image_configuration=apprunner.ImageConfiguration(port=8000),\n        image_identifier=\"public.ecr.aws/aws-containers/hello-app-runner:latest\"\n    ),\n    vpc_connector=vpc_connector\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\n\n\nVpc vpc = new Vpc(this, \"Vpc\", new VpcProps {\n    Cidr = \"10.0.0.0/16\"\n});\n\nVpcConnector vpcConnector = new VpcConnector(this, \"VpcConnector\", new VpcConnectorProps {\n    Vpc = vpc,\n    VpcSubnets = vpc.SelectSubnets(new SubnetSelection { SubnetType = SubnetType.PUBLIC }),\n    VpcConnectorName = \"MyVpcConnector\"\n});\n\nnew Service(this, \"Service\", new ServiceProps {\n    Source = Source.FromEcrPublic(new EcrPublicProps {\n        ImageConfiguration = new ImageConfiguration { Port = 8000 },\n        ImageIdentifier = \"public.ecr.aws/aws-containers/hello-app-runner:latest\"\n    }),\n    VpcConnector = vpcConnector\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\n\n\nVpc vpc = Vpc.Builder.create(this, \"Vpc\")\n        .cidr(\"10.0.0.0/16\")\n        .build();\n\nVpcConnector vpcConnector = VpcConnector.Builder.create(this, \"VpcConnector\")\n        .vpc(vpc)\n        .vpcSubnets(vpc.selectSubnets(SubnetSelection.builder().subnetType(SubnetType.PUBLIC).build()))\n        .vpcConnectorName(\"MyVpcConnector\")\n        .build();\n\nService.Builder.create(this, \"Service\")\n        .source(Source.fromEcrPublic(EcrPublicProps.builder()\n                .imageConfiguration(ImageConfiguration.builder().port(8000).build())\n                .imageIdentifier(\"public.ecr.aws/aws-containers/hello-app-runner:latest\")\n                .build()))\n        .vpcConnector(vpcConnector)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\n\nvpc := ec2.NewVpc(this, jsii.String(\"Vpc\"), &vpcProps{\n\tcidr: jsii.String(\"10.0.0.0/16\"),\n})\n\nvpcConnector := apprunner.NewVpcConnector(this, jsii.String(\"VpcConnector\"), &vpcConnectorProps{\n\tvpc: vpc,\n\tvpcSubnets: vpc.selectSubnets(&subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t}),\n\tvpcConnectorName: jsii.String(\"MyVpcConnector\"),\n})\n\napprunner.NewService(this, jsii.String(\"Service\"), &serviceProps{\n\tsource: apprunner.source.fromEcrPublic(&ecrPublicProps{\n\t\timageConfiguration: &imageConfiguration{\n\t\t\tport: jsii.Number(8000),\n\t\t},\n\t\timageIdentifier: jsii.String(\"public.ecr.aws/aws-containers/hello-app-runner:latest\"),\n\t}),\n\tvpcConnector: vpcConnector,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\n\nconst vpc = new ec2.Vpc(this, 'Vpc', {\n  cidr: '10.0.0.0/16',\n});\n\nconst vpcConnector = new apprunner.VpcConnector(this, 'VpcConnector', {\n  vpc,\n  vpcSubnets: vpc.selectSubnets({ subnetType: ec2.SubnetType.PUBLIC }),\n  vpcConnectorName: 'MyVpcConnector',\n});\n\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n  vpcConnector,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apprunner"
        },
        "field": {
          "field": "markdown",
          "line": 142
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.EcrPublicProps",
        "@aws-cdk/aws-apprunner.IVpcConnector",
        "@aws-cdk/aws-apprunner.ImageConfiguration",
        "@aws-cdk/aws-apprunner.Service",
        "@aws-cdk/aws-apprunner.ServiceProps",
        "@aws-cdk/aws-apprunner.Source",
        "@aws-cdk/aws-apprunner.Source#fromEcrPublic",
        "@aws-cdk/aws-apprunner.VpcConnector",
        "@aws-cdk/aws-apprunner.VpcConnectorProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'Vpc', {\n  cidr: '10.0.0.0/16',\n});\n\nconst vpcConnector = new apprunner.VpcConnector(this, 'VpcConnector', {\n  vpc,\n  vpcSubnets: vpc.selectSubnets({ subnetType: ec2.SubnetType.PUBLIC }),\n  vpcConnectorName: 'MyVpcConnector',\n});\n\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n  vpcConnector,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 27,
        "104": 3,
        "193": 6,
        "194": 8,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "1eefb12a9c7259866a86dd0ae8e25b1bc21831e4f1fffd1523094303d48f7b7c"
    },
    "b9e3de689f8c1fa7161a8a143e24a4611402e70726ef153c1742dbaa07f5d935": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ecr_assets as assets\n\n\nimage_asset = assets.DockerImageAsset(self, \"ImageAssets\",\n    directory=path.join(__dirname, \"./docker.assets\")\n)\napprunner.Service(self, \"Service\",\n    source=apprunner.Source.from_asset(\n        image_configuration=apprunner.ImageConfiguration(port=8000),\n        asset=image_asset\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Ecr.Assets;\n\n\nDockerImageAsset imageAsset = new DockerImageAsset(this, \"ImageAssets\", new DockerImageAssetProps {\n    Directory = Join(__dirname, \"./docker.assets\")\n});\nnew Service(this, \"Service\", new ServiceProps {\n    Source = Source.FromAsset(new AssetProps {\n        ImageConfiguration = new ImageConfiguration { Port = 8000 },\n        Asset = imageAsset\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ecr.assets.*;\n\n\nDockerImageAsset imageAsset = DockerImageAsset.Builder.create(this, \"ImageAssets\")\n        .directory(join(__dirname, \"./docker.assets\"))\n        .build();\nService.Builder.create(this, \"Service\")\n        .source(Source.fromAsset(AssetProps.builder()\n                .imageConfiguration(ImageConfiguration.builder().port(8000).build())\n                .asset(imageAsset)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import assets \"github.com/aws-samples/dummy/awscdkawsecrassets\"\n\n\nimageAsset := assets.NewDockerImageAsset(this, jsii.String(\"ImageAssets\"), &dockerImageAssetProps{\n\tdirectory: path.join(__dirname, jsii.String(\"./docker.assets\")),\n})\napprunner.NewService(this, jsii.String(\"Service\"), &serviceProps{\n\tsource: apprunner.source.fromAsset(&assetProps{\n\t\timageConfiguration: &imageConfiguration{\n\t\t\tport: jsii.Number(8000),\n\t\t},\n\t\tasset: imageAsset,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as assets from '@aws-cdk/aws-ecr-assets';\n\nconst imageAsset = new assets.DockerImageAsset(this, 'ImageAssets', {\n  directory: path.join(__dirname, './docker.assets'),\n});\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromAsset({\n    imageConfiguration: { port: 8000 },\n    asset: imageAsset,\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.AssetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.AssetProps",
        "@aws-cdk/aws-apprunner.ImageConfiguration",
        "@aws-cdk/aws-apprunner.Service",
        "@aws-cdk/aws-apprunner.ServiceProps",
        "@aws-cdk/aws-apprunner.Source",
        "@aws-cdk/aws-apprunner.Source#fromAsset",
        "@aws-cdk/aws-ecr-assets.DockerImageAsset",
        "@aws-cdk/aws-ecr-assets.DockerImageAssetProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as assets from '@aws-cdk/aws-ecr-assets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst imageAsset = new assets.DockerImageAsset(this, 'ImageAssets', {\n  directory: path.join(__dirname, './docker.assets'),\n});\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromAsset({\n    imageConfiguration: { port: 8000 },\n    asset: imageAsset,\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 18,
        "104": 2,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "a2b2cb98ffc6a00d9ad1e80fecc78429e63d49c8a64ed7d58beb18e21173b9ce"
    },
    "5600e2324559a0a4e439a9f0b26bbbd37bc2d5ab6594136c9eb779c3cb415ed9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\nimport aws_cdk.aws_ecr_assets as ecr_assets\n\n# docker_image_asset: ecr_assets.DockerImageAsset\n\nasset_source = apprunner.AssetSource(\n    asset=docker_image_asset,\n\n    # the properties below are optional\n    image_configuration=apprunner.ImageConfiguration(\n        environment={\n            \"environment_key\": \"environment\"\n        },\n        port=123,\n        start_command=\"startCommand\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\nusing Amazon.CDK.AWS.Ecr.Assets;\n\nDockerImageAsset dockerImageAsset;\n\nAssetSource assetSource = new AssetSource(new AssetProps {\n    Asset = dockerImageAsset,\n\n    // the properties below are optional\n    ImageConfiguration = new ImageConfiguration {\n        Environment = new Dictionary<string, string> {\n            { \"environmentKey\", \"environment\" }\n        },\n        Port = 123,\n        StartCommand = \"startCommand\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\nimport software.amazon.awscdk.services.ecr.assets.*;\n\nDockerImageAsset dockerImageAsset;\n\nAssetSource assetSource = AssetSource.Builder.create()\n        .asset(dockerImageAsset)\n\n        // the properties below are optional\n        .imageConfiguration(ImageConfiguration.builder()\n                .environment(Map.of(\n                        \"environmentKey\", \"environment\"))\n                .port(123)\n                .startCommand(\"startCommand\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\nimport ecr_assets \"github.com/aws-samples/dummy/awscdkawsecrassets\"\n\nvar dockerImageAsset dockerImageAsset\n\nassetSource := apprunner.NewAssetSource(&assetProps{\n\tasset: dockerImageAsset,\n\n\t// the properties below are optional\n\timageConfiguration: &imageConfiguration{\n\t\tenvironment: map[string]*string{\n\t\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t\t},\n\t\tport: jsii.Number(123),\n\t\tstartCommand: jsii.String(\"startCommand\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as ecr_assets from '@aws-cdk/aws-ecr-assets';\n\ndeclare const dockerImageAsset: ecr_assets.DockerImageAsset;\nconst assetSource = new apprunner.AssetSource({\n  asset: dockerImageAsset,\n\n  // the properties below are optional\n  imageConfiguration: {\n    environment: {\n      environmentKey: 'environment',\n    },\n    port: 123,\n    startCommand: 'startCommand',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.AssetSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.AssetProps",
        "@aws-cdk/aws-apprunner.AssetSource",
        "@aws-cdk/aws-apprunner.ImageConfiguration",
        "@aws-cdk/aws-ecr-assets.DockerImageAsset"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as ecr_assets from '@aws-cdk/aws-ecr-assets';\n\ndeclare const dockerImageAsset: ecr_assets.DockerImageAsset;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst assetSource = new apprunner.AssetSource({\n  asset: dockerImageAsset,\n\n  // the properties below are optional\n  imageConfiguration: {\n    environment: {\n      environmentKey: 'environment',\n    },\n    port: 123,\n    startCommand: 'startCommand',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 15,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "2ad931e30d92e7a0239af2795349eb35fd71cb1cbcd08cedf48380412b619f0d"
    },
    "d96e48d6a04fd690a5074f1a0ddeae2c7c59c94ec2bddd44e59f4da8710ab655": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\ncfn_observability_configuration = apprunner.CfnObservabilityConfiguration(self, \"MyCfnObservabilityConfiguration\",\n    observability_configuration_name=\"observabilityConfigurationName\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    trace_configuration=apprunner.CfnObservabilityConfiguration.TraceConfigurationProperty(\n        vendor=\"vendor\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nCfnObservabilityConfiguration cfnObservabilityConfiguration = new CfnObservabilityConfiguration(this, \"MyCfnObservabilityConfiguration\", new CfnObservabilityConfigurationProps {\n    ObservabilityConfigurationName = \"observabilityConfigurationName\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TraceConfiguration = new TraceConfigurationProperty {\n        Vendor = \"vendor\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nCfnObservabilityConfiguration cfnObservabilityConfiguration = CfnObservabilityConfiguration.Builder.create(this, \"MyCfnObservabilityConfiguration\")\n        .observabilityConfigurationName(\"observabilityConfigurationName\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .traceConfiguration(TraceConfigurationProperty.builder()\n                .vendor(\"vendor\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\ncfnObservabilityConfiguration := apprunner.NewCfnObservabilityConfiguration(this, jsii.String(\"MyCfnObservabilityConfiguration\"), &cfnObservabilityConfigurationProps{\n\tobservabilityConfigurationName: jsii.String(\"observabilityConfigurationName\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttraceConfiguration: &traceConfigurationProperty{\n\t\tvendor: jsii.String(\"vendor\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst cfnObservabilityConfiguration = new apprunner.CfnObservabilityConfiguration(this, 'MyCfnObservabilityConfiguration', /* all optional props */ {\n  observabilityConfigurationName: 'observabilityConfigurationName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  traceConfiguration: {\n    vendor: 'vendor',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnObservabilityConfiguration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnObservabilityConfiguration",
        "@aws-cdk/aws-apprunner.CfnObservabilityConfigurationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnObservabilityConfiguration = new apprunner.CfnObservabilityConfiguration(this, 'MyCfnObservabilityConfiguration', /* all optional props */ {\n  observabilityConfigurationName: 'observabilityConfigurationName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  traceConfiguration: {\n    vendor: 'vendor',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "104": 1,
        "192": 1,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "6f7d3412e940f4b98394247df27a09f1734899b3992fa919966ba65ac1b9b1c9"
    },
    "1a0ff130b6831b79db0347bf345646f287f52829bea399b06971cbd63962ec8b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\ntrace_configuration_property = apprunner.CfnObservabilityConfiguration.TraceConfigurationProperty(\n    vendor=\"vendor\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nTraceConfigurationProperty traceConfigurationProperty = new TraceConfigurationProperty {\n    Vendor = \"vendor\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nTraceConfigurationProperty traceConfigurationProperty = TraceConfigurationProperty.builder()\n        .vendor(\"vendor\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\ntraceConfigurationProperty := &traceConfigurationProperty{\n\tvendor: jsii.String(\"vendor\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst traceConfigurationProperty: apprunner.CfnObservabilityConfiguration.TraceConfigurationProperty = {\n  vendor: 'vendor',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnObservabilityConfiguration.TraceConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnObservabilityConfiguration.TraceConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst traceConfigurationProperty: apprunner.CfnObservabilityConfiguration.TraceConfigurationProperty = {\n  vendor: 'vendor',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "6a33937a7be97e8d0ca43f6fb2855d3e5862bd1fb5a978af81211ef83e1b40b4"
    },
    "0a942a1bf37e88b7a1453093e92d16203bd25b83837bd5b61f0a3d79ad6932a0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\ncfn_observability_configuration_props = apprunner.CfnObservabilityConfigurationProps(\n    observability_configuration_name=\"observabilityConfigurationName\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    trace_configuration=apprunner.CfnObservabilityConfiguration.TraceConfigurationProperty(\n        vendor=\"vendor\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nCfnObservabilityConfigurationProps cfnObservabilityConfigurationProps = new CfnObservabilityConfigurationProps {\n    ObservabilityConfigurationName = \"observabilityConfigurationName\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TraceConfiguration = new TraceConfigurationProperty {\n        Vendor = \"vendor\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nCfnObservabilityConfigurationProps cfnObservabilityConfigurationProps = CfnObservabilityConfigurationProps.builder()\n        .observabilityConfigurationName(\"observabilityConfigurationName\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .traceConfiguration(TraceConfigurationProperty.builder()\n                .vendor(\"vendor\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\ncfnObservabilityConfigurationProps := &cfnObservabilityConfigurationProps{\n\tobservabilityConfigurationName: jsii.String(\"observabilityConfigurationName\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttraceConfiguration: &traceConfigurationProperty{\n\t\tvendor: jsii.String(\"vendor\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst cfnObservabilityConfigurationProps: apprunner.CfnObservabilityConfigurationProps = {\n  observabilityConfigurationName: 'observabilityConfigurationName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  traceConfiguration: {\n    vendor: 'vendor',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnObservabilityConfigurationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnObservabilityConfigurationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnObservabilityConfigurationProps: apprunner.CfnObservabilityConfigurationProps = {\n  observabilityConfigurationName: 'observabilityConfigurationName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  traceConfiguration: {\n    vendor: 'vendor',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "4fd65532c541ade7399997cc288885980328a291faf34b427ba3b8f3844ef6a4"
    },
    "a45adfcf29e1e26681d4f3db66976710f91672e1af577d5e9c52d1f5bc4f6864": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\ncfn_service = apprunner.CfnService(self, \"MyCfnService\",\n    source_configuration=apprunner.CfnService.SourceConfigurationProperty(\n        authentication_configuration=apprunner.CfnService.AuthenticationConfigurationProperty(\n            access_role_arn=\"accessRoleArn\",\n            connection_arn=\"connectionArn\"\n        ),\n        auto_deployments_enabled=False,\n        code_repository=apprunner.CfnService.CodeRepositoryProperty(\n            repository_url=\"repositoryUrl\",\n            source_code_version=apprunner.CfnService.SourceCodeVersionProperty(\n                type=\"type\",\n                value=\"value\"\n            ),\n\n            # the properties below are optional\n            code_configuration=apprunner.CfnService.CodeConfigurationProperty(\n                configuration_source=\"configurationSource\",\n\n                # the properties below are optional\n                code_configuration_values=apprunner.CfnService.CodeConfigurationValuesProperty(\n                    runtime=\"runtime\",\n\n                    # the properties below are optional\n                    build_command=\"buildCommand\",\n                    port=\"port\",\n                    runtime_environment_variables=[apprunner.CfnService.KeyValuePairProperty(\n                        name=\"name\",\n                        value=\"value\"\n                    )],\n                    start_command=\"startCommand\"\n                )\n            )\n        ),\n        image_repository=apprunner.CfnService.ImageRepositoryProperty(\n            image_identifier=\"imageIdentifier\",\n            image_repository_type=\"imageRepositoryType\",\n\n            # the properties below are optional\n            image_configuration=apprunner.CfnService.ImageConfigurationProperty(\n                port=\"port\",\n                runtime_environment_variables=[apprunner.CfnService.KeyValuePairProperty(\n                    name=\"name\",\n                    value=\"value\"\n                )],\n                start_command=\"startCommand\"\n            )\n        )\n    ),\n\n    # the properties below are optional\n    auto_scaling_configuration_arn=\"autoScalingConfigurationArn\",\n    encryption_configuration=apprunner.CfnService.EncryptionConfigurationProperty(\n        kms_key=\"kmsKey\"\n    ),\n    health_check_configuration=apprunner.CfnService.HealthCheckConfigurationProperty(\n        healthy_threshold=123,\n        interval=123,\n        path=\"path\",\n        protocol=\"protocol\",\n        timeout=123,\n        unhealthy_threshold=123\n    ),\n    instance_configuration=apprunner.CfnService.InstanceConfigurationProperty(\n        cpu=\"cpu\",\n        instance_role_arn=\"instanceRoleArn\",\n        memory=\"memory\"\n    ),\n    network_configuration=apprunner.CfnService.NetworkConfigurationProperty(\n        egress_configuration=apprunner.CfnService.EgressConfigurationProperty(\n            egress_type=\"egressType\",\n\n            # the properties below are optional\n            vpc_connector_arn=\"vpcConnectorArn\"\n        )\n    ),\n    observability_configuration=apprunner.CfnService.ServiceObservabilityConfigurationProperty(\n        observability_enabled=False,\n\n        # the properties below are optional\n        observability_configuration_arn=\"observabilityConfigurationArn\"\n    ),\n    service_name=\"serviceName\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nCfnService cfnService = new CfnService(this, \"MyCfnService\", new CfnServiceProps {\n    SourceConfiguration = new SourceConfigurationProperty {\n        AuthenticationConfiguration = new AuthenticationConfigurationProperty {\n            AccessRoleArn = \"accessRoleArn\",\n            ConnectionArn = \"connectionArn\"\n        },\n        AutoDeploymentsEnabled = false,\n        CodeRepository = new CodeRepositoryProperty {\n            RepositoryUrl = \"repositoryUrl\",\n            SourceCodeVersion = new SourceCodeVersionProperty {\n                Type = \"type\",\n                Value = \"value\"\n            },\n\n            // the properties below are optional\n            CodeConfiguration = new CodeConfigurationProperty {\n                ConfigurationSource = \"configurationSource\",\n\n                // the properties below are optional\n                CodeConfigurationValues = new CodeConfigurationValuesProperty {\n                    Runtime = \"runtime\",\n\n                    // the properties below are optional\n                    BuildCommand = \"buildCommand\",\n                    Port = \"port\",\n                    RuntimeEnvironmentVariables = new [] { new KeyValuePairProperty {\n                        Name = \"name\",\n                        Value = \"value\"\n                    } },\n                    StartCommand = \"startCommand\"\n                }\n            }\n        },\n        ImageRepository = new ImageRepositoryProperty {\n            ImageIdentifier = \"imageIdentifier\",\n            ImageRepositoryType = \"imageRepositoryType\",\n\n            // the properties below are optional\n            ImageConfiguration = new ImageConfigurationProperty {\n                Port = \"port\",\n                RuntimeEnvironmentVariables = new [] { new KeyValuePairProperty {\n                    Name = \"name\",\n                    Value = \"value\"\n                } },\n                StartCommand = \"startCommand\"\n            }\n        }\n    },\n\n    // the properties below are optional\n    AutoScalingConfigurationArn = \"autoScalingConfigurationArn\",\n    EncryptionConfiguration = new EncryptionConfigurationProperty {\n        KmsKey = \"kmsKey\"\n    },\n    HealthCheckConfiguration = new HealthCheckConfigurationProperty {\n        HealthyThreshold = 123,\n        Interval = 123,\n        Path = \"path\",\n        Protocol = \"protocol\",\n        Timeout = 123,\n        UnhealthyThreshold = 123\n    },\n    InstanceConfiguration = new InstanceConfigurationProperty {\n        Cpu = \"cpu\",\n        InstanceRoleArn = \"instanceRoleArn\",\n        Memory = \"memory\"\n    },\n    NetworkConfiguration = new NetworkConfigurationProperty {\n        EgressConfiguration = new EgressConfigurationProperty {\n            EgressType = \"egressType\",\n\n            // the properties below are optional\n            VpcConnectorArn = \"vpcConnectorArn\"\n        }\n    },\n    ObservabilityConfiguration = new ServiceObservabilityConfigurationProperty {\n        ObservabilityEnabled = false,\n\n        // the properties below are optional\n        ObservabilityConfigurationArn = \"observabilityConfigurationArn\"\n    },\n    ServiceName = \"serviceName\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nCfnService cfnService = CfnService.Builder.create(this, \"MyCfnService\")\n        .sourceConfiguration(SourceConfigurationProperty.builder()\n                .authenticationConfiguration(AuthenticationConfigurationProperty.builder()\n                        .accessRoleArn(\"accessRoleArn\")\n                        .connectionArn(\"connectionArn\")\n                        .build())\n                .autoDeploymentsEnabled(false)\n                .codeRepository(CodeRepositoryProperty.builder()\n                        .repositoryUrl(\"repositoryUrl\")\n                        .sourceCodeVersion(SourceCodeVersionProperty.builder()\n                                .type(\"type\")\n                                .value(\"value\")\n                                .build())\n\n                        // the properties below are optional\n                        .codeConfiguration(CodeConfigurationProperty.builder()\n                                .configurationSource(\"configurationSource\")\n\n                                // the properties below are optional\n                                .codeConfigurationValues(CodeConfigurationValuesProperty.builder()\n                                        .runtime(\"runtime\")\n\n                                        // the properties below are optional\n                                        .buildCommand(\"buildCommand\")\n                                        .port(\"port\")\n                                        .runtimeEnvironmentVariables(List.of(KeyValuePairProperty.builder()\n                                                .name(\"name\")\n                                                .value(\"value\")\n                                                .build()))\n                                        .startCommand(\"startCommand\")\n                                        .build())\n                                .build())\n                        .build())\n                .imageRepository(ImageRepositoryProperty.builder()\n                        .imageIdentifier(\"imageIdentifier\")\n                        .imageRepositoryType(\"imageRepositoryType\")\n\n                        // the properties below are optional\n                        .imageConfiguration(ImageConfigurationProperty.builder()\n                                .port(\"port\")\n                                .runtimeEnvironmentVariables(List.of(KeyValuePairProperty.builder()\n                                        .name(\"name\")\n                                        .value(\"value\")\n                                        .build()))\n                                .startCommand(\"startCommand\")\n                                .build())\n                        .build())\n                .build())\n\n        // the properties below are optional\n        .autoScalingConfigurationArn(\"autoScalingConfigurationArn\")\n        .encryptionConfiguration(EncryptionConfigurationProperty.builder()\n                .kmsKey(\"kmsKey\")\n                .build())\n        .healthCheckConfiguration(HealthCheckConfigurationProperty.builder()\n                .healthyThreshold(123)\n                .interval(123)\n                .path(\"path\")\n                .protocol(\"protocol\")\n                .timeout(123)\n                .unhealthyThreshold(123)\n                .build())\n        .instanceConfiguration(InstanceConfigurationProperty.builder()\n                .cpu(\"cpu\")\n                .instanceRoleArn(\"instanceRoleArn\")\n                .memory(\"memory\")\n                .build())\n        .networkConfiguration(NetworkConfigurationProperty.builder()\n                .egressConfiguration(EgressConfigurationProperty.builder()\n                        .egressType(\"egressType\")\n\n                        // the properties below are optional\n                        .vpcConnectorArn(\"vpcConnectorArn\")\n                        .build())\n                .build())\n        .observabilityConfiguration(ServiceObservabilityConfigurationProperty.builder()\n                .observabilityEnabled(false)\n\n                // the properties below are optional\n                .observabilityConfigurationArn(\"observabilityConfigurationArn\")\n                .build())\n        .serviceName(\"serviceName\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\ncfnService := apprunner.NewCfnService(this, jsii.String(\"MyCfnService\"), &cfnServiceProps{\n\tsourceConfiguration: &sourceConfigurationProperty{\n\t\tauthenticationConfiguration: &authenticationConfigurationProperty{\n\t\t\taccessRoleArn: jsii.String(\"accessRoleArn\"),\n\t\t\tconnectionArn: jsii.String(\"connectionArn\"),\n\t\t},\n\t\tautoDeploymentsEnabled: jsii.Boolean(false),\n\t\tcodeRepository: &codeRepositoryProperty{\n\t\t\trepositoryUrl: jsii.String(\"repositoryUrl\"),\n\t\t\tsourceCodeVersion: &sourceCodeVersionProperty{\n\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t},\n\n\t\t\t// the properties below are optional\n\t\t\tcodeConfiguration: &codeConfigurationProperty{\n\t\t\t\tconfigurationSource: jsii.String(\"configurationSource\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tcodeConfigurationValues: &codeConfigurationValuesProperty{\n\t\t\t\t\truntime: jsii.String(\"runtime\"),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tbuildCommand: jsii.String(\"buildCommand\"),\n\t\t\t\t\tport: jsii.String(\"port\"),\n\t\t\t\t\truntimeEnvironmentVariables: []interface{}{\n\t\t\t\t\t\t&keyValuePairProperty{\n\t\t\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tstartCommand: jsii.String(\"startCommand\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\timageRepository: &imageRepositoryProperty{\n\t\t\timageIdentifier: jsii.String(\"imageIdentifier\"),\n\t\t\timageRepositoryType: jsii.String(\"imageRepositoryType\"),\n\n\t\t\t// the properties below are optional\n\t\t\timageConfiguration: &imageConfigurationProperty{\n\t\t\t\tport: jsii.String(\"port\"),\n\t\t\t\truntimeEnvironmentVariables: []interface{}{\n\t\t\t\t\t&keyValuePairProperty{\n\t\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tstartCommand: jsii.String(\"startCommand\"),\n\t\t\t},\n\t\t},\n\t},\n\n\t// the properties below are optional\n\tautoScalingConfigurationArn: jsii.String(\"autoScalingConfigurationArn\"),\n\tencryptionConfiguration: &encryptionConfigurationProperty{\n\t\tkmsKey: jsii.String(\"kmsKey\"),\n\t},\n\thealthCheckConfiguration: &healthCheckConfigurationProperty{\n\t\thealthyThreshold: jsii.Number(123),\n\t\tinterval: jsii.Number(123),\n\t\tpath: jsii.String(\"path\"),\n\t\tprotocol: jsii.String(\"protocol\"),\n\t\ttimeout: jsii.Number(123),\n\t\tunhealthyThreshold: jsii.Number(123),\n\t},\n\tinstanceConfiguration: &instanceConfigurationProperty{\n\t\tcpu: jsii.String(\"cpu\"),\n\t\tinstanceRoleArn: jsii.String(\"instanceRoleArn\"),\n\t\tmemory: jsii.String(\"memory\"),\n\t},\n\tnetworkConfiguration: &networkConfigurationProperty{\n\t\tegressConfiguration: &egressConfigurationProperty{\n\t\t\tegressType: jsii.String(\"egressType\"),\n\n\t\t\t// the properties below are optional\n\t\t\tvpcConnectorArn: jsii.String(\"vpcConnectorArn\"),\n\t\t},\n\t},\n\tobservabilityConfiguration: &serviceObservabilityConfigurationProperty{\n\t\tobservabilityEnabled: jsii.Boolean(false),\n\n\t\t// the properties below are optional\n\t\tobservabilityConfigurationArn: jsii.String(\"observabilityConfigurationArn\"),\n\t},\n\tserviceName: jsii.String(\"serviceName\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst cfnService = new apprunner.CfnService(this, 'MyCfnService', {\n  sourceConfiguration: {\n    authenticationConfiguration: {\n      accessRoleArn: 'accessRoleArn',\n      connectionArn: 'connectionArn',\n    },\n    autoDeploymentsEnabled: false,\n    codeRepository: {\n      repositoryUrl: 'repositoryUrl',\n      sourceCodeVersion: {\n        type: 'type',\n        value: 'value',\n      },\n\n      // the properties below are optional\n      codeConfiguration: {\n        configurationSource: 'configurationSource',\n\n        // the properties below are optional\n        codeConfigurationValues: {\n          runtime: 'runtime',\n\n          // the properties below are optional\n          buildCommand: 'buildCommand',\n          port: 'port',\n          runtimeEnvironmentVariables: [{\n            name: 'name',\n            value: 'value',\n          }],\n          startCommand: 'startCommand',\n        },\n      },\n    },\n    imageRepository: {\n      imageIdentifier: 'imageIdentifier',\n      imageRepositoryType: 'imageRepositoryType',\n\n      // the properties below are optional\n      imageConfiguration: {\n        port: 'port',\n        runtimeEnvironmentVariables: [{\n          name: 'name',\n          value: 'value',\n        }],\n        startCommand: 'startCommand',\n      },\n    },\n  },\n\n  // the properties below are optional\n  autoScalingConfigurationArn: 'autoScalingConfigurationArn',\n  encryptionConfiguration: {\n    kmsKey: 'kmsKey',\n  },\n  healthCheckConfiguration: {\n    healthyThreshold: 123,\n    interval: 123,\n    path: 'path',\n    protocol: 'protocol',\n    timeout: 123,\n    unhealthyThreshold: 123,\n  },\n  instanceConfiguration: {\n    cpu: 'cpu',\n    instanceRoleArn: 'instanceRoleArn',\n    memory: 'memory',\n  },\n  networkConfiguration: {\n    egressConfiguration: {\n      egressType: 'egressType',\n\n      // the properties below are optional\n      vpcConnectorArn: 'vpcConnectorArn',\n    },\n  },\n  observabilityConfiguration: {\n    observabilityEnabled: false,\n\n    // the properties below are optional\n    observabilityConfigurationArn: 'observabilityConfigurationArn',\n  },\n  serviceName: 'serviceName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnService",
        "@aws-cdk/aws-apprunner.CfnServiceProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnService = new apprunner.CfnService(this, 'MyCfnService', {\n  sourceConfiguration: {\n    authenticationConfiguration: {\n      accessRoleArn: 'accessRoleArn',\n      connectionArn: 'connectionArn',\n    },\n    autoDeploymentsEnabled: false,\n    codeRepository: {\n      repositoryUrl: 'repositoryUrl',\n      sourceCodeVersion: {\n        type: 'type',\n        value: 'value',\n      },\n\n      // the properties below are optional\n      codeConfiguration: {\n        configurationSource: 'configurationSource',\n\n        // the properties below are optional\n        codeConfigurationValues: {\n          runtime: 'runtime',\n\n          // the properties below are optional\n          buildCommand: 'buildCommand',\n          port: 'port',\n          runtimeEnvironmentVariables: [{\n            name: 'name',\n            value: 'value',\n          }],\n          startCommand: 'startCommand',\n        },\n      },\n    },\n    imageRepository: {\n      imageIdentifier: 'imageIdentifier',\n      imageRepositoryType: 'imageRepositoryType',\n\n      // the properties below are optional\n      imageConfiguration: {\n        port: 'port',\n        runtimeEnvironmentVariables: [{\n          name: 'name',\n          value: 'value',\n        }],\n        startCommand: 'startCommand',\n      },\n    },\n  },\n\n  // the properties below are optional\n  autoScalingConfigurationArn: 'autoScalingConfigurationArn',\n  encryptionConfiguration: {\n    kmsKey: 'kmsKey',\n  },\n  healthCheckConfiguration: {\n    healthyThreshold: 123,\n    interval: 123,\n    path: 'path',\n    protocol: 'protocol',\n    timeout: 123,\n    unhealthyThreshold: 123,\n  },\n  instanceConfiguration: {\n    cpu: 'cpu',\n    instanceRoleArn: 'instanceRoleArn',\n    memory: 'memory',\n  },\n  networkConfiguration: {\n    egressConfiguration: {\n      egressType: 'egressType',\n\n      // the properties below are optional\n      vpcConnectorArn: 'vpcConnectorArn',\n    },\n  },\n  observabilityConfiguration: {\n    observabilityEnabled: false,\n\n    // the properties below are optional\n    observabilityConfigurationArn: 'observabilityConfigurationArn',\n  },\n  serviceName: 'serviceName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 33,
        "75": 58,
        "91": 2,
        "104": 1,
        "192": 3,
        "193": 18,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 54,
        "290": 1
      },
      "fqnsFingerprint": "7a136c8c9de914e8abc960d712dc5c3bb566be90832c9c9c74ac582c4795cb9d"
    },
    "709bd0172462ed10beb54be5341affd547e98e2ea0458e650e6457f144001fe7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\nauthentication_configuration_property = apprunner.CfnService.AuthenticationConfigurationProperty(\n    access_role_arn=\"accessRoleArn\",\n    connection_arn=\"connectionArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nAuthenticationConfigurationProperty authenticationConfigurationProperty = new AuthenticationConfigurationProperty {\n    AccessRoleArn = \"accessRoleArn\",\n    ConnectionArn = \"connectionArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nAuthenticationConfigurationProperty authenticationConfigurationProperty = AuthenticationConfigurationProperty.builder()\n        .accessRoleArn(\"accessRoleArn\")\n        .connectionArn(\"connectionArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\nauthenticationConfigurationProperty := &authenticationConfigurationProperty{\n\taccessRoleArn: jsii.String(\"accessRoleArn\"),\n\tconnectionArn: jsii.String(\"connectionArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst authenticationConfigurationProperty: apprunner.CfnService.AuthenticationConfigurationProperty = {\n  accessRoleArn: 'accessRoleArn',\n  connectionArn: 'connectionArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnService.AuthenticationConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnService.AuthenticationConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst authenticationConfigurationProperty: apprunner.CfnService.AuthenticationConfigurationProperty = {\n  accessRoleArn: 'accessRoleArn',\n  connectionArn: 'connectionArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "532f698cba7a2e13465b8f171dafe03880811dd4c86af37a7c5bb073df6bf056"
    },
    "e7d1c52bb3e8f09fd4a93f31e52cbd30137174c087a5778cfcedefff37497f16": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\ncode_configuration_property = apprunner.CfnService.CodeConfigurationProperty(\n    configuration_source=\"configurationSource\",\n\n    # the properties below are optional\n    code_configuration_values=apprunner.CfnService.CodeConfigurationValuesProperty(\n        runtime=\"runtime\",\n\n        # the properties below are optional\n        build_command=\"buildCommand\",\n        port=\"port\",\n        runtime_environment_variables=[apprunner.CfnService.KeyValuePairProperty(\n            name=\"name\",\n            value=\"value\"\n        )],\n        start_command=\"startCommand\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nCodeConfigurationProperty codeConfigurationProperty = new CodeConfigurationProperty {\n    ConfigurationSource = \"configurationSource\",\n\n    // the properties below are optional\n    CodeConfigurationValues = new CodeConfigurationValuesProperty {\n        Runtime = \"runtime\",\n\n        // the properties below are optional\n        BuildCommand = \"buildCommand\",\n        Port = \"port\",\n        RuntimeEnvironmentVariables = new [] { new KeyValuePairProperty {\n            Name = \"name\",\n            Value = \"value\"\n        } },\n        StartCommand = \"startCommand\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nCodeConfigurationProperty codeConfigurationProperty = CodeConfigurationProperty.builder()\n        .configurationSource(\"configurationSource\")\n\n        // the properties below are optional\n        .codeConfigurationValues(CodeConfigurationValuesProperty.builder()\n                .runtime(\"runtime\")\n\n                // the properties below are optional\n                .buildCommand(\"buildCommand\")\n                .port(\"port\")\n                .runtimeEnvironmentVariables(List.of(KeyValuePairProperty.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n                        .build()))\n                .startCommand(\"startCommand\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\ncodeConfigurationProperty := &codeConfigurationProperty{\n\tconfigurationSource: jsii.String(\"configurationSource\"),\n\n\t// the properties below are optional\n\tcodeConfigurationValues: &codeConfigurationValuesProperty{\n\t\truntime: jsii.String(\"runtime\"),\n\n\t\t// the properties below are optional\n\t\tbuildCommand: jsii.String(\"buildCommand\"),\n\t\tport: jsii.String(\"port\"),\n\t\truntimeEnvironmentVariables: []interface{}{\n\t\t\t&keyValuePairProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t},\n\t\t},\n\t\tstartCommand: jsii.String(\"startCommand\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst codeConfigurationProperty: apprunner.CfnService.CodeConfigurationProperty = {\n  configurationSource: 'configurationSource',\n\n  // the properties below are optional\n  codeConfigurationValues: {\n    runtime: 'runtime',\n\n    // the properties below are optional\n    buildCommand: 'buildCommand',\n    port: 'port',\n    runtimeEnvironmentVariables: [{\n      name: 'name',\n      value: 'value',\n    }],\n    startCommand: 'startCommand',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnService.CodeConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnService.CodeConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst codeConfigurationProperty: apprunner.CfnService.CodeConfigurationProperty = {\n  configurationSource: 'configurationSource',\n\n  // the properties below are optional\n  codeConfigurationValues: {\n    runtime: 'runtime',\n\n    // the properties below are optional\n    buildCommand: 'buildCommand',\n    port: 'port',\n    runtimeEnvironmentVariables: [{\n      name: 'name',\n      value: 'value',\n    }],\n    startCommand: 'startCommand',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 14,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "8e94f28f9b1a609e0731c3f19db7f417bd50fe40bd8b850a79c183937cad5d9c"
    },
    "47ef8c67d11e934ffc984c271c5e82b290f9d8991d7d3fd54ac9fa83b851f5cc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\ncode_configuration_values_property = apprunner.CfnService.CodeConfigurationValuesProperty(\n    runtime=\"runtime\",\n\n    # the properties below are optional\n    build_command=\"buildCommand\",\n    port=\"port\",\n    runtime_environment_variables=[apprunner.CfnService.KeyValuePairProperty(\n        name=\"name\",\n        value=\"value\"\n    )],\n    start_command=\"startCommand\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nCodeConfigurationValuesProperty codeConfigurationValuesProperty = new CodeConfigurationValuesProperty {\n    Runtime = \"runtime\",\n\n    // the properties below are optional\n    BuildCommand = \"buildCommand\",\n    Port = \"port\",\n    RuntimeEnvironmentVariables = new [] { new KeyValuePairProperty {\n        Name = \"name\",\n        Value = \"value\"\n    } },\n    StartCommand = \"startCommand\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nCodeConfigurationValuesProperty codeConfigurationValuesProperty = CodeConfigurationValuesProperty.builder()\n        .runtime(\"runtime\")\n\n        // the properties below are optional\n        .buildCommand(\"buildCommand\")\n        .port(\"port\")\n        .runtimeEnvironmentVariables(List.of(KeyValuePairProperty.builder()\n                .name(\"name\")\n                .value(\"value\")\n                .build()))\n        .startCommand(\"startCommand\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\ncodeConfigurationValuesProperty := &codeConfigurationValuesProperty{\n\truntime: jsii.String(\"runtime\"),\n\n\t// the properties below are optional\n\tbuildCommand: jsii.String(\"buildCommand\"),\n\tport: jsii.String(\"port\"),\n\truntimeEnvironmentVariables: []interface{}{\n\t\t&keyValuePairProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tstartCommand: jsii.String(\"startCommand\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst codeConfigurationValuesProperty: apprunner.CfnService.CodeConfigurationValuesProperty = {\n  runtime: 'runtime',\n\n  // the properties below are optional\n  buildCommand: 'buildCommand',\n  port: 'port',\n  runtimeEnvironmentVariables: [{\n    name: 'name',\n    value: 'value',\n  }],\n  startCommand: 'startCommand',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnService.CodeConfigurationValuesProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnService.CodeConfigurationValuesProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst codeConfigurationValuesProperty: apprunner.CfnService.CodeConfigurationValuesProperty = {\n  runtime: 'runtime',\n\n  // the properties below are optional\n  buildCommand: 'buildCommand',\n  port: 'port',\n  runtimeEnvironmentVariables: [{\n    name: 'name',\n    value: 'value',\n  }],\n  startCommand: 'startCommand',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 12,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "9b61806b280e99336b5485254a1e44ea3298eed2a4f43bdc871ccfe7d292c138"
    },
    "8f4f532ac5c99f321420fca7607e8d12e1e9e3514f2f5eda2073c68115492d8f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\ncode_repository_property = apprunner.CfnService.CodeRepositoryProperty(\n    repository_url=\"repositoryUrl\",\n    source_code_version=apprunner.CfnService.SourceCodeVersionProperty(\n        type=\"type\",\n        value=\"value\"\n    ),\n\n    # the properties below are optional\n    code_configuration=apprunner.CfnService.CodeConfigurationProperty(\n        configuration_source=\"configurationSource\",\n\n        # the properties below are optional\n        code_configuration_values=apprunner.CfnService.CodeConfigurationValuesProperty(\n            runtime=\"runtime\",\n\n            # the properties below are optional\n            build_command=\"buildCommand\",\n            port=\"port\",\n            runtime_environment_variables=[apprunner.CfnService.KeyValuePairProperty(\n                name=\"name\",\n                value=\"value\"\n            )],\n            start_command=\"startCommand\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nCodeRepositoryProperty codeRepositoryProperty = new CodeRepositoryProperty {\n    RepositoryUrl = \"repositoryUrl\",\n    SourceCodeVersion = new SourceCodeVersionProperty {\n        Type = \"type\",\n        Value = \"value\"\n    },\n\n    // the properties below are optional\n    CodeConfiguration = new CodeConfigurationProperty {\n        ConfigurationSource = \"configurationSource\",\n\n        // the properties below are optional\n        CodeConfigurationValues = new CodeConfigurationValuesProperty {\n            Runtime = \"runtime\",\n\n            // the properties below are optional\n            BuildCommand = \"buildCommand\",\n            Port = \"port\",\n            RuntimeEnvironmentVariables = new [] { new KeyValuePairProperty {\n                Name = \"name\",\n                Value = \"value\"\n            } },\n            StartCommand = \"startCommand\"\n        }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nCodeRepositoryProperty codeRepositoryProperty = CodeRepositoryProperty.builder()\n        .repositoryUrl(\"repositoryUrl\")\n        .sourceCodeVersion(SourceCodeVersionProperty.builder()\n                .type(\"type\")\n                .value(\"value\")\n                .build())\n\n        // the properties below are optional\n        .codeConfiguration(CodeConfigurationProperty.builder()\n                .configurationSource(\"configurationSource\")\n\n                // the properties below are optional\n                .codeConfigurationValues(CodeConfigurationValuesProperty.builder()\n                        .runtime(\"runtime\")\n\n                        // the properties below are optional\n                        .buildCommand(\"buildCommand\")\n                        .port(\"port\")\n                        .runtimeEnvironmentVariables(List.of(KeyValuePairProperty.builder()\n                                .name(\"name\")\n                                .value(\"value\")\n                                .build()))\n                        .startCommand(\"startCommand\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\ncodeRepositoryProperty := &codeRepositoryProperty{\n\trepositoryUrl: jsii.String(\"repositoryUrl\"),\n\tsourceCodeVersion: &sourceCodeVersionProperty{\n\t\ttype: jsii.String(\"type\"),\n\t\tvalue: jsii.String(\"value\"),\n\t},\n\n\t// the properties below are optional\n\tcodeConfiguration: &codeConfigurationProperty{\n\t\tconfigurationSource: jsii.String(\"configurationSource\"),\n\n\t\t// the properties below are optional\n\t\tcodeConfigurationValues: &codeConfigurationValuesProperty{\n\t\t\truntime: jsii.String(\"runtime\"),\n\n\t\t\t// the properties below are optional\n\t\t\tbuildCommand: jsii.String(\"buildCommand\"),\n\t\t\tport: jsii.String(\"port\"),\n\t\t\truntimeEnvironmentVariables: []interface{}{\n\t\t\t\t&keyValuePairProperty{\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tstartCommand: jsii.String(\"startCommand\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst codeRepositoryProperty: apprunner.CfnService.CodeRepositoryProperty = {\n  repositoryUrl: 'repositoryUrl',\n  sourceCodeVersion: {\n    type: 'type',\n    value: 'value',\n  },\n\n  // the properties below are optional\n  codeConfiguration: {\n    configurationSource: 'configurationSource',\n\n    // the properties below are optional\n    codeConfigurationValues: {\n      runtime: 'runtime',\n\n      // the properties below are optional\n      buildCommand: 'buildCommand',\n      port: 'port',\n      runtimeEnvironmentVariables: [{\n        name: 'name',\n        value: 'value',\n      }],\n      startCommand: 'startCommand',\n    },\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnService.CodeRepositoryProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnService.CodeRepositoryProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst codeRepositoryProperty: apprunner.CfnService.CodeRepositoryProperty = {\n  repositoryUrl: 'repositoryUrl',\n  sourceCodeVersion: {\n    type: 'type',\n    value: 'value',\n  },\n\n  // the properties below are optional\n  codeConfiguration: {\n    configurationSource: 'configurationSource',\n\n    // the properties below are optional\n    codeConfigurationValues: {\n      runtime: 'runtime',\n\n      // the properties below are optional\n      buildCommand: 'buildCommand',\n      port: 'port',\n      runtimeEnvironmentVariables: [{\n        name: 'name',\n        value: 'value',\n      }],\n      startCommand: 'startCommand',\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 11,
        "75": 19,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 5,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "08fec757f74c988031421e07e9e9c66194ac184ea4779fc1dc1c846964d208aa"
    },
    "e26c3d482de44de337f9200558f50aa76b3392dbecb7072a5ce93b32b7b8b3c0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\negress_configuration_property = apprunner.CfnService.EgressConfigurationProperty(\n    egress_type=\"egressType\",\n\n    # the properties below are optional\n    vpc_connector_arn=\"vpcConnectorArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nEgressConfigurationProperty egressConfigurationProperty = new EgressConfigurationProperty {\n    EgressType = \"egressType\",\n\n    // the properties below are optional\n    VpcConnectorArn = \"vpcConnectorArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nEgressConfigurationProperty egressConfigurationProperty = EgressConfigurationProperty.builder()\n        .egressType(\"egressType\")\n\n        // the properties below are optional\n        .vpcConnectorArn(\"vpcConnectorArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\negressConfigurationProperty := &egressConfigurationProperty{\n\tegressType: jsii.String(\"egressType\"),\n\n\t// the properties below are optional\n\tvpcConnectorArn: jsii.String(\"vpcConnectorArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst egressConfigurationProperty: apprunner.CfnService.EgressConfigurationProperty = {\n  egressType: 'egressType',\n\n  // the properties below are optional\n  vpcConnectorArn: 'vpcConnectorArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnService.EgressConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnService.EgressConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst egressConfigurationProperty: apprunner.CfnService.EgressConfigurationProperty = {\n  egressType: 'egressType',\n\n  // the properties below are optional\n  vpcConnectorArn: 'vpcConnectorArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "5e365dfa3f8c3c39a30f11549996d29f7ea3344c3b2be70edccb4ef8f76e488a"
    },
    "dcf4fe2cf5616373c685754d86d638dbc95c2766b6cbf2129fc76dba98c31f8f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\nencryption_configuration_property = apprunner.CfnService.EncryptionConfigurationProperty(\n    kms_key=\"kmsKey\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nEncryptionConfigurationProperty encryptionConfigurationProperty = new EncryptionConfigurationProperty {\n    KmsKey = \"kmsKey\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nEncryptionConfigurationProperty encryptionConfigurationProperty = EncryptionConfigurationProperty.builder()\n        .kmsKey(\"kmsKey\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\nencryptionConfigurationProperty := &encryptionConfigurationProperty{\n\tkmsKey: jsii.String(\"kmsKey\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst encryptionConfigurationProperty: apprunner.CfnService.EncryptionConfigurationProperty = {\n  kmsKey: 'kmsKey',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnService.EncryptionConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnService.EncryptionConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst encryptionConfigurationProperty: apprunner.CfnService.EncryptionConfigurationProperty = {\n  kmsKey: 'kmsKey',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "bc65420730540a507d824f89cbf22d9d2ab6772890ea77de55f883e4d0eb7287"
    },
    "ba6c744ce54e7afac3c8a8024a89e4a4d7e4ed9e7fd96acad4bc02c192b1e6b8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\nhealth_check_configuration_property = apprunner.CfnService.HealthCheckConfigurationProperty(\n    healthy_threshold=123,\n    interval=123,\n    path=\"path\",\n    protocol=\"protocol\",\n    timeout=123,\n    unhealthy_threshold=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nHealthCheckConfigurationProperty healthCheckConfigurationProperty = new HealthCheckConfigurationProperty {\n    HealthyThreshold = 123,\n    Interval = 123,\n    Path = \"path\",\n    Protocol = \"protocol\",\n    Timeout = 123,\n    UnhealthyThreshold = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nHealthCheckConfigurationProperty healthCheckConfigurationProperty = HealthCheckConfigurationProperty.builder()\n        .healthyThreshold(123)\n        .interval(123)\n        .path(\"path\")\n        .protocol(\"protocol\")\n        .timeout(123)\n        .unhealthyThreshold(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\nhealthCheckConfigurationProperty := &healthCheckConfigurationProperty{\n\thealthyThreshold: jsii.Number(123),\n\tinterval: jsii.Number(123),\n\tpath: jsii.String(\"path\"),\n\tprotocol: jsii.String(\"protocol\"),\n\ttimeout: jsii.Number(123),\n\tunhealthyThreshold: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst healthCheckConfigurationProperty: apprunner.CfnService.HealthCheckConfigurationProperty = {\n  healthyThreshold: 123,\n  interval: 123,\n  path: 'path',\n  protocol: 'protocol',\n  timeout: 123,\n  unhealthyThreshold: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnService.HealthCheckConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnService.HealthCheckConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst healthCheckConfigurationProperty: apprunner.CfnService.HealthCheckConfigurationProperty = {\n  healthyThreshold: 123,\n  interval: 123,\n  path: 'path',\n  protocol: 'protocol',\n  timeout: 123,\n  unhealthyThreshold: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 3,
        "75": 11,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "7feb7802f3e8d82bd1dab7e9bd6cc540547b3bf4c15356321b9d500ad5740128"
    },
    "4c1385ca6debdfc910d710abede3338b066c9bd9b46ecbbfb6e5435cb96201f8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\nimage_configuration_property = apprunner.CfnService.ImageConfigurationProperty(\n    port=\"port\",\n    runtime_environment_variables=[apprunner.CfnService.KeyValuePairProperty(\n        name=\"name\",\n        value=\"value\"\n    )],\n    start_command=\"startCommand\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nImageConfigurationProperty imageConfigurationProperty = new ImageConfigurationProperty {\n    Port = \"port\",\n    RuntimeEnvironmentVariables = new [] { new KeyValuePairProperty {\n        Name = \"name\",\n        Value = \"value\"\n    } },\n    StartCommand = \"startCommand\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nImageConfigurationProperty imageConfigurationProperty = ImageConfigurationProperty.builder()\n        .port(\"port\")\n        .runtimeEnvironmentVariables(List.of(KeyValuePairProperty.builder()\n                .name(\"name\")\n                .value(\"value\")\n                .build()))\n        .startCommand(\"startCommand\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\nimageConfigurationProperty := &imageConfigurationProperty{\n\tport: jsii.String(\"port\"),\n\truntimeEnvironmentVariables: []interface{}{\n\t\t&keyValuePairProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tstartCommand: jsii.String(\"startCommand\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst imageConfigurationProperty: apprunner.CfnService.ImageConfigurationProperty = {\n  port: 'port',\n  runtimeEnvironmentVariables: [{\n    name: 'name',\n    value: 'value',\n  }],\n  startCommand: 'startCommand',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnService.ImageConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnService.ImageConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst imageConfigurationProperty: apprunner.CfnService.ImageConfigurationProperty = {\n  port: 'port',\n  runtimeEnvironmentVariables: [{\n    name: 'name',\n    value: 'value',\n  }],\n  startCommand: 'startCommand',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "e08092b1f4f85bec6bed235bac6c55711220a0826ce4e861f4c8f0413160ade8"
    },
    "13f16aa77e1cbd70417a9143fbaff1a14f9e78ced178a22b599d8194c95831f8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\nimage_repository_property = apprunner.CfnService.ImageRepositoryProperty(\n    image_identifier=\"imageIdentifier\",\n    image_repository_type=\"imageRepositoryType\",\n\n    # the properties below are optional\n    image_configuration=apprunner.CfnService.ImageConfigurationProperty(\n        port=\"port\",\n        runtime_environment_variables=[apprunner.CfnService.KeyValuePairProperty(\n            name=\"name\",\n            value=\"value\"\n        )],\n        start_command=\"startCommand\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nImageRepositoryProperty imageRepositoryProperty = new ImageRepositoryProperty {\n    ImageIdentifier = \"imageIdentifier\",\n    ImageRepositoryType = \"imageRepositoryType\",\n\n    // the properties below are optional\n    ImageConfiguration = new ImageConfigurationProperty {\n        Port = \"port\",\n        RuntimeEnvironmentVariables = new [] { new KeyValuePairProperty {\n            Name = \"name\",\n            Value = \"value\"\n        } },\n        StartCommand = \"startCommand\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nImageRepositoryProperty imageRepositoryProperty = ImageRepositoryProperty.builder()\n        .imageIdentifier(\"imageIdentifier\")\n        .imageRepositoryType(\"imageRepositoryType\")\n\n        // the properties below are optional\n        .imageConfiguration(ImageConfigurationProperty.builder()\n                .port(\"port\")\n                .runtimeEnvironmentVariables(List.of(KeyValuePairProperty.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n                        .build()))\n                .startCommand(\"startCommand\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\nimageRepositoryProperty := &imageRepositoryProperty{\n\timageIdentifier: jsii.String(\"imageIdentifier\"),\n\timageRepositoryType: jsii.String(\"imageRepositoryType\"),\n\n\t// the properties below are optional\n\timageConfiguration: &imageConfigurationProperty{\n\t\tport: jsii.String(\"port\"),\n\t\truntimeEnvironmentVariables: []interface{}{\n\t\t\t&keyValuePairProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t},\n\t\t},\n\t\tstartCommand: jsii.String(\"startCommand\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst imageRepositoryProperty: apprunner.CfnService.ImageRepositoryProperty = {\n  imageIdentifier: 'imageIdentifier',\n  imageRepositoryType: 'imageRepositoryType',\n\n  // the properties below are optional\n  imageConfiguration: {\n    port: 'port',\n    runtimeEnvironmentVariables: [{\n      name: 'name',\n      value: 'value',\n    }],\n    startCommand: 'startCommand',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnService.ImageRepositoryProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnService.ImageRepositoryProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst imageRepositoryProperty: apprunner.CfnService.ImageRepositoryProperty = {\n  imageIdentifier: 'imageIdentifier',\n  imageRepositoryType: 'imageRepositoryType',\n\n  // the properties below are optional\n  imageConfiguration: {\n    port: 'port',\n    runtimeEnvironmentVariables: [{\n      name: 'name',\n      value: 'value',\n    }],\n    startCommand: 'startCommand',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 13,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "834c71d377f33501ba710193af7c1558818bfeb197e182ca3a18fb89b28c5d5e"
    },
    "0d4eccc3e73cc5c6ca381df28da9d4739fd0ceb825d098d062c2f559932c2777": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\ninstance_configuration_property = apprunner.CfnService.InstanceConfigurationProperty(\n    cpu=\"cpu\",\n    instance_role_arn=\"instanceRoleArn\",\n    memory=\"memory\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nInstanceConfigurationProperty instanceConfigurationProperty = new InstanceConfigurationProperty {\n    Cpu = \"cpu\",\n    InstanceRoleArn = \"instanceRoleArn\",\n    Memory = \"memory\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nInstanceConfigurationProperty instanceConfigurationProperty = InstanceConfigurationProperty.builder()\n        .cpu(\"cpu\")\n        .instanceRoleArn(\"instanceRoleArn\")\n        .memory(\"memory\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\ninstanceConfigurationProperty := &instanceConfigurationProperty{\n\tcpu: jsii.String(\"cpu\"),\n\tinstanceRoleArn: jsii.String(\"instanceRoleArn\"),\n\tmemory: jsii.String(\"memory\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst instanceConfigurationProperty: apprunner.CfnService.InstanceConfigurationProperty = {\n  cpu: 'cpu',\n  instanceRoleArn: 'instanceRoleArn',\n  memory: 'memory',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnService.InstanceConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnService.InstanceConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst instanceConfigurationProperty: apprunner.CfnService.InstanceConfigurationProperty = {\n  cpu: 'cpu',\n  instanceRoleArn: 'instanceRoleArn',\n  memory: 'memory',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "a9975143138ece72863b62cce8f0585a734d0d46a503284ec86430a7f31ee2be"
    },
    "c9378d903b0cf429918227ee69430a9376ed05d735c9d7cdb69db100be6e272f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\nkey_value_pair_property = apprunner.CfnService.KeyValuePairProperty(\n    name=\"name\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nKeyValuePairProperty keyValuePairProperty = new KeyValuePairProperty {\n    Name = \"name\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nKeyValuePairProperty keyValuePairProperty = KeyValuePairProperty.builder()\n        .name(\"name\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\nkeyValuePairProperty := &keyValuePairProperty{\n\tname: jsii.String(\"name\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst keyValuePairProperty: apprunner.CfnService.KeyValuePairProperty = {\n  name: 'name',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnService.KeyValuePairProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnService.KeyValuePairProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst keyValuePairProperty: apprunner.CfnService.KeyValuePairProperty = {\n  name: 'name',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "e3feda377c852df6dc97be7971bbde140549c5f3f8c7e0fb5d12284112b2e7a2"
    },
    "e63bc288b39be3aa42e7ed1b255473d48375693e7f0a0566cba44b0d68a3123a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\nnetwork_configuration_property = apprunner.CfnService.NetworkConfigurationProperty(\n    egress_configuration=apprunner.CfnService.EgressConfigurationProperty(\n        egress_type=\"egressType\",\n\n        # the properties below are optional\n        vpc_connector_arn=\"vpcConnectorArn\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nNetworkConfigurationProperty networkConfigurationProperty = new NetworkConfigurationProperty {\n    EgressConfiguration = new EgressConfigurationProperty {\n        EgressType = \"egressType\",\n\n        // the properties below are optional\n        VpcConnectorArn = \"vpcConnectorArn\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nNetworkConfigurationProperty networkConfigurationProperty = NetworkConfigurationProperty.builder()\n        .egressConfiguration(EgressConfigurationProperty.builder()\n                .egressType(\"egressType\")\n\n                // the properties below are optional\n                .vpcConnectorArn(\"vpcConnectorArn\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\nnetworkConfigurationProperty := &networkConfigurationProperty{\n\tegressConfiguration: &egressConfigurationProperty{\n\t\tegressType: jsii.String(\"egressType\"),\n\n\t\t// the properties below are optional\n\t\tvpcConnectorArn: jsii.String(\"vpcConnectorArn\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst networkConfigurationProperty: apprunner.CfnService.NetworkConfigurationProperty = {\n  egressConfiguration: {\n    egressType: 'egressType',\n\n    // the properties below are optional\n    vpcConnectorArn: 'vpcConnectorArn',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnService.NetworkConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnService.NetworkConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst networkConfigurationProperty: apprunner.CfnService.NetworkConfigurationProperty = {\n  egressConfiguration: {\n    egressType: 'egressType',\n\n    // the properties below are optional\n    vpcConnectorArn: 'vpcConnectorArn',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "87db48dd85875fb3ac26027b5aed51788a662a5c35bffdce1f6cb8115e9ae945"
    },
    "1a37880b4ddf114d815f34029ba1b863a493d20a91c87c3f339012021c25dd8b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\nservice_observability_configuration_property = apprunner.CfnService.ServiceObservabilityConfigurationProperty(\n    observability_enabled=False,\n\n    # the properties below are optional\n    observability_configuration_arn=\"observabilityConfigurationArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nServiceObservabilityConfigurationProperty serviceObservabilityConfigurationProperty = new ServiceObservabilityConfigurationProperty {\n    ObservabilityEnabled = false,\n\n    // the properties below are optional\n    ObservabilityConfigurationArn = \"observabilityConfigurationArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nServiceObservabilityConfigurationProperty serviceObservabilityConfigurationProperty = ServiceObservabilityConfigurationProperty.builder()\n        .observabilityEnabled(false)\n\n        // the properties below are optional\n        .observabilityConfigurationArn(\"observabilityConfigurationArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\nserviceObservabilityConfigurationProperty := &serviceObservabilityConfigurationProperty{\n\tobservabilityEnabled: jsii.Boolean(false),\n\n\t// the properties below are optional\n\tobservabilityConfigurationArn: jsii.String(\"observabilityConfigurationArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst serviceObservabilityConfigurationProperty: apprunner.CfnService.ServiceObservabilityConfigurationProperty = {\n  observabilityEnabled: false,\n\n  // the properties below are optional\n  observabilityConfigurationArn: 'observabilityConfigurationArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnService.ServiceObservabilityConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnService.ServiceObservabilityConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst serviceObservabilityConfigurationProperty: apprunner.CfnService.ServiceObservabilityConfigurationProperty = {\n  observabilityEnabled: false,\n\n  // the properties below are optional\n  observabilityConfigurationArn: 'observabilityConfigurationArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a2f3a324706e7b796d7245265d957dd8bf53bbd52885b217e932cd34b6b77020"
    },
    "d935cda524ef40036db568c4d1f3d99cf260a217f481fcb024a6b546767c3ed9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\nsource_code_version_property = apprunner.CfnService.SourceCodeVersionProperty(\n    type=\"type\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nSourceCodeVersionProperty sourceCodeVersionProperty = new SourceCodeVersionProperty {\n    Type = \"type\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nSourceCodeVersionProperty sourceCodeVersionProperty = SourceCodeVersionProperty.builder()\n        .type(\"type\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\nsourceCodeVersionProperty := &sourceCodeVersionProperty{\n\ttype: jsii.String(\"type\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst sourceCodeVersionProperty: apprunner.CfnService.SourceCodeVersionProperty = {\n  type: 'type',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnService.SourceCodeVersionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnService.SourceCodeVersionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sourceCodeVersionProperty: apprunner.CfnService.SourceCodeVersionProperty = {\n  type: 'type',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "432db11918929c93098a55d3c63987fed03315268d55a3747e74706d73971d47"
    },
    "382086c6f7a927ebf7c85c1792cf8a0aed3d24f83cf6cd681ea4d12d39a8193c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\nsource_configuration_property = apprunner.CfnService.SourceConfigurationProperty(\n    authentication_configuration=apprunner.CfnService.AuthenticationConfigurationProperty(\n        access_role_arn=\"accessRoleArn\",\n        connection_arn=\"connectionArn\"\n    ),\n    auto_deployments_enabled=False,\n    code_repository=apprunner.CfnService.CodeRepositoryProperty(\n        repository_url=\"repositoryUrl\",\n        source_code_version=apprunner.CfnService.SourceCodeVersionProperty(\n            type=\"type\",\n            value=\"value\"\n        ),\n\n        # the properties below are optional\n        code_configuration=apprunner.CfnService.CodeConfigurationProperty(\n            configuration_source=\"configurationSource\",\n\n            # the properties below are optional\n            code_configuration_values=apprunner.CfnService.CodeConfigurationValuesProperty(\n                runtime=\"runtime\",\n\n                # the properties below are optional\n                build_command=\"buildCommand\",\n                port=\"port\",\n                runtime_environment_variables=[apprunner.CfnService.KeyValuePairProperty(\n                    name=\"name\",\n                    value=\"value\"\n                )],\n                start_command=\"startCommand\"\n            )\n        )\n    ),\n    image_repository=apprunner.CfnService.ImageRepositoryProperty(\n        image_identifier=\"imageIdentifier\",\n        image_repository_type=\"imageRepositoryType\",\n\n        # the properties below are optional\n        image_configuration=apprunner.CfnService.ImageConfigurationProperty(\n            port=\"port\",\n            runtime_environment_variables=[apprunner.CfnService.KeyValuePairProperty(\n                name=\"name\",\n                value=\"value\"\n            )],\n            start_command=\"startCommand\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nSourceConfigurationProperty sourceConfigurationProperty = new SourceConfigurationProperty {\n    AuthenticationConfiguration = new AuthenticationConfigurationProperty {\n        AccessRoleArn = \"accessRoleArn\",\n        ConnectionArn = \"connectionArn\"\n    },\n    AutoDeploymentsEnabled = false,\n    CodeRepository = new CodeRepositoryProperty {\n        RepositoryUrl = \"repositoryUrl\",\n        SourceCodeVersion = new SourceCodeVersionProperty {\n            Type = \"type\",\n            Value = \"value\"\n        },\n\n        // the properties below are optional\n        CodeConfiguration = new CodeConfigurationProperty {\n            ConfigurationSource = \"configurationSource\",\n\n            // the properties below are optional\n            CodeConfigurationValues = new CodeConfigurationValuesProperty {\n                Runtime = \"runtime\",\n\n                // the properties below are optional\n                BuildCommand = \"buildCommand\",\n                Port = \"port\",\n                RuntimeEnvironmentVariables = new [] { new KeyValuePairProperty {\n                    Name = \"name\",\n                    Value = \"value\"\n                } },\n                StartCommand = \"startCommand\"\n            }\n        }\n    },\n    ImageRepository = new ImageRepositoryProperty {\n        ImageIdentifier = \"imageIdentifier\",\n        ImageRepositoryType = \"imageRepositoryType\",\n\n        // the properties below are optional\n        ImageConfiguration = new ImageConfigurationProperty {\n            Port = \"port\",\n            RuntimeEnvironmentVariables = new [] { new KeyValuePairProperty {\n                Name = \"name\",\n                Value = \"value\"\n            } },\n            StartCommand = \"startCommand\"\n        }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nSourceConfigurationProperty sourceConfigurationProperty = SourceConfigurationProperty.builder()\n        .authenticationConfiguration(AuthenticationConfigurationProperty.builder()\n                .accessRoleArn(\"accessRoleArn\")\n                .connectionArn(\"connectionArn\")\n                .build())\n        .autoDeploymentsEnabled(false)\n        .codeRepository(CodeRepositoryProperty.builder()\n                .repositoryUrl(\"repositoryUrl\")\n                .sourceCodeVersion(SourceCodeVersionProperty.builder()\n                        .type(\"type\")\n                        .value(\"value\")\n                        .build())\n\n                // the properties below are optional\n                .codeConfiguration(CodeConfigurationProperty.builder()\n                        .configurationSource(\"configurationSource\")\n\n                        // the properties below are optional\n                        .codeConfigurationValues(CodeConfigurationValuesProperty.builder()\n                                .runtime(\"runtime\")\n\n                                // the properties below are optional\n                                .buildCommand(\"buildCommand\")\n                                .port(\"port\")\n                                .runtimeEnvironmentVariables(List.of(KeyValuePairProperty.builder()\n                                        .name(\"name\")\n                                        .value(\"value\")\n                                        .build()))\n                                .startCommand(\"startCommand\")\n                                .build())\n                        .build())\n                .build())\n        .imageRepository(ImageRepositoryProperty.builder()\n                .imageIdentifier(\"imageIdentifier\")\n                .imageRepositoryType(\"imageRepositoryType\")\n\n                // the properties below are optional\n                .imageConfiguration(ImageConfigurationProperty.builder()\n                        .port(\"port\")\n                        .runtimeEnvironmentVariables(List.of(KeyValuePairProperty.builder()\n                                .name(\"name\")\n                                .value(\"value\")\n                                .build()))\n                        .startCommand(\"startCommand\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\nsourceConfigurationProperty := &sourceConfigurationProperty{\n\tauthenticationConfiguration: &authenticationConfigurationProperty{\n\t\taccessRoleArn: jsii.String(\"accessRoleArn\"),\n\t\tconnectionArn: jsii.String(\"connectionArn\"),\n\t},\n\tautoDeploymentsEnabled: jsii.Boolean(false),\n\tcodeRepository: &codeRepositoryProperty{\n\t\trepositoryUrl: jsii.String(\"repositoryUrl\"),\n\t\tsourceCodeVersion: &sourceCodeVersionProperty{\n\t\t\ttype: jsii.String(\"type\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\n\t\t// the properties below are optional\n\t\tcodeConfiguration: &codeConfigurationProperty{\n\t\t\tconfigurationSource: jsii.String(\"configurationSource\"),\n\n\t\t\t// the properties below are optional\n\t\t\tcodeConfigurationValues: &codeConfigurationValuesProperty{\n\t\t\t\truntime: jsii.String(\"runtime\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tbuildCommand: jsii.String(\"buildCommand\"),\n\t\t\t\tport: jsii.String(\"port\"),\n\t\t\t\truntimeEnvironmentVariables: []interface{}{\n\t\t\t\t\t&keyValuePairProperty{\n\t\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tstartCommand: jsii.String(\"startCommand\"),\n\t\t\t},\n\t\t},\n\t},\n\timageRepository: &imageRepositoryProperty{\n\t\timageIdentifier: jsii.String(\"imageIdentifier\"),\n\t\timageRepositoryType: jsii.String(\"imageRepositoryType\"),\n\n\t\t// the properties below are optional\n\t\timageConfiguration: &imageConfigurationProperty{\n\t\t\tport: jsii.String(\"port\"),\n\t\t\truntimeEnvironmentVariables: []interface{}{\n\t\t\t\t&keyValuePairProperty{\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tstartCommand: jsii.String(\"startCommand\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst sourceConfigurationProperty: apprunner.CfnService.SourceConfigurationProperty = {\n  authenticationConfiguration: {\n    accessRoleArn: 'accessRoleArn',\n    connectionArn: 'connectionArn',\n  },\n  autoDeploymentsEnabled: false,\n  codeRepository: {\n    repositoryUrl: 'repositoryUrl',\n    sourceCodeVersion: {\n      type: 'type',\n      value: 'value',\n    },\n\n    // the properties below are optional\n    codeConfiguration: {\n      configurationSource: 'configurationSource',\n\n      // the properties below are optional\n      codeConfigurationValues: {\n        runtime: 'runtime',\n\n        // the properties below are optional\n        buildCommand: 'buildCommand',\n        port: 'port',\n        runtimeEnvironmentVariables: [{\n          name: 'name',\n          value: 'value',\n        }],\n        startCommand: 'startCommand',\n      },\n    },\n  },\n  imageRepository: {\n    imageIdentifier: 'imageIdentifier',\n    imageRepositoryType: 'imageRepositoryType',\n\n    // the properties below are optional\n    imageConfiguration: {\n      port: 'port',\n      runtimeEnvironmentVariables: [{\n        name: 'name',\n        value: 'value',\n      }],\n      startCommand: 'startCommand',\n    },\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnService.SourceConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnService.SourceConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sourceConfigurationProperty: apprunner.CfnService.SourceConfigurationProperty = {\n  authenticationConfiguration: {\n    accessRoleArn: 'accessRoleArn',\n    connectionArn: 'connectionArn',\n  },\n  autoDeploymentsEnabled: false,\n  codeRepository: {\n    repositoryUrl: 'repositoryUrl',\n    sourceCodeVersion: {\n      type: 'type',\n      value: 'value',\n    },\n\n    // the properties below are optional\n    codeConfiguration: {\n      configurationSource: 'configurationSource',\n\n      // the properties below are optional\n      codeConfigurationValues: {\n        runtime: 'runtime',\n\n        // the properties below are optional\n        buildCommand: 'buildCommand',\n        port: 'port',\n        runtimeEnvironmentVariables: [{\n          name: 'name',\n          value: 'value',\n        }],\n        startCommand: 'startCommand',\n      },\n    },\n  },\n  imageRepository: {\n    imageIdentifier: 'imageIdentifier',\n    imageRepositoryType: 'imageRepositoryType',\n\n    // the properties below are optional\n    imageConfiguration: {\n      port: 'port',\n      runtimeEnvironmentVariables: [{\n        name: 'name',\n        value: 'value',\n      }],\n      startCommand: 'startCommand',\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 19,
        "75": 33,
        "91": 1,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 10,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 28,
        "290": 1
      },
      "fqnsFingerprint": "926af824423507d124a2c6106a9be0eaa6c357e8bf4e8074cf6c7894dafee380"
    },
    "ba729bcd9e6873701a43d5e89cb4a0b345cf2a98b5369057868df6230d431b7e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\ncfn_service_props = apprunner.CfnServiceProps(\n    source_configuration=apprunner.CfnService.SourceConfigurationProperty(\n        authentication_configuration=apprunner.CfnService.AuthenticationConfigurationProperty(\n            access_role_arn=\"accessRoleArn\",\n            connection_arn=\"connectionArn\"\n        ),\n        auto_deployments_enabled=False,\n        code_repository=apprunner.CfnService.CodeRepositoryProperty(\n            repository_url=\"repositoryUrl\",\n            source_code_version=apprunner.CfnService.SourceCodeVersionProperty(\n                type=\"type\",\n                value=\"value\"\n            ),\n\n            # the properties below are optional\n            code_configuration=apprunner.CfnService.CodeConfigurationProperty(\n                configuration_source=\"configurationSource\",\n\n                # the properties below are optional\n                code_configuration_values=apprunner.CfnService.CodeConfigurationValuesProperty(\n                    runtime=\"runtime\",\n\n                    # the properties below are optional\n                    build_command=\"buildCommand\",\n                    port=\"port\",\n                    runtime_environment_variables=[apprunner.CfnService.KeyValuePairProperty(\n                        name=\"name\",\n                        value=\"value\"\n                    )],\n                    start_command=\"startCommand\"\n                )\n            )\n        ),\n        image_repository=apprunner.CfnService.ImageRepositoryProperty(\n            image_identifier=\"imageIdentifier\",\n            image_repository_type=\"imageRepositoryType\",\n\n            # the properties below are optional\n            image_configuration=apprunner.CfnService.ImageConfigurationProperty(\n                port=\"port\",\n                runtime_environment_variables=[apprunner.CfnService.KeyValuePairProperty(\n                    name=\"name\",\n                    value=\"value\"\n                )],\n                start_command=\"startCommand\"\n            )\n        )\n    ),\n\n    # the properties below are optional\n    auto_scaling_configuration_arn=\"autoScalingConfigurationArn\",\n    encryption_configuration=apprunner.CfnService.EncryptionConfigurationProperty(\n        kms_key=\"kmsKey\"\n    ),\n    health_check_configuration=apprunner.CfnService.HealthCheckConfigurationProperty(\n        healthy_threshold=123,\n        interval=123,\n        path=\"path\",\n        protocol=\"protocol\",\n        timeout=123,\n        unhealthy_threshold=123\n    ),\n    instance_configuration=apprunner.CfnService.InstanceConfigurationProperty(\n        cpu=\"cpu\",\n        instance_role_arn=\"instanceRoleArn\",\n        memory=\"memory\"\n    ),\n    network_configuration=apprunner.CfnService.NetworkConfigurationProperty(\n        egress_configuration=apprunner.CfnService.EgressConfigurationProperty(\n            egress_type=\"egressType\",\n\n            # the properties below are optional\n            vpc_connector_arn=\"vpcConnectorArn\"\n        )\n    ),\n    observability_configuration=apprunner.CfnService.ServiceObservabilityConfigurationProperty(\n        observability_enabled=False,\n\n        # the properties below are optional\n        observability_configuration_arn=\"observabilityConfigurationArn\"\n    ),\n    service_name=\"serviceName\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nCfnServiceProps cfnServiceProps = new CfnServiceProps {\n    SourceConfiguration = new SourceConfigurationProperty {\n        AuthenticationConfiguration = new AuthenticationConfigurationProperty {\n            AccessRoleArn = \"accessRoleArn\",\n            ConnectionArn = \"connectionArn\"\n        },\n        AutoDeploymentsEnabled = false,\n        CodeRepository = new CodeRepositoryProperty {\n            RepositoryUrl = \"repositoryUrl\",\n            SourceCodeVersion = new SourceCodeVersionProperty {\n                Type = \"type\",\n                Value = \"value\"\n            },\n\n            // the properties below are optional\n            CodeConfiguration = new CodeConfigurationProperty {\n                ConfigurationSource = \"configurationSource\",\n\n                // the properties below are optional\n                CodeConfigurationValues = new CodeConfigurationValuesProperty {\n                    Runtime = \"runtime\",\n\n                    // the properties below are optional\n                    BuildCommand = \"buildCommand\",\n                    Port = \"port\",\n                    RuntimeEnvironmentVariables = new [] { new KeyValuePairProperty {\n                        Name = \"name\",\n                        Value = \"value\"\n                    } },\n                    StartCommand = \"startCommand\"\n                }\n            }\n        },\n        ImageRepository = new ImageRepositoryProperty {\n            ImageIdentifier = \"imageIdentifier\",\n            ImageRepositoryType = \"imageRepositoryType\",\n\n            // the properties below are optional\n            ImageConfiguration = new ImageConfigurationProperty {\n                Port = \"port\",\n                RuntimeEnvironmentVariables = new [] { new KeyValuePairProperty {\n                    Name = \"name\",\n                    Value = \"value\"\n                } },\n                StartCommand = \"startCommand\"\n            }\n        }\n    },\n\n    // the properties below are optional\n    AutoScalingConfigurationArn = \"autoScalingConfigurationArn\",\n    EncryptionConfiguration = new EncryptionConfigurationProperty {\n        KmsKey = \"kmsKey\"\n    },\n    HealthCheckConfiguration = new HealthCheckConfigurationProperty {\n        HealthyThreshold = 123,\n        Interval = 123,\n        Path = \"path\",\n        Protocol = \"protocol\",\n        Timeout = 123,\n        UnhealthyThreshold = 123\n    },\n    InstanceConfiguration = new InstanceConfigurationProperty {\n        Cpu = \"cpu\",\n        InstanceRoleArn = \"instanceRoleArn\",\n        Memory = \"memory\"\n    },\n    NetworkConfiguration = new NetworkConfigurationProperty {\n        EgressConfiguration = new EgressConfigurationProperty {\n            EgressType = \"egressType\",\n\n            // the properties below are optional\n            VpcConnectorArn = \"vpcConnectorArn\"\n        }\n    },\n    ObservabilityConfiguration = new ServiceObservabilityConfigurationProperty {\n        ObservabilityEnabled = false,\n\n        // the properties below are optional\n        ObservabilityConfigurationArn = \"observabilityConfigurationArn\"\n    },\n    ServiceName = \"serviceName\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nCfnServiceProps cfnServiceProps = CfnServiceProps.builder()\n        .sourceConfiguration(SourceConfigurationProperty.builder()\n                .authenticationConfiguration(AuthenticationConfigurationProperty.builder()\n                        .accessRoleArn(\"accessRoleArn\")\n                        .connectionArn(\"connectionArn\")\n                        .build())\n                .autoDeploymentsEnabled(false)\n                .codeRepository(CodeRepositoryProperty.builder()\n                        .repositoryUrl(\"repositoryUrl\")\n                        .sourceCodeVersion(SourceCodeVersionProperty.builder()\n                                .type(\"type\")\n                                .value(\"value\")\n                                .build())\n\n                        // the properties below are optional\n                        .codeConfiguration(CodeConfigurationProperty.builder()\n                                .configurationSource(\"configurationSource\")\n\n                                // the properties below are optional\n                                .codeConfigurationValues(CodeConfigurationValuesProperty.builder()\n                                        .runtime(\"runtime\")\n\n                                        // the properties below are optional\n                                        .buildCommand(\"buildCommand\")\n                                        .port(\"port\")\n                                        .runtimeEnvironmentVariables(List.of(KeyValuePairProperty.builder()\n                                                .name(\"name\")\n                                                .value(\"value\")\n                                                .build()))\n                                        .startCommand(\"startCommand\")\n                                        .build())\n                                .build())\n                        .build())\n                .imageRepository(ImageRepositoryProperty.builder()\n                        .imageIdentifier(\"imageIdentifier\")\n                        .imageRepositoryType(\"imageRepositoryType\")\n\n                        // the properties below are optional\n                        .imageConfiguration(ImageConfigurationProperty.builder()\n                                .port(\"port\")\n                                .runtimeEnvironmentVariables(List.of(KeyValuePairProperty.builder()\n                                        .name(\"name\")\n                                        .value(\"value\")\n                                        .build()))\n                                .startCommand(\"startCommand\")\n                                .build())\n                        .build())\n                .build())\n\n        // the properties below are optional\n        .autoScalingConfigurationArn(\"autoScalingConfigurationArn\")\n        .encryptionConfiguration(EncryptionConfigurationProperty.builder()\n                .kmsKey(\"kmsKey\")\n                .build())\n        .healthCheckConfiguration(HealthCheckConfigurationProperty.builder()\n                .healthyThreshold(123)\n                .interval(123)\n                .path(\"path\")\n                .protocol(\"protocol\")\n                .timeout(123)\n                .unhealthyThreshold(123)\n                .build())\n        .instanceConfiguration(InstanceConfigurationProperty.builder()\n                .cpu(\"cpu\")\n                .instanceRoleArn(\"instanceRoleArn\")\n                .memory(\"memory\")\n                .build())\n        .networkConfiguration(NetworkConfigurationProperty.builder()\n                .egressConfiguration(EgressConfigurationProperty.builder()\n                        .egressType(\"egressType\")\n\n                        // the properties below are optional\n                        .vpcConnectorArn(\"vpcConnectorArn\")\n                        .build())\n                .build())\n        .observabilityConfiguration(ServiceObservabilityConfigurationProperty.builder()\n                .observabilityEnabled(false)\n\n                // the properties below are optional\n                .observabilityConfigurationArn(\"observabilityConfigurationArn\")\n                .build())\n        .serviceName(\"serviceName\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\ncfnServiceProps := &cfnServiceProps{\n\tsourceConfiguration: &sourceConfigurationProperty{\n\t\tauthenticationConfiguration: &authenticationConfigurationProperty{\n\t\t\taccessRoleArn: jsii.String(\"accessRoleArn\"),\n\t\t\tconnectionArn: jsii.String(\"connectionArn\"),\n\t\t},\n\t\tautoDeploymentsEnabled: jsii.Boolean(false),\n\t\tcodeRepository: &codeRepositoryProperty{\n\t\t\trepositoryUrl: jsii.String(\"repositoryUrl\"),\n\t\t\tsourceCodeVersion: &sourceCodeVersionProperty{\n\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t},\n\n\t\t\t// the properties below are optional\n\t\t\tcodeConfiguration: &codeConfigurationProperty{\n\t\t\t\tconfigurationSource: jsii.String(\"configurationSource\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tcodeConfigurationValues: &codeConfigurationValuesProperty{\n\t\t\t\t\truntime: jsii.String(\"runtime\"),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tbuildCommand: jsii.String(\"buildCommand\"),\n\t\t\t\t\tport: jsii.String(\"port\"),\n\t\t\t\t\truntimeEnvironmentVariables: []interface{}{\n\t\t\t\t\t\t&keyValuePairProperty{\n\t\t\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tstartCommand: jsii.String(\"startCommand\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\timageRepository: &imageRepositoryProperty{\n\t\t\timageIdentifier: jsii.String(\"imageIdentifier\"),\n\t\t\timageRepositoryType: jsii.String(\"imageRepositoryType\"),\n\n\t\t\t// the properties below are optional\n\t\t\timageConfiguration: &imageConfigurationProperty{\n\t\t\t\tport: jsii.String(\"port\"),\n\t\t\t\truntimeEnvironmentVariables: []interface{}{\n\t\t\t\t\t&keyValuePairProperty{\n\t\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tstartCommand: jsii.String(\"startCommand\"),\n\t\t\t},\n\t\t},\n\t},\n\n\t// the properties below are optional\n\tautoScalingConfigurationArn: jsii.String(\"autoScalingConfigurationArn\"),\n\tencryptionConfiguration: &encryptionConfigurationProperty{\n\t\tkmsKey: jsii.String(\"kmsKey\"),\n\t},\n\thealthCheckConfiguration: &healthCheckConfigurationProperty{\n\t\thealthyThreshold: jsii.Number(123),\n\t\tinterval: jsii.Number(123),\n\t\tpath: jsii.String(\"path\"),\n\t\tprotocol: jsii.String(\"protocol\"),\n\t\ttimeout: jsii.Number(123),\n\t\tunhealthyThreshold: jsii.Number(123),\n\t},\n\tinstanceConfiguration: &instanceConfigurationProperty{\n\t\tcpu: jsii.String(\"cpu\"),\n\t\tinstanceRoleArn: jsii.String(\"instanceRoleArn\"),\n\t\tmemory: jsii.String(\"memory\"),\n\t},\n\tnetworkConfiguration: &networkConfigurationProperty{\n\t\tegressConfiguration: &egressConfigurationProperty{\n\t\t\tegressType: jsii.String(\"egressType\"),\n\n\t\t\t// the properties below are optional\n\t\t\tvpcConnectorArn: jsii.String(\"vpcConnectorArn\"),\n\t\t},\n\t},\n\tobservabilityConfiguration: &serviceObservabilityConfigurationProperty{\n\t\tobservabilityEnabled: jsii.Boolean(false),\n\n\t\t// the properties below are optional\n\t\tobservabilityConfigurationArn: jsii.String(\"observabilityConfigurationArn\"),\n\t},\n\tserviceName: jsii.String(\"serviceName\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst cfnServiceProps: apprunner.CfnServiceProps = {\n  sourceConfiguration: {\n    authenticationConfiguration: {\n      accessRoleArn: 'accessRoleArn',\n      connectionArn: 'connectionArn',\n    },\n    autoDeploymentsEnabled: false,\n    codeRepository: {\n      repositoryUrl: 'repositoryUrl',\n      sourceCodeVersion: {\n        type: 'type',\n        value: 'value',\n      },\n\n      // the properties below are optional\n      codeConfiguration: {\n        configurationSource: 'configurationSource',\n\n        // the properties below are optional\n        codeConfigurationValues: {\n          runtime: 'runtime',\n\n          // the properties below are optional\n          buildCommand: 'buildCommand',\n          port: 'port',\n          runtimeEnvironmentVariables: [{\n            name: 'name',\n            value: 'value',\n          }],\n          startCommand: 'startCommand',\n        },\n      },\n    },\n    imageRepository: {\n      imageIdentifier: 'imageIdentifier',\n      imageRepositoryType: 'imageRepositoryType',\n\n      // the properties below are optional\n      imageConfiguration: {\n        port: 'port',\n        runtimeEnvironmentVariables: [{\n          name: 'name',\n          value: 'value',\n        }],\n        startCommand: 'startCommand',\n      },\n    },\n  },\n\n  // the properties below are optional\n  autoScalingConfigurationArn: 'autoScalingConfigurationArn',\n  encryptionConfiguration: {\n    kmsKey: 'kmsKey',\n  },\n  healthCheckConfiguration: {\n    healthyThreshold: 123,\n    interval: 123,\n    path: 'path',\n    protocol: 'protocol',\n    timeout: 123,\n    unhealthyThreshold: 123,\n  },\n  instanceConfiguration: {\n    cpu: 'cpu',\n    instanceRoleArn: 'instanceRoleArn',\n    memory: 'memory',\n  },\n  networkConfiguration: {\n    egressConfiguration: {\n      egressType: 'egressType',\n\n      // the properties below are optional\n      vpcConnectorArn: 'vpcConnectorArn',\n    },\n  },\n  observabilityConfiguration: {\n    observabilityEnabled: false,\n\n    // the properties below are optional\n    observabilityConfigurationArn: 'observabilityConfigurationArn',\n  },\n  serviceName: 'serviceName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnServiceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnServiceProps: apprunner.CfnServiceProps = {\n  sourceConfiguration: {\n    authenticationConfiguration: {\n      accessRoleArn: 'accessRoleArn',\n      connectionArn: 'connectionArn',\n    },\n    autoDeploymentsEnabled: false,\n    codeRepository: {\n      repositoryUrl: 'repositoryUrl',\n      sourceCodeVersion: {\n        type: 'type',\n        value: 'value',\n      },\n\n      // the properties below are optional\n      codeConfiguration: {\n        configurationSource: 'configurationSource',\n\n        // the properties below are optional\n        codeConfigurationValues: {\n          runtime: 'runtime',\n\n          // the properties below are optional\n          buildCommand: 'buildCommand',\n          port: 'port',\n          runtimeEnvironmentVariables: [{\n            name: 'name',\n            value: 'value',\n          }],\n          startCommand: 'startCommand',\n        },\n      },\n    },\n    imageRepository: {\n      imageIdentifier: 'imageIdentifier',\n      imageRepositoryType: 'imageRepositoryType',\n\n      // the properties below are optional\n      imageConfiguration: {\n        port: 'port',\n        runtimeEnvironmentVariables: [{\n          name: 'name',\n          value: 'value',\n        }],\n        startCommand: 'startCommand',\n      },\n    },\n  },\n\n  // the properties below are optional\n  autoScalingConfigurationArn: 'autoScalingConfigurationArn',\n  encryptionConfiguration: {\n    kmsKey: 'kmsKey',\n  },\n  healthCheckConfiguration: {\n    healthyThreshold: 123,\n    interval: 123,\n    path: 'path',\n    protocol: 'protocol',\n    timeout: 123,\n    unhealthyThreshold: 123,\n  },\n  instanceConfiguration: {\n    cpu: 'cpu',\n    instanceRoleArn: 'instanceRoleArn',\n    memory: 'memory',\n  },\n  networkConfiguration: {\n    egressConfiguration: {\n      egressType: 'egressType',\n\n      // the properties below are optional\n      vpcConnectorArn: 'vpcConnectorArn',\n    },\n  },\n  observabilityConfiguration: {\n    observabilityEnabled: false,\n\n    // the properties below are optional\n    observabilityConfigurationArn: 'observabilityConfigurationArn',\n  },\n  serviceName: 'serviceName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 32,
        "75": 58,
        "91": 2,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 18,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 54,
        "290": 1
      },
      "fqnsFingerprint": "28a2e675a22cdde16a2e66d239356cfc699b6ed5f50bab13cc97a92bc398aa0d"
    },
    "5cdd30e838b340ff8c81d3620cbc10972631a0e25c471a5f720c0f75f47b37cf": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\ncfn_vpc_connector = apprunner.CfnVpcConnector(self, \"MyCfnVpcConnector\",\n    subnets=[\"subnets\"],\n\n    # the properties below are optional\n    security_groups=[\"securityGroups\"],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    vpc_connector_name=\"vpcConnectorName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nCfnVpcConnector cfnVpcConnector = new CfnVpcConnector(this, \"MyCfnVpcConnector\", new CfnVpcConnectorProps {\n    Subnets = new [] { \"subnets\" },\n\n    // the properties below are optional\n    SecurityGroups = new [] { \"securityGroups\" },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    VpcConnectorName = \"vpcConnectorName\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nCfnVpcConnector cfnVpcConnector = CfnVpcConnector.Builder.create(this, \"MyCfnVpcConnector\")\n        .subnets(List.of(\"subnets\"))\n\n        // the properties below are optional\n        .securityGroups(List.of(\"securityGroups\"))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .vpcConnectorName(\"vpcConnectorName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\ncfnVpcConnector := apprunner.NewCfnVpcConnector(this, jsii.String(\"MyCfnVpcConnector\"), &cfnVpcConnectorProps{\n\tsubnets: []*string{\n\t\tjsii.String(\"subnets\"),\n\t},\n\n\t// the properties below are optional\n\tsecurityGroups: []*string{\n\t\tjsii.String(\"securityGroups\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tvpcConnectorName: jsii.String(\"vpcConnectorName\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst cfnVpcConnector = new apprunner.CfnVpcConnector(this, 'MyCfnVpcConnector', {\n  subnets: ['subnets'],\n\n  // the properties below are optional\n  securityGroups: ['securityGroups'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcConnectorName: 'vpcConnectorName',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnVpcConnector"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnVpcConnector",
        "@aws-cdk/aws-apprunner.CfnVpcConnectorProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVpcConnector = new apprunner.CfnVpcConnector(this, 'MyCfnVpcConnector', {\n  subnets: ['subnets'],\n\n  // the properties below are optional\n  securityGroups: ['securityGroups'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcConnectorName: 'vpcConnectorName',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 10,
        "104": 1,
        "192": 3,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "a624362f210a9e4edb57bca92a522a04668272d0edcd7c585dfb04ae2bda2a01"
    },
    "9090c4d4b4a9c30c8421fd3cc83402d92fef298c7a4b16de330ac14cd87e1b17": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\ncfn_vpc_connector_props = apprunner.CfnVpcConnectorProps(\n    subnets=[\"subnets\"],\n\n    # the properties below are optional\n    security_groups=[\"securityGroups\"],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    vpc_connector_name=\"vpcConnectorName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nCfnVpcConnectorProps cfnVpcConnectorProps = new CfnVpcConnectorProps {\n    Subnets = new [] { \"subnets\" },\n\n    // the properties below are optional\n    SecurityGroups = new [] { \"securityGroups\" },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    VpcConnectorName = \"vpcConnectorName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nCfnVpcConnectorProps cfnVpcConnectorProps = CfnVpcConnectorProps.builder()\n        .subnets(List.of(\"subnets\"))\n\n        // the properties below are optional\n        .securityGroups(List.of(\"securityGroups\"))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .vpcConnectorName(\"vpcConnectorName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\ncfnVpcConnectorProps := &cfnVpcConnectorProps{\n\tsubnets: []*string{\n\t\tjsii.String(\"subnets\"),\n\t},\n\n\t// the properties below are optional\n\tsecurityGroups: []*string{\n\t\tjsii.String(\"securityGroups\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tvpcConnectorName: jsii.String(\"vpcConnectorName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst cfnVpcConnectorProps: apprunner.CfnVpcConnectorProps = {\n  subnets: ['subnets'],\n\n  // the properties below are optional\n  securityGroups: ['securityGroups'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcConnectorName: 'vpcConnectorName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CfnVpcConnectorProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CfnVpcConnectorProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVpcConnectorProps: apprunner.CfnVpcConnectorProps = {\n  subnets: ['subnets'],\n\n  // the properties below are optional\n  securityGroups: ['securityGroups'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcConnectorName: 'vpcConnectorName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "7845d110ddcb93e87d712dd239e80b13618b7b5d0a50d45fffd18c736ff8dc8e"
    },
    "5887899331c6879bd3a54b2c7a253632f43f4c5a8ca059b797011d9f2ab755f9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\n# runtime: apprunner.Runtime\n\ncode_configuration = apprunner.CodeConfiguration(\n    configuration_source=apprunner.ConfigurationSourceType.REPOSITORY,\n\n    # the properties below are optional\n    configuration_values=apprunner.CodeConfigurationValues(\n        runtime=runtime,\n\n        # the properties below are optional\n        build_command=\"buildCommand\",\n        environment={\n            \"environment_key\": \"environment\"\n        },\n        port=\"port\",\n        start_command=\"startCommand\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nRuntime runtime;\n\nCodeConfiguration codeConfiguration = new CodeConfiguration {\n    ConfigurationSource = ConfigurationSourceType.REPOSITORY,\n\n    // the properties below are optional\n    ConfigurationValues = new CodeConfigurationValues {\n        Runtime = runtime,\n\n        // the properties below are optional\n        BuildCommand = \"buildCommand\",\n        Environment = new Dictionary<string, string> {\n            { \"environmentKey\", \"environment\" }\n        },\n        Port = \"port\",\n        StartCommand = \"startCommand\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nRuntime runtime;\n\nCodeConfiguration codeConfiguration = CodeConfiguration.builder()\n        .configurationSource(ConfigurationSourceType.REPOSITORY)\n\n        // the properties below are optional\n        .configurationValues(CodeConfigurationValues.builder()\n                .runtime(runtime)\n\n                // the properties below are optional\n                .buildCommand(\"buildCommand\")\n                .environment(Map.of(\n                        \"environmentKey\", \"environment\"))\n                .port(\"port\")\n                .startCommand(\"startCommand\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\nvar runtime runtime\n\ncodeConfiguration := &codeConfiguration{\n\tconfigurationSource: apprunner.configurationSourceType_REPOSITORY,\n\n\t// the properties below are optional\n\tconfigurationValues: &codeConfigurationValues{\n\t\truntime: runtime,\n\n\t\t// the properties below are optional\n\t\tbuildCommand: jsii.String(\"buildCommand\"),\n\t\tenvironment: map[string]*string{\n\t\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t\t},\n\t\tport: jsii.String(\"port\"),\n\t\tstartCommand: jsii.String(\"startCommand\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n\ndeclare const runtime: apprunner.Runtime;\nconst codeConfiguration: apprunner.CodeConfiguration = {\n  configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n\n  // the properties below are optional\n  configurationValues: {\n    runtime: runtime,\n\n    // the properties below are optional\n    buildCommand: 'buildCommand',\n    environment: {\n      environmentKey: 'environment',\n    },\n    port: 'port',\n    startCommand: 'startCommand',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CodeConfiguration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CodeConfiguration",
        "@aws-cdk/aws-apprunner.CodeConfigurationValues",
        "@aws-cdk/aws-apprunner.ConfigurationSourceType",
        "@aws-cdk/aws-apprunner.ConfigurationSourceType#REPOSITORY",
        "@aws-cdk/aws-apprunner.Runtime"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n\ndeclare const runtime: apprunner.Runtime;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst codeConfiguration: apprunner.CodeConfiguration = {\n  configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n\n  // the properties below are optional\n  configurationValues: {\n    runtime: runtime,\n\n    // the properties below are optional\n    buildCommand: 'buildCommand',\n    environment: {\n      environmentKey: 'environment',\n    },\n    port: 'port',\n    startCommand: 'startCommand',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "3fe9a4fb68c989e0510727976d3068ad8135b63d6114e72a80d5a543806a9b99"
    },
    "d37eb4a2dea1f39fe243df8c2dde0cb1ee3b65adb97e49c3564d94a129af15c2": {
      "translations": {
        "python": {
          "source": "apprunner.Service(self, \"Service\",\n    source=apprunner.Source.from_git_hub(\n        repository_url=\"https://github.com/aws-containers/hello-app-runner\",\n        branch=\"main\",\n        configuration_source=apprunner.ConfigurationSourceType.API,\n        code_configuration_values=apprunner.CodeConfigurationValues(\n            runtime=apprunner.Runtime.PYTHON_3,\n            port=\"8000\",\n            start_command=\"python app.py\",\n            build_command=\"yum install -y pycairo && pip install -r requirements.txt\"\n        ),\n        connection=apprunner.GitHubConnection.from_connection_arn(\"CONNECTION_ARN\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Service(this, \"Service\", new ServiceProps {\n    Source = Source.FromGitHub(new GithubRepositoryProps {\n        RepositoryUrl = \"https://github.com/aws-containers/hello-app-runner\",\n        Branch = \"main\",\n        ConfigurationSource = ConfigurationSourceType.API,\n        CodeConfigurationValues = new CodeConfigurationValues {\n            Runtime = Runtime.PYTHON_3,\n            Port = \"8000\",\n            StartCommand = \"python app.py\",\n            BuildCommand = \"yum install -y pycairo && pip install -r requirements.txt\"\n        },\n        Connection = GitHubConnection.FromConnectionArn(\"CONNECTION_ARN\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Service.Builder.create(this, \"Service\")\n        .source(Source.fromGitHub(GithubRepositoryProps.builder()\n                .repositoryUrl(\"https://github.com/aws-containers/hello-app-runner\")\n                .branch(\"main\")\n                .configurationSource(ConfigurationSourceType.API)\n                .codeConfigurationValues(CodeConfigurationValues.builder()\n                        .runtime(Runtime.PYTHON_3)\n                        .port(\"8000\")\n                        .startCommand(\"python app.py\")\n                        .buildCommand(\"yum install -y pycairo && pip install -r requirements.txt\")\n                        .build())\n                .connection(GitHubConnection.fromConnectionArn(\"CONNECTION_ARN\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "apprunner.NewService(this, jsii.String(\"Service\"), &serviceProps{\n\tsource: apprunner.source.fromGitHub(&githubRepositoryProps{\n\t\trepositoryUrl: jsii.String(\"https://github.com/aws-containers/hello-app-runner\"),\n\t\tbranch: jsii.String(\"main\"),\n\t\tconfigurationSource: apprunner.configurationSourceType_API,\n\t\tcodeConfigurationValues: &codeConfigurationValues{\n\t\t\truntime: apprunner.runtime_PYTHON_3(),\n\t\t\tport: jsii.String(\"8000\"),\n\t\t\tstartCommand: jsii.String(\"python app.py\"),\n\t\t\tbuildCommand: jsii.String(\"yum install -y pycairo && pip install -r requirements.txt\"),\n\t\t},\n\t\tconnection: apprunner.gitHubConnection.fromConnectionArn(jsii.String(\"CONNECTION_ARN\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.API,\n    codeConfigurationValues: {\n      runtime: apprunner.Runtime.PYTHON_3,\n      port: '8000',\n      startCommand: 'python app.py',\n      buildCommand: 'yum install -y pycairo && pip install -r requirements.txt',\n    },\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CodeConfigurationValues"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CodeConfigurationValues",
        "@aws-cdk/aws-apprunner.ConfigurationSourceType",
        "@aws-cdk/aws-apprunner.ConfigurationSourceType#API",
        "@aws-cdk/aws-apprunner.GitHubConnection",
        "@aws-cdk/aws-apprunner.GitHubConnection#fromConnectionArn",
        "@aws-cdk/aws-apprunner.GithubRepositoryProps",
        "@aws-cdk/aws-apprunner.Runtime",
        "@aws-cdk/aws-apprunner.Runtime#PYTHON_3",
        "@aws-cdk/aws-apprunner.Service",
        "@aws-cdk/aws-apprunner.ServiceProps",
        "@aws-cdk/aws-apprunner.Source",
        "@aws-cdk/aws-apprunner.Source#fromGitHub",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.API,\n    codeConfigurationValues: {\n      runtime: apprunner.Runtime.PYTHON_3,\n      port: '8000',\n      startCommand: 'python app.py',\n      buildCommand: 'yum install -y pycairo && pip install -r requirements.txt',\n    },\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 7,
        "75": 24,
        "104": 1,
        "193": 3,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 10
      },
      "fqnsFingerprint": "4837f3e8a6f1ccf010b119aa73088a03369df1c6000519bfd1a2fac4c3cfd94f"
    },
    "5015c3f11128a1ba3d4f7cefb7e2b3dd323af82ccc9001f7220a6dccc93ad38c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\n# git_hub_connection: apprunner.GitHubConnection\n# runtime: apprunner.Runtime\n\ncode_repository_props = apprunner.CodeRepositoryProps(\n    code_configuration=apprunner.CodeConfiguration(\n        configuration_source=apprunner.ConfigurationSourceType.REPOSITORY,\n\n        # the properties below are optional\n        configuration_values=apprunner.CodeConfigurationValues(\n            runtime=runtime,\n\n            # the properties below are optional\n            build_command=\"buildCommand\",\n            environment={\n                \"environment_key\": \"environment\"\n            },\n            port=\"port\",\n            start_command=\"startCommand\"\n        )\n    ),\n    connection=git_hub_connection,\n    repository_url=\"repositoryUrl\",\n    source_code_version=apprunner.SourceCodeVersion(\n        type=\"type\",\n        value=\"value\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nGitHubConnection gitHubConnection;\nRuntime runtime;\n\nCodeRepositoryProps codeRepositoryProps = new CodeRepositoryProps {\n    CodeConfiguration = new CodeConfiguration {\n        ConfigurationSource = ConfigurationSourceType.REPOSITORY,\n\n        // the properties below are optional\n        ConfigurationValues = new CodeConfigurationValues {\n            Runtime = runtime,\n\n            // the properties below are optional\n            BuildCommand = \"buildCommand\",\n            Environment = new Dictionary<string, string> {\n                { \"environmentKey\", \"environment\" }\n            },\n            Port = \"port\",\n            StartCommand = \"startCommand\"\n        }\n    },\n    Connection = gitHubConnection,\n    RepositoryUrl = \"repositoryUrl\",\n    SourceCodeVersion = new SourceCodeVersion {\n        Type = \"type\",\n        Value = \"value\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nGitHubConnection gitHubConnection;\nRuntime runtime;\n\nCodeRepositoryProps codeRepositoryProps = CodeRepositoryProps.builder()\n        .codeConfiguration(CodeConfiguration.builder()\n                .configurationSource(ConfigurationSourceType.REPOSITORY)\n\n                // the properties below are optional\n                .configurationValues(CodeConfigurationValues.builder()\n                        .runtime(runtime)\n\n                        // the properties below are optional\n                        .buildCommand(\"buildCommand\")\n                        .environment(Map.of(\n                                \"environmentKey\", \"environment\"))\n                        .port(\"port\")\n                        .startCommand(\"startCommand\")\n                        .build())\n                .build())\n        .connection(gitHubConnection)\n        .repositoryUrl(\"repositoryUrl\")\n        .sourceCodeVersion(SourceCodeVersion.builder()\n                .type(\"type\")\n                .value(\"value\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\nvar gitHubConnection gitHubConnection\nvar runtime runtime\n\ncodeRepositoryProps := &codeRepositoryProps{\n\tcodeConfiguration: &codeConfiguration{\n\t\tconfigurationSource: apprunner.configurationSourceType_REPOSITORY,\n\n\t\t// the properties below are optional\n\t\tconfigurationValues: &codeConfigurationValues{\n\t\t\truntime: runtime,\n\n\t\t\t// the properties below are optional\n\t\t\tbuildCommand: jsii.String(\"buildCommand\"),\n\t\t\tenvironment: map[string]*string{\n\t\t\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t\t\t},\n\t\t\tport: jsii.String(\"port\"),\n\t\t\tstartCommand: jsii.String(\"startCommand\"),\n\t\t},\n\t},\n\tconnection: gitHubConnection,\n\trepositoryUrl: jsii.String(\"repositoryUrl\"),\n\tsourceCodeVersion: &sourceCodeVersion{\n\t\ttype: jsii.String(\"type\"),\n\t\tvalue: jsii.String(\"value\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n\ndeclare const gitHubConnection: apprunner.GitHubConnection;\ndeclare const runtime: apprunner.Runtime;\nconst codeRepositoryProps: apprunner.CodeRepositoryProps = {\n  codeConfiguration: {\n    configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n\n    // the properties below are optional\n    configurationValues: {\n      runtime: runtime,\n\n      // the properties below are optional\n      buildCommand: 'buildCommand',\n      environment: {\n        environmentKey: 'environment',\n      },\n      port: 'port',\n      startCommand: 'startCommand',\n    },\n  },\n  connection: gitHubConnection,\n  repositoryUrl: 'repositoryUrl',\n  sourceCodeVersion: {\n    type: 'type',\n    value: 'value',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.CodeRepositoryProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CodeConfiguration",
        "@aws-cdk/aws-apprunner.CodeConfigurationValues",
        "@aws-cdk/aws-apprunner.CodeRepositoryProps",
        "@aws-cdk/aws-apprunner.ConfigurationSourceType",
        "@aws-cdk/aws-apprunner.ConfigurationSourceType#REPOSITORY",
        "@aws-cdk/aws-apprunner.GitHubConnection",
        "@aws-cdk/aws-apprunner.Runtime",
        "@aws-cdk/aws-apprunner.SourceCodeVersion"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n\ndeclare const gitHubConnection: apprunner.GitHubConnection;\ndeclare const runtime: apprunner.Runtime;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst codeRepositoryProps: apprunner.CodeRepositoryProps = {\n  codeConfiguration: {\n    configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n\n    // the properties below are optional\n    configurationValues: {\n      runtime: runtime,\n\n      // the properties below are optional\n      buildCommand: 'buildCommand',\n      environment: {\n        environmentKey: 'environment',\n      },\n      port: 'port',\n      startCommand: 'startCommand',\n    },\n  },\n  connection: gitHubConnection,\n  repositoryUrl: 'repositoryUrl',\n  sourceCodeVersion: {\n    type: 'type',\n    value: 'value',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 29,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 5,
        "194": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "5f76b4ab72c497bfd957fbdc8e8f1d2d9a963d733f4febb6a8aa4dfadde2287d"
    },
    "a49a0c2590c63e4010fb73e000f7f59f5cabb28974019fff5393b4a31fe70408": {
      "translations": {
        "python": {
          "source": "apprunner.Service(self, \"Service\",\n    source=apprunner.Source.from_git_hub(\n        repository_url=\"https://github.com/aws-containers/hello-app-runner\",\n        branch=\"main\",\n        configuration_source=apprunner.ConfigurationSourceType.REPOSITORY,\n        connection=apprunner.GitHubConnection.from_connection_arn(\"CONNECTION_ARN\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Service(this, \"Service\", new ServiceProps {\n    Source = Source.FromGitHub(new GithubRepositoryProps {\n        RepositoryUrl = \"https://github.com/aws-containers/hello-app-runner\",\n        Branch = \"main\",\n        ConfigurationSource = ConfigurationSourceType.REPOSITORY,\n        Connection = GitHubConnection.FromConnectionArn(\"CONNECTION_ARN\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Service.Builder.create(this, \"Service\")\n        .source(Source.fromGitHub(GithubRepositoryProps.builder()\n                .repositoryUrl(\"https://github.com/aws-containers/hello-app-runner\")\n                .branch(\"main\")\n                .configurationSource(ConfigurationSourceType.REPOSITORY)\n                .connection(GitHubConnection.fromConnectionArn(\"CONNECTION_ARN\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "apprunner.NewService(this, jsii.String(\"Service\"), &serviceProps{\n\tsource: apprunner.source.fromGitHub(&githubRepositoryProps{\n\t\trepositoryUrl: jsii.String(\"https://github.com/aws-containers/hello-app-runner\"),\n\t\tbranch: jsii.String(\"main\"),\n\t\tconfigurationSource: apprunner.configurationSourceType_REPOSITORY,\n\t\tconnection: apprunner.gitHubConnection.fromConnectionArn(jsii.String(\"CONNECTION_ARN\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.ConfigurationSourceType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.ConfigurationSourceType",
        "@aws-cdk/aws-apprunner.ConfigurationSourceType#REPOSITORY",
        "@aws-cdk/aws-apprunner.GitHubConnection",
        "@aws-cdk/aws-apprunner.GitHubConnection#fromConnectionArn",
        "@aws-cdk/aws-apprunner.GithubRepositoryProps",
        "@aws-cdk/aws-apprunner.Service",
        "@aws-cdk/aws-apprunner.ServiceProps",
        "@aws-cdk/aws-apprunner.Source",
        "@aws-cdk/aws-apprunner.Source#fromGitHub",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "104": 1,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "9f38d5e146a9bec25b41bf26291fc54f1c6afc6eb48c7aecf40a5b7d35b0e4a9"
    },
    "47598c7c39f688c1701e71c1bab41618b3f7f670946ef2ece8c1300259ce4ae4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\ncpu = apprunner.Cpu.of(\"unit\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nCpu cpu = Cpu.Of(\"unit\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nCpu cpu = Cpu.of(\"unit\");",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\ncpu := apprunner.cpu.of(jsii.String(\"unit\"))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst cpu = apprunner.Cpu.of('unit');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.Cpu"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.Cpu",
        "@aws-cdk/aws-apprunner.Cpu#of"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cpu = apprunner.Cpu.of('unit');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "3e002da1e5acf903a73e7012b42c59284bd54d5edf77a655b5b9218a572b7488"
    },
    "dc30cdeda28ce18e1f8dc99a43debf301c11ae2dc4c5378e5e66ef63c470d388": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ecr as ecr\n\n\napprunner.Service(self, \"Service\",\n    source=apprunner.Source.from_ecr(\n        image_configuration=apprunner.ImageConfiguration(port=80),\n        repository=ecr.Repository.from_repository_name(self, \"NginxRepository\", \"nginx\"),\n        tag_or_digest=\"latest\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ECR;\n\n\nnew Service(this, \"Service\", new ServiceProps {\n    Source = Source.FromEcr(new EcrProps {\n        ImageConfiguration = new ImageConfiguration { Port = 80 },\n        Repository = Repository.FromRepositoryName(this, \"NginxRepository\", \"nginx\"),\n        TagOrDigest = \"latest\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ecr.*;\n\n\nService.Builder.create(this, \"Service\")\n        .source(Source.fromEcr(EcrProps.builder()\n                .imageConfiguration(ImageConfiguration.builder().port(80).build())\n                .repository(Repository.fromRepositoryName(this, \"NginxRepository\", \"nginx\"))\n                .tagOrDigest(\"latest\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ecr \"github.com/aws-samples/dummy/awscdkawsecr\"\n\n\napprunner.NewService(this, jsii.String(\"Service\"), &serviceProps{\n\tsource: apprunner.source.fromEcr(&ecrProps{\n\t\timageConfiguration: &imageConfiguration{\n\t\t\tport: jsii.Number(80),\n\t\t},\n\t\trepository: ecr.repository.fromRepositoryName(this, jsii.String(\"NginxRepository\"), jsii.String(\"nginx\")),\n\t\ttagOrDigest: jsii.String(\"latest\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ecr from '@aws-cdk/aws-ecr';\n\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcr({\n    imageConfiguration: { port: 80 },\n    repository: ecr.Repository.fromRepositoryName(this, 'NginxRepository', 'nginx'),\n    tagOrDigest: 'latest',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.EcrProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.EcrProps",
        "@aws-cdk/aws-apprunner.ImageConfiguration",
        "@aws-cdk/aws-apprunner.Service",
        "@aws-cdk/aws-apprunner.ServiceProps",
        "@aws-cdk/aws-apprunner.Source",
        "@aws-cdk/aws-apprunner.Source#fromEcr",
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-ecr.Repository",
        "@aws-cdk/aws-ecr.Repository#fromRepositoryName",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ecr from '@aws-cdk/aws-ecr';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcr({\n    imageConfiguration: { port: 80 },\n    repository: ecr.Repository.fromRepositoryName(this, 'NginxRepository', 'nginx'),\n    tagOrDigest: 'latest',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 14,
        "104": 2,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "226": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "ac2e0e92580905d8ae0d102c79d2d3ae3eb3abffb3fb1e16af73fbe97b10e4f8"
    },
    "a923f1fbb91c320da21be716d138ce75e7e5c34fa164394f05bf80652126ccb6": {
      "translations": {
        "python": {
          "source": "apprunner.Service(self, \"Service\",\n    source=apprunner.Source.from_ecr_public(\n        image_configuration=apprunner.ImageConfiguration(port=8000),\n        image_identifier=\"public.ecr.aws/aws-containers/hello-app-runner:latest\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Service(this, \"Service\", new ServiceProps {\n    Source = Source.FromEcrPublic(new EcrPublicProps {\n        ImageConfiguration = new ImageConfiguration { Port = 8000 },\n        ImageIdentifier = \"public.ecr.aws/aws-containers/hello-app-runner:latest\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Service.Builder.create(this, \"Service\")\n        .source(Source.fromEcrPublic(EcrPublicProps.builder()\n                .imageConfiguration(ImageConfiguration.builder().port(8000).build())\n                .imageIdentifier(\"public.ecr.aws/aws-containers/hello-app-runner:latest\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "apprunner.NewService(this, jsii.String(\"Service\"), &serviceProps{\n\tsource: apprunner.source.fromEcrPublic(&ecrPublicProps{\n\t\timageConfiguration: &imageConfiguration{\n\t\t\tport: jsii.Number(8000),\n\t\t},\n\t\timageIdentifier: jsii.String(\"public.ecr.aws/aws-containers/hello-app-runner:latest\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.EcrPublicProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.EcrPublicProps",
        "@aws-cdk/aws-apprunner.ImageConfiguration",
        "@aws-cdk/aws-apprunner.Service",
        "@aws-cdk/aws-apprunner.ServiceProps",
        "@aws-cdk/aws-apprunner.Source",
        "@aws-cdk/aws-apprunner.Source#fromEcrPublic",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 9,
        "104": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "e22a7564a5e17c6eb1863064de55983ef636b018fd7a9a20242b83cb49276b94"
    },
    "cd5417459f6794a14e7251bf467a879097d44f7a7dae9626eca2658e6d63fe94": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\necr_public_source = apprunner.EcrPublicSource(\n    image_identifier=\"imageIdentifier\",\n\n    # the properties below are optional\n    image_configuration=apprunner.ImageConfiguration(\n        environment={\n            \"environment_key\": \"environment\"\n        },\n        port=123,\n        start_command=\"startCommand\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nEcrPublicSource ecrPublicSource = new EcrPublicSource(new EcrPublicProps {\n    ImageIdentifier = \"imageIdentifier\",\n\n    // the properties below are optional\n    ImageConfiguration = new ImageConfiguration {\n        Environment = new Dictionary<string, string> {\n            { \"environmentKey\", \"environment\" }\n        },\n        Port = 123,\n        StartCommand = \"startCommand\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nEcrPublicSource ecrPublicSource = EcrPublicSource.Builder.create()\n        .imageIdentifier(\"imageIdentifier\")\n\n        // the properties below are optional\n        .imageConfiguration(ImageConfiguration.builder()\n                .environment(Map.of(\n                        \"environmentKey\", \"environment\"))\n                .port(123)\n                .startCommand(\"startCommand\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\necrPublicSource := apprunner.NewEcrPublicSource(&ecrPublicProps{\n\timageIdentifier: jsii.String(\"imageIdentifier\"),\n\n\t// the properties below are optional\n\timageConfiguration: &imageConfiguration{\n\t\tenvironment: map[string]*string{\n\t\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t\t},\n\t\tport: jsii.Number(123),\n\t\tstartCommand: jsii.String(\"startCommand\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst ecrPublicSource = new apprunner.EcrPublicSource({\n  imageIdentifier: 'imageIdentifier',\n\n  // the properties below are optional\n  imageConfiguration: {\n    environment: {\n      environmentKey: 'environment',\n    },\n    port: 123,\n    startCommand: 'startCommand',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.EcrPublicSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.EcrPublicProps",
        "@aws-cdk/aws-apprunner.EcrPublicSource",
        "@aws-cdk/aws-apprunner.ImageConfiguration"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ecrPublicSource = new apprunner.EcrPublicSource({\n  imageIdentifier: 'imageIdentifier',\n\n  // the properties below are optional\n  imageConfiguration: {\n    environment: {\n      environmentKey: 'environment',\n    },\n    port: 123,\n    startCommand: 'startCommand',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 10,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "a664f6703f1b2a8f2b2f73ed0d0f4d7fa3c37809c1b7bb5dae2a869b99bd84a7"
    },
    "7e2006276ecdafd5d4d7f0688dc49cc7e47bd491808801b2da04aca232628475": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\nimport aws_cdk.aws_ecr as ecr\n\n# repository: ecr.Repository\n\necr_source = apprunner.EcrSource(\n    repository=repository,\n\n    # the properties below are optional\n    image_configuration=apprunner.ImageConfiguration(\n        environment={\n            \"environment_key\": \"environment\"\n        },\n        port=123,\n        start_command=\"startCommand\"\n    ),\n    tag=\"tag\",\n    tag_or_digest=\"tagOrDigest\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\nusing Amazon.CDK.AWS.ECR;\n\nRepository repository;\n\nEcrSource ecrSource = new EcrSource(new EcrProps {\n    Repository = repository,\n\n    // the properties below are optional\n    ImageConfiguration = new ImageConfiguration {\n        Environment = new Dictionary<string, string> {\n            { \"environmentKey\", \"environment\" }\n        },\n        Port = 123,\n        StartCommand = \"startCommand\"\n    },\n    Tag = \"tag\",\n    TagOrDigest = \"tagOrDigest\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\nimport software.amazon.awscdk.services.ecr.*;\n\nRepository repository;\n\nEcrSource ecrSource = EcrSource.Builder.create()\n        .repository(repository)\n\n        // the properties below are optional\n        .imageConfiguration(ImageConfiguration.builder()\n                .environment(Map.of(\n                        \"environmentKey\", \"environment\"))\n                .port(123)\n                .startCommand(\"startCommand\")\n                .build())\n        .tag(\"tag\")\n        .tagOrDigest(\"tagOrDigest\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\nimport ecr \"github.com/aws-samples/dummy/awscdkawsecr\"\n\nvar repository repository\n\necrSource := apprunner.NewEcrSource(&ecrProps{\n\trepository: repository,\n\n\t// the properties below are optional\n\timageConfiguration: &imageConfiguration{\n\t\tenvironment: map[string]*string{\n\t\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t\t},\n\t\tport: jsii.Number(123),\n\t\tstartCommand: jsii.String(\"startCommand\"),\n\t},\n\ttag: jsii.String(\"tag\"),\n\ttagOrDigest: jsii.String(\"tagOrDigest\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as ecr from '@aws-cdk/aws-ecr';\n\ndeclare const repository: ecr.Repository;\nconst ecrSource = new apprunner.EcrSource({\n  repository: repository,\n\n  // the properties below are optional\n  imageConfiguration: {\n    environment: {\n      environmentKey: 'environment',\n    },\n    port: 123,\n    startCommand: 'startCommand',\n  },\n  tag: 'tag',\n  tagOrDigest: 'tagOrDigest',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.EcrSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.EcrProps",
        "@aws-cdk/aws-apprunner.EcrSource",
        "@aws-cdk/aws-apprunner.ImageConfiguration",
        "@aws-cdk/aws-ecr.IRepository"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as ecr from '@aws-cdk/aws-ecr';\n\ndeclare const repository: ecr.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ecrSource = new apprunner.EcrSource({\n  repository: repository,\n\n  // the properties below are optional\n  imageConfiguration: {\n    environment: {\n      environmentKey: 'environment',\n    },\n    port: 123,\n    startCommand: 'startCommand',\n  },\n  tag: 'tag',\n  tagOrDigest: 'tagOrDigest',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 17,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "4222fec1e52fd7ca5bb3159466815540560c9f6c4c6cea5464ea8f3febf054a5"
    },
    "223cd4666caed0201f5989022a31cb07129198e720182b7d180ee7e4483e1865": {
      "translations": {
        "python": {
          "source": "apprunner.Service(self, \"Service\",\n    source=apprunner.Source.from_git_hub(\n        repository_url=\"https://github.com/aws-containers/hello-app-runner\",\n        branch=\"main\",\n        configuration_source=apprunner.ConfigurationSourceType.REPOSITORY,\n        connection=apprunner.GitHubConnection.from_connection_arn(\"CONNECTION_ARN\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Service(this, \"Service\", new ServiceProps {\n    Source = Source.FromGitHub(new GithubRepositoryProps {\n        RepositoryUrl = \"https://github.com/aws-containers/hello-app-runner\",\n        Branch = \"main\",\n        ConfigurationSource = ConfigurationSourceType.REPOSITORY,\n        Connection = GitHubConnection.FromConnectionArn(\"CONNECTION_ARN\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Service.Builder.create(this, \"Service\")\n        .source(Source.fromGitHub(GithubRepositoryProps.builder()\n                .repositoryUrl(\"https://github.com/aws-containers/hello-app-runner\")\n                .branch(\"main\")\n                .configurationSource(ConfigurationSourceType.REPOSITORY)\n                .connection(GitHubConnection.fromConnectionArn(\"CONNECTION_ARN\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "apprunner.NewService(this, jsii.String(\"Service\"), &serviceProps{\n\tsource: apprunner.source.fromGitHub(&githubRepositoryProps{\n\t\trepositoryUrl: jsii.String(\"https://github.com/aws-containers/hello-app-runner\"),\n\t\tbranch: jsii.String(\"main\"),\n\t\tconfigurationSource: apprunner.configurationSourceType_REPOSITORY,\n\t\tconnection: apprunner.gitHubConnection.fromConnectionArn(jsii.String(\"CONNECTION_ARN\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.GitHubConnection"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.ConfigurationSourceType",
        "@aws-cdk/aws-apprunner.ConfigurationSourceType#REPOSITORY",
        "@aws-cdk/aws-apprunner.GitHubConnection",
        "@aws-cdk/aws-apprunner.GitHubConnection#fromConnectionArn",
        "@aws-cdk/aws-apprunner.GithubRepositoryProps",
        "@aws-cdk/aws-apprunner.Service",
        "@aws-cdk/aws-apprunner.ServiceProps",
        "@aws-cdk/aws-apprunner.Source",
        "@aws-cdk/aws-apprunner.Source#fromGitHub",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "104": 1,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "9f38d5e146a9bec25b41bf26291fc54f1c6afc6eb48c7aecf40a5b7d35b0e4a9"
    },
    "3031505719ccacedb44800dcf23abe4eebde373e3476f1c6969c048a46d637ee": {
      "translations": {
        "python": {
          "source": "apprunner.Service(self, \"Service\",\n    source=apprunner.Source.from_git_hub(\n        repository_url=\"https://github.com/aws-containers/hello-app-runner\",\n        branch=\"main\",\n        configuration_source=apprunner.ConfigurationSourceType.REPOSITORY,\n        connection=apprunner.GitHubConnection.from_connection_arn(\"CONNECTION_ARN\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Service(this, \"Service\", new ServiceProps {\n    Source = Source.FromGitHub(new GithubRepositoryProps {\n        RepositoryUrl = \"https://github.com/aws-containers/hello-app-runner\",\n        Branch = \"main\",\n        ConfigurationSource = ConfigurationSourceType.REPOSITORY,\n        Connection = GitHubConnection.FromConnectionArn(\"CONNECTION_ARN\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Service.Builder.create(this, \"Service\")\n        .source(Source.fromGitHub(GithubRepositoryProps.builder()\n                .repositoryUrl(\"https://github.com/aws-containers/hello-app-runner\")\n                .branch(\"main\")\n                .configurationSource(ConfigurationSourceType.REPOSITORY)\n                .connection(GitHubConnection.fromConnectionArn(\"CONNECTION_ARN\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "apprunner.NewService(this, jsii.String(\"Service\"), &serviceProps{\n\tsource: apprunner.source.fromGitHub(&githubRepositoryProps{\n\t\trepositoryUrl: jsii.String(\"https://github.com/aws-containers/hello-app-runner\"),\n\t\tbranch: jsii.String(\"main\"),\n\t\tconfigurationSource: apprunner.configurationSourceType_REPOSITORY,\n\t\tconnection: apprunner.gitHubConnection.fromConnectionArn(jsii.String(\"CONNECTION_ARN\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.GithubRepositoryProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.ConfigurationSourceType",
        "@aws-cdk/aws-apprunner.ConfigurationSourceType#REPOSITORY",
        "@aws-cdk/aws-apprunner.GitHubConnection",
        "@aws-cdk/aws-apprunner.GitHubConnection#fromConnectionArn",
        "@aws-cdk/aws-apprunner.GithubRepositoryProps",
        "@aws-cdk/aws-apprunner.Service",
        "@aws-cdk/aws-apprunner.ServiceProps",
        "@aws-cdk/aws-apprunner.Source",
        "@aws-cdk/aws-apprunner.Source#fromGitHub",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "104": 1,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "9f38d5e146a9bec25b41bf26291fc54f1c6afc6eb48c7aecf40a5b7d35b0e4a9"
    },
    "60ec1effdda3e7c6e14c82b16977b6442fc51111af18fc2dd17b982e8ab963d2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\n# git_hub_connection: apprunner.GitHubConnection\n# runtime: apprunner.Runtime\n\ngithub_source = apprunner.GithubSource(\n    configuration_source=apprunner.ConfigurationSourceType.REPOSITORY,\n    connection=git_hub_connection,\n    repository_url=\"repositoryUrl\",\n\n    # the properties below are optional\n    branch=\"branch\",\n    code_configuration_values=apprunner.CodeConfigurationValues(\n        runtime=runtime,\n\n        # the properties below are optional\n        build_command=\"buildCommand\",\n        environment={\n            \"environment_key\": \"environment\"\n        },\n        port=\"port\",\n        start_command=\"startCommand\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nGitHubConnection gitHubConnection;\nRuntime runtime;\n\nGithubSource githubSource = new GithubSource(new GithubRepositoryProps {\n    ConfigurationSource = ConfigurationSourceType.REPOSITORY,\n    Connection = gitHubConnection,\n    RepositoryUrl = \"repositoryUrl\",\n\n    // the properties below are optional\n    Branch = \"branch\",\n    CodeConfigurationValues = new CodeConfigurationValues {\n        Runtime = runtime,\n\n        // the properties below are optional\n        BuildCommand = \"buildCommand\",\n        Environment = new Dictionary<string, string> {\n            { \"environmentKey\", \"environment\" }\n        },\n        Port = \"port\",\n        StartCommand = \"startCommand\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nGitHubConnection gitHubConnection;\nRuntime runtime;\n\nGithubSource githubSource = GithubSource.Builder.create()\n        .configurationSource(ConfigurationSourceType.REPOSITORY)\n        .connection(gitHubConnection)\n        .repositoryUrl(\"repositoryUrl\")\n\n        // the properties below are optional\n        .branch(\"branch\")\n        .codeConfigurationValues(CodeConfigurationValues.builder()\n                .runtime(runtime)\n\n                // the properties below are optional\n                .buildCommand(\"buildCommand\")\n                .environment(Map.of(\n                        \"environmentKey\", \"environment\"))\n                .port(\"port\")\n                .startCommand(\"startCommand\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\nvar gitHubConnection gitHubConnection\nvar runtime runtime\n\ngithubSource := apprunner.NewGithubSource(&githubRepositoryProps{\n\tconfigurationSource: apprunner.configurationSourceType_REPOSITORY,\n\tconnection: gitHubConnection,\n\trepositoryUrl: jsii.String(\"repositoryUrl\"),\n\n\t// the properties below are optional\n\tbranch: jsii.String(\"branch\"),\n\tcodeConfigurationValues: &codeConfigurationValues{\n\t\truntime: runtime,\n\n\t\t// the properties below are optional\n\t\tbuildCommand: jsii.String(\"buildCommand\"),\n\t\tenvironment: map[string]*string{\n\t\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t\t},\n\t\tport: jsii.String(\"port\"),\n\t\tstartCommand: jsii.String(\"startCommand\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n\ndeclare const gitHubConnection: apprunner.GitHubConnection;\ndeclare const runtime: apprunner.Runtime;\nconst githubSource = new apprunner.GithubSource({\n  configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n  connection: gitHubConnection,\n  repositoryUrl: 'repositoryUrl',\n\n  // the properties below are optional\n  branch: 'branch',\n  codeConfigurationValues: {\n    runtime: runtime,\n\n    // the properties below are optional\n    buildCommand: 'buildCommand',\n    environment: {\n      environmentKey: 'environment',\n    },\n    port: 'port',\n    startCommand: 'startCommand',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.GithubSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CodeConfigurationValues",
        "@aws-cdk/aws-apprunner.ConfigurationSourceType",
        "@aws-cdk/aws-apprunner.ConfigurationSourceType#REPOSITORY",
        "@aws-cdk/aws-apprunner.GitHubConnection",
        "@aws-cdk/aws-apprunner.GithubRepositoryProps",
        "@aws-cdk/aws-apprunner.GithubSource",
        "@aws-cdk/aws-apprunner.Runtime"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n\ndeclare const gitHubConnection: apprunner.GitHubConnection;\ndeclare const runtime: apprunner.Runtime;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst githubSource = new apprunner.GithubSource({\n  configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n  connection: gitHubConnection,\n  repositoryUrl: 'repositoryUrl',\n\n  // the properties below are optional\n  branch: 'branch',\n  codeConfigurationValues: {\n    runtime: runtime,\n\n    // the properties below are optional\n    buildCommand: 'buildCommand',\n    environment: {\n      environmentKey: 'environment',\n    },\n    port: 'port',\n    startCommand: 'startCommand',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 26,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "50cffaf9733df8dee308434a4ee135d1c4179091c1a9ebaf9770c4250d0226e6"
    },
    "7dfea820b4325e12d3dd6874ff5085a5968b4295340dc3662632ce60a2594df5": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ecr_assets as assets\n\n\nimage_asset = assets.DockerImageAsset(self, \"ImageAssets\",\n    directory=path.join(__dirname, \"./docker.assets\")\n)\napprunner.Service(self, \"Service\",\n    source=apprunner.Source.from_asset(\n        image_configuration=apprunner.ImageConfiguration(port=8000),\n        asset=image_asset\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Ecr.Assets;\n\n\nDockerImageAsset imageAsset = new DockerImageAsset(this, \"ImageAssets\", new DockerImageAssetProps {\n    Directory = Join(__dirname, \"./docker.assets\")\n});\nnew Service(this, \"Service\", new ServiceProps {\n    Source = Source.FromAsset(new AssetProps {\n        ImageConfiguration = new ImageConfiguration { Port = 8000 },\n        Asset = imageAsset\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ecr.assets.*;\n\n\nDockerImageAsset imageAsset = DockerImageAsset.Builder.create(this, \"ImageAssets\")\n        .directory(join(__dirname, \"./docker.assets\"))\n        .build();\nService.Builder.create(this, \"Service\")\n        .source(Source.fromAsset(AssetProps.builder()\n                .imageConfiguration(ImageConfiguration.builder().port(8000).build())\n                .asset(imageAsset)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import assets \"github.com/aws-samples/dummy/awscdkawsecrassets\"\n\n\nimageAsset := assets.NewDockerImageAsset(this, jsii.String(\"ImageAssets\"), &dockerImageAssetProps{\n\tdirectory: path.join(__dirname, jsii.String(\"./docker.assets\")),\n})\napprunner.NewService(this, jsii.String(\"Service\"), &serviceProps{\n\tsource: apprunner.source.fromAsset(&assetProps{\n\t\timageConfiguration: &imageConfiguration{\n\t\t\tport: jsii.Number(8000),\n\t\t},\n\t\tasset: imageAsset,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as assets from '@aws-cdk/aws-ecr-assets';\n\nconst imageAsset = new assets.DockerImageAsset(this, 'ImageAssets', {\n  directory: path.join(__dirname, './docker.assets'),\n});\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromAsset({\n    imageConfiguration: { port: 8000 },\n    asset: imageAsset,\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.ImageConfiguration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.AssetProps",
        "@aws-cdk/aws-apprunner.ImageConfiguration",
        "@aws-cdk/aws-apprunner.Service",
        "@aws-cdk/aws-apprunner.ServiceProps",
        "@aws-cdk/aws-apprunner.Source",
        "@aws-cdk/aws-apprunner.Source#fromAsset",
        "@aws-cdk/aws-ecr-assets.DockerImageAsset",
        "@aws-cdk/aws-ecr-assets.DockerImageAssetProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as assets from '@aws-cdk/aws-ecr-assets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst imageAsset = new assets.DockerImageAsset(this, 'ImageAssets', {\n  directory: path.join(__dirname, './docker.assets'),\n});\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromAsset({\n    imageConfiguration: { port: 8000 },\n    asset: imageAsset,\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 18,
        "104": 2,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "a2b2cb98ffc6a00d9ad1e80fecc78429e63d49c8a64ed7d58beb18e21173b9ce"
    },
    "45b161c9cc660f8b0d32bc6a072b106d8e34023e0da08e80423e0d8a6b371e61": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\nimage_repository = apprunner.ImageRepository(\n    image_identifier=\"imageIdentifier\",\n    image_repository_type=apprunner.ImageRepositoryType.ECR_PUBLIC,\n\n    # the properties below are optional\n    image_configuration=apprunner.ImageConfiguration(\n        environment={\n            \"environment_key\": \"environment\"\n        },\n        port=123,\n        start_command=\"startCommand\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nImageRepository imageRepository = new ImageRepository {\n    ImageIdentifier = \"imageIdentifier\",\n    ImageRepositoryType = ImageRepositoryType.ECR_PUBLIC,\n\n    // the properties below are optional\n    ImageConfiguration = new ImageConfiguration {\n        Environment = new Dictionary<string, string> {\n            { \"environmentKey\", \"environment\" }\n        },\n        Port = 123,\n        StartCommand = \"startCommand\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nImageRepository imageRepository = ImageRepository.builder()\n        .imageIdentifier(\"imageIdentifier\")\n        .imageRepositoryType(ImageRepositoryType.ECR_PUBLIC)\n\n        // the properties below are optional\n        .imageConfiguration(ImageConfiguration.builder()\n                .environment(Map.of(\n                        \"environmentKey\", \"environment\"))\n                .port(123)\n                .startCommand(\"startCommand\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\nimageRepository := &imageRepository{\n\timageIdentifier: jsii.String(\"imageIdentifier\"),\n\timageRepositoryType: apprunner.imageRepositoryType_ECR_PUBLIC,\n\n\t// the properties below are optional\n\timageConfiguration: &imageConfiguration{\n\t\tenvironment: map[string]*string{\n\t\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t\t},\n\t\tport: jsii.Number(123),\n\t\tstartCommand: jsii.String(\"startCommand\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst imageRepository: apprunner.ImageRepository = {\n  imageIdentifier: 'imageIdentifier',\n  imageRepositoryType: apprunner.ImageRepositoryType.ECR_PUBLIC,\n\n  // the properties below are optional\n  imageConfiguration: {\n    environment: {\n      environmentKey: 'environment',\n    },\n    port: 123,\n    startCommand: 'startCommand',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.ImageRepository"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.ImageConfiguration",
        "@aws-cdk/aws-apprunner.ImageRepository",
        "@aws-cdk/aws-apprunner.ImageRepositoryType",
        "@aws-cdk/aws-apprunner.ImageRepositoryType#ECR_PUBLIC"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst imageRepository: apprunner.ImageRepository = {\n  imageIdentifier: 'imageIdentifier',\n  imageRepositoryType: apprunner.ImageRepositoryType.ECR_PUBLIC,\n\n  // the properties below are optional\n  imageConfiguration: {\n    environment: {\n      environmentKey: 'environment',\n    },\n    port: 123,\n    startCommand: 'startCommand',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 14,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "8a7fe36fcb7cee9aa4fea4b7115782d7658c48a7bab028d51970e1d8c018f684"
    },
    "76a960f7f0a80611e9c5afe8dfdba84ac67b79a47329d0f94203b340b1e5f28d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\nmemory = apprunner.Memory.FOUR_GB",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nMemory memory = Memory.FOUR_GB;",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nMemory memory = Memory.FOUR_GB;",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\nmemory := apprunner.memory_FOUR_GB()",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst memory = apprunner.Memory.FOUR_GB;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.Memory"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.Memory",
        "@aws-cdk/aws-apprunner.Memory#FOUR_GB"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst memory = apprunner.Memory.FOUR_GB;\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "d8818c0d1eafd494b0b9c5e221aa5337c0b74e9024e04b5a5eebac5f14c686fc"
    },
    "41a9d8ef54a2155cd1671d600396d9b620d6b4791129183250b0cded50631c43": {
      "translations": {
        "python": {
          "source": "apprunner.Service(self, \"Service\",\n    source=apprunner.Source.from_git_hub(\n        repository_url=\"https://github.com/aws-containers/hello-app-runner\",\n        branch=\"main\",\n        configuration_source=apprunner.ConfigurationSourceType.API,\n        code_configuration_values=apprunner.CodeConfigurationValues(\n            runtime=apprunner.Runtime.PYTHON_3,\n            port=\"8000\",\n            start_command=\"python app.py\",\n            build_command=\"yum install -y pycairo && pip install -r requirements.txt\"\n        ),\n        connection=apprunner.GitHubConnection.from_connection_arn(\"CONNECTION_ARN\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Service(this, \"Service\", new ServiceProps {\n    Source = Source.FromGitHub(new GithubRepositoryProps {\n        RepositoryUrl = \"https://github.com/aws-containers/hello-app-runner\",\n        Branch = \"main\",\n        ConfigurationSource = ConfigurationSourceType.API,\n        CodeConfigurationValues = new CodeConfigurationValues {\n            Runtime = Runtime.PYTHON_3,\n            Port = \"8000\",\n            StartCommand = \"python app.py\",\n            BuildCommand = \"yum install -y pycairo && pip install -r requirements.txt\"\n        },\n        Connection = GitHubConnection.FromConnectionArn(\"CONNECTION_ARN\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Service.Builder.create(this, \"Service\")\n        .source(Source.fromGitHub(GithubRepositoryProps.builder()\n                .repositoryUrl(\"https://github.com/aws-containers/hello-app-runner\")\n                .branch(\"main\")\n                .configurationSource(ConfigurationSourceType.API)\n                .codeConfigurationValues(CodeConfigurationValues.builder()\n                        .runtime(Runtime.PYTHON_3)\n                        .port(\"8000\")\n                        .startCommand(\"python app.py\")\n                        .buildCommand(\"yum install -y pycairo && pip install -r requirements.txt\")\n                        .build())\n                .connection(GitHubConnection.fromConnectionArn(\"CONNECTION_ARN\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "apprunner.NewService(this, jsii.String(\"Service\"), &serviceProps{\n\tsource: apprunner.source.fromGitHub(&githubRepositoryProps{\n\t\trepositoryUrl: jsii.String(\"https://github.com/aws-containers/hello-app-runner\"),\n\t\tbranch: jsii.String(\"main\"),\n\t\tconfigurationSource: apprunner.configurationSourceType_API,\n\t\tcodeConfigurationValues: &codeConfigurationValues{\n\t\t\truntime: apprunner.runtime_PYTHON_3(),\n\t\t\tport: jsii.String(\"8000\"),\n\t\t\tstartCommand: jsii.String(\"python app.py\"),\n\t\t\tbuildCommand: jsii.String(\"yum install -y pycairo && pip install -r requirements.txt\"),\n\t\t},\n\t\tconnection: apprunner.gitHubConnection.fromConnectionArn(jsii.String(\"CONNECTION_ARN\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.API,\n    codeConfigurationValues: {\n      runtime: apprunner.Runtime.PYTHON_3,\n      port: '8000',\n      startCommand: 'python app.py',\n      buildCommand: 'yum install -y pycairo && pip install -r requirements.txt',\n    },\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.Runtime"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CodeConfigurationValues",
        "@aws-cdk/aws-apprunner.ConfigurationSourceType",
        "@aws-cdk/aws-apprunner.ConfigurationSourceType#API",
        "@aws-cdk/aws-apprunner.GitHubConnection",
        "@aws-cdk/aws-apprunner.GitHubConnection#fromConnectionArn",
        "@aws-cdk/aws-apprunner.GithubRepositoryProps",
        "@aws-cdk/aws-apprunner.Runtime",
        "@aws-cdk/aws-apprunner.Runtime#PYTHON_3",
        "@aws-cdk/aws-apprunner.Service",
        "@aws-cdk/aws-apprunner.ServiceProps",
        "@aws-cdk/aws-apprunner.Source",
        "@aws-cdk/aws-apprunner.Source#fromGitHub",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.API,\n    codeConfigurationValues: {\n      runtime: apprunner.Runtime.PYTHON_3,\n      port: '8000',\n      startCommand: 'python app.py',\n      buildCommand: 'yum install -y pycairo && pip install -r requirements.txt',\n    },\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 7,
        "75": 24,
        "104": 1,
        "193": 3,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 10
      },
      "fqnsFingerprint": "4837f3e8a6f1ccf010b119aa73088a03369df1c6000519bfd1a2fac4c3cfd94f"
    },
    "75e50b768cfc348ecbc57a14b8706581a26ce2e951f8a51a73b408e3cc512c86": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ecr_assets as assets\n\n\nimage_asset = assets.DockerImageAsset(self, \"ImageAssets\",\n    directory=path.join(__dirname, \"./docker.assets\")\n)\napprunner.Service(self, \"Service\",\n    source=apprunner.Source.from_asset(\n        image_configuration=apprunner.ImageConfiguration(port=8000),\n        asset=image_asset\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Ecr.Assets;\n\n\nDockerImageAsset imageAsset = new DockerImageAsset(this, \"ImageAssets\", new DockerImageAssetProps {\n    Directory = Join(__dirname, \"./docker.assets\")\n});\nnew Service(this, \"Service\", new ServiceProps {\n    Source = Source.FromAsset(new AssetProps {\n        ImageConfiguration = new ImageConfiguration { Port = 8000 },\n        Asset = imageAsset\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ecr.assets.*;\n\n\nDockerImageAsset imageAsset = DockerImageAsset.Builder.create(this, \"ImageAssets\")\n        .directory(join(__dirname, \"./docker.assets\"))\n        .build();\nService.Builder.create(this, \"Service\")\n        .source(Source.fromAsset(AssetProps.builder()\n                .imageConfiguration(ImageConfiguration.builder().port(8000).build())\n                .asset(imageAsset)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import assets \"github.com/aws-samples/dummy/awscdkawsecrassets\"\n\n\nimageAsset := assets.NewDockerImageAsset(this, jsii.String(\"ImageAssets\"), &dockerImageAssetProps{\n\tdirectory: path.join(__dirname, jsii.String(\"./docker.assets\")),\n})\napprunner.NewService(this, jsii.String(\"Service\"), &serviceProps{\n\tsource: apprunner.source.fromAsset(&assetProps{\n\t\timageConfiguration: &imageConfiguration{\n\t\t\tport: jsii.Number(8000),\n\t\t},\n\t\tasset: imageAsset,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as assets from '@aws-cdk/aws-ecr-assets';\n\nconst imageAsset = new assets.DockerImageAsset(this, 'ImageAssets', {\n  directory: path.join(__dirname, './docker.assets'),\n});\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromAsset({\n    imageConfiguration: { port: 8000 },\n    asset: imageAsset,\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.Service"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.AssetProps",
        "@aws-cdk/aws-apprunner.ImageConfiguration",
        "@aws-cdk/aws-apprunner.Service",
        "@aws-cdk/aws-apprunner.ServiceProps",
        "@aws-cdk/aws-apprunner.Source",
        "@aws-cdk/aws-apprunner.Source#fromAsset",
        "@aws-cdk/aws-ecr-assets.DockerImageAsset",
        "@aws-cdk/aws-ecr-assets.DockerImageAssetProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as assets from '@aws-cdk/aws-ecr-assets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst imageAsset = new assets.DockerImageAsset(this, 'ImageAssets', {\n  directory: path.join(__dirname, './docker.assets'),\n});\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromAsset({\n    imageConfiguration: { port: 8000 },\n    asset: imageAsset,\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 18,
        "104": 2,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "a2b2cb98ffc6a00d9ad1e80fecc78429e63d49c8a64ed7d58beb18e21173b9ce"
    },
    "b1c19a46af04078b8f4f9df94585aebd7c2592b9dcc541c7a0aa66d4c06a39c2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\nservice_attributes = apprunner.ServiceAttributes(\n    service_arn=\"serviceArn\",\n    service_name=\"serviceName\",\n    service_status=\"serviceStatus\",\n    service_url=\"serviceUrl\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nServiceAttributes serviceAttributes = new ServiceAttributes {\n    ServiceArn = \"serviceArn\",\n    ServiceName = \"serviceName\",\n    ServiceStatus = \"serviceStatus\",\n    ServiceUrl = \"serviceUrl\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nServiceAttributes serviceAttributes = ServiceAttributes.builder()\n        .serviceArn(\"serviceArn\")\n        .serviceName(\"serviceName\")\n        .serviceStatus(\"serviceStatus\")\n        .serviceUrl(\"serviceUrl\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\nserviceAttributes := &serviceAttributes{\n\tserviceArn: jsii.String(\"serviceArn\"),\n\tserviceName: jsii.String(\"serviceName\"),\n\tserviceStatus: jsii.String(\"serviceStatus\"),\n\tserviceUrl: jsii.String(\"serviceUrl\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst serviceAttributes: apprunner.ServiceAttributes = {\n  serviceArn: 'serviceArn',\n  serviceName: 'serviceName',\n  serviceStatus: 'serviceStatus',\n  serviceUrl: 'serviceUrl',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.ServiceAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.ServiceAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst serviceAttributes: apprunner.ServiceAttributes = {\n  serviceArn: 'serviceArn',\n  serviceName: 'serviceName',\n  serviceStatus: 'serviceStatus',\n  serviceUrl: 'serviceUrl',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "3dc4fae30bfd447a94d84477c132ddd7655a3717217fb023be9a89ec2ce81851"
    },
    "fe518fea76eca20da552b7b5f6e97012a5acb48d79a150cf3f7a1b9fa5032b4a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ecr_assets as assets\n\n\nimage_asset = assets.DockerImageAsset(self, \"ImageAssets\",\n    directory=path.join(__dirname, \"./docker.assets\")\n)\napprunner.Service(self, \"Service\",\n    source=apprunner.Source.from_asset(\n        image_configuration=apprunner.ImageConfiguration(port=8000),\n        asset=image_asset\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Ecr.Assets;\n\n\nDockerImageAsset imageAsset = new DockerImageAsset(this, \"ImageAssets\", new DockerImageAssetProps {\n    Directory = Join(__dirname, \"./docker.assets\")\n});\nnew Service(this, \"Service\", new ServiceProps {\n    Source = Source.FromAsset(new AssetProps {\n        ImageConfiguration = new ImageConfiguration { Port = 8000 },\n        Asset = imageAsset\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ecr.assets.*;\n\n\nDockerImageAsset imageAsset = DockerImageAsset.Builder.create(this, \"ImageAssets\")\n        .directory(join(__dirname, \"./docker.assets\"))\n        .build();\nService.Builder.create(this, \"Service\")\n        .source(Source.fromAsset(AssetProps.builder()\n                .imageConfiguration(ImageConfiguration.builder().port(8000).build())\n                .asset(imageAsset)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import assets \"github.com/aws-samples/dummy/awscdkawsecrassets\"\n\n\nimageAsset := assets.NewDockerImageAsset(this, jsii.String(\"ImageAssets\"), &dockerImageAssetProps{\n\tdirectory: path.join(__dirname, jsii.String(\"./docker.assets\")),\n})\napprunner.NewService(this, jsii.String(\"Service\"), &serviceProps{\n\tsource: apprunner.source.fromAsset(&assetProps{\n\t\timageConfiguration: &imageConfiguration{\n\t\t\tport: jsii.Number(8000),\n\t\t},\n\t\tasset: imageAsset,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as assets from '@aws-cdk/aws-ecr-assets';\n\nconst imageAsset = new assets.DockerImageAsset(this, 'ImageAssets', {\n  directory: path.join(__dirname, './docker.assets'),\n});\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromAsset({\n    imageConfiguration: { port: 8000 },\n    asset: imageAsset,\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.ServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.AssetProps",
        "@aws-cdk/aws-apprunner.ImageConfiguration",
        "@aws-cdk/aws-apprunner.Service",
        "@aws-cdk/aws-apprunner.ServiceProps",
        "@aws-cdk/aws-apprunner.Source",
        "@aws-cdk/aws-apprunner.Source#fromAsset",
        "@aws-cdk/aws-ecr-assets.DockerImageAsset",
        "@aws-cdk/aws-ecr-assets.DockerImageAssetProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as assets from '@aws-cdk/aws-ecr-assets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst imageAsset = new assets.DockerImageAsset(this, 'ImageAssets', {\n  directory: path.join(__dirname, './docker.assets'),\n});\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromAsset({\n    imageConfiguration: { port: 8000 },\n    asset: imageAsset,\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 18,
        "104": 2,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "a2b2cb98ffc6a00d9ad1e80fecc78429e63d49c8a64ed7d58beb18e21173b9ce"
    },
    "b97e4d3b95de113d2c609c0f50a472d3ea308f4e47f15ea440f800c58995b72e": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ecr_assets as assets\n\n\nimage_asset = assets.DockerImageAsset(self, \"ImageAssets\",\n    directory=path.join(__dirname, \"./docker.assets\")\n)\napprunner.Service(self, \"Service\",\n    source=apprunner.Source.from_asset(\n        image_configuration=apprunner.ImageConfiguration(port=8000),\n        asset=image_asset\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Ecr.Assets;\n\n\nDockerImageAsset imageAsset = new DockerImageAsset(this, \"ImageAssets\", new DockerImageAssetProps {\n    Directory = Join(__dirname, \"./docker.assets\")\n});\nnew Service(this, \"Service\", new ServiceProps {\n    Source = Source.FromAsset(new AssetProps {\n        ImageConfiguration = new ImageConfiguration { Port = 8000 },\n        Asset = imageAsset\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ecr.assets.*;\n\n\nDockerImageAsset imageAsset = DockerImageAsset.Builder.create(this, \"ImageAssets\")\n        .directory(join(__dirname, \"./docker.assets\"))\n        .build();\nService.Builder.create(this, \"Service\")\n        .source(Source.fromAsset(AssetProps.builder()\n                .imageConfiguration(ImageConfiguration.builder().port(8000).build())\n                .asset(imageAsset)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import assets \"github.com/aws-samples/dummy/awscdkawsecrassets\"\n\n\nimageAsset := assets.NewDockerImageAsset(this, jsii.String(\"ImageAssets\"), &dockerImageAssetProps{\n\tdirectory: path.join(__dirname, jsii.String(\"./docker.assets\")),\n})\napprunner.NewService(this, jsii.String(\"Service\"), &serviceProps{\n\tsource: apprunner.source.fromAsset(&assetProps{\n\t\timageConfiguration: &imageConfiguration{\n\t\t\tport: jsii.Number(8000),\n\t\t},\n\t\tasset: imageAsset,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as assets from '@aws-cdk/aws-ecr-assets';\n\nconst imageAsset = new assets.DockerImageAsset(this, 'ImageAssets', {\n  directory: path.join(__dirname, './docker.assets'),\n});\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromAsset({\n    imageConfiguration: { port: 8000 },\n    asset: imageAsset,\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.Source"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.AssetProps",
        "@aws-cdk/aws-apprunner.ImageConfiguration",
        "@aws-cdk/aws-apprunner.Service",
        "@aws-cdk/aws-apprunner.ServiceProps",
        "@aws-cdk/aws-apprunner.Source",
        "@aws-cdk/aws-apprunner.Source#fromAsset",
        "@aws-cdk/aws-ecr-assets.DockerImageAsset",
        "@aws-cdk/aws-ecr-assets.DockerImageAssetProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as assets from '@aws-cdk/aws-ecr-assets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst imageAsset = new assets.DockerImageAsset(this, 'ImageAssets', {\n  directory: path.join(__dirname, './docker.assets'),\n});\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromAsset({\n    imageConfiguration: { port: 8000 },\n    asset: imageAsset,\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 18,
        "104": 2,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "a2b2cb98ffc6a00d9ad1e80fecc78429e63d49c8a64ed7d58beb18e21173b9ce"
    },
    "a900adc6fdafd032d717de45d85a1e85d562d9bdf9152fe0c4764b26a03c414c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\n\nsource_code_version = apprunner.SourceCodeVersion(\n    type=\"type\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\n\nSourceCodeVersion sourceCodeVersion = new SourceCodeVersion {\n    Type = \"type\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\n\nSourceCodeVersion sourceCodeVersion = SourceCodeVersion.builder()\n        .type(\"type\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\n\nsourceCodeVersion := &sourceCodeVersion{\n\ttype: jsii.String(\"type\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst sourceCodeVersion: apprunner.SourceCodeVersion = {\n  type: 'type',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.SourceCodeVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.SourceCodeVersion"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sourceCodeVersion: apprunner.SourceCodeVersion = {\n  type: 'type',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "0a15feff4b051079ae1204ed30ab7d18b7df8ccdb2511fd19024a02dbcf4cd08"
    },
    "1a2817192dec6601d2534e01021582d4a6511763587793a39dc0d5343a7ad65f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\nimport aws_cdk.aws_ecr as ecr\n\n# git_hub_connection: apprunner.GitHubConnection\n# repository: ecr.Repository\n# runtime: apprunner.Runtime\n\nsource_config = apprunner.SourceConfig(\n    code_repository=apprunner.CodeRepositoryProps(\n        code_configuration=apprunner.CodeConfiguration(\n            configuration_source=apprunner.ConfigurationSourceType.REPOSITORY,\n\n            # the properties below are optional\n            configuration_values=apprunner.CodeConfigurationValues(\n                runtime=runtime,\n\n                # the properties below are optional\n                build_command=\"buildCommand\",\n                environment={\n                    \"environment_key\": \"environment\"\n                },\n                port=\"port\",\n                start_command=\"startCommand\"\n            )\n        ),\n        connection=git_hub_connection,\n        repository_url=\"repositoryUrl\",\n        source_code_version=apprunner.SourceCodeVersion(\n            type=\"type\",\n            value=\"value\"\n        )\n    ),\n    ecr_repository=repository,\n    image_repository=apprunner.ImageRepository(\n        image_identifier=\"imageIdentifier\",\n        image_repository_type=apprunner.ImageRepositoryType.ECR_PUBLIC,\n\n        # the properties below are optional\n        image_configuration=apprunner.ImageConfiguration(\n            environment={\n                \"environment_key\": \"environment\"\n            },\n            port=123,\n            start_command=\"startCommand\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\nusing Amazon.CDK.AWS.ECR;\n\nGitHubConnection gitHubConnection;\nRepository repository;\nRuntime runtime;\n\nSourceConfig sourceConfig = new SourceConfig {\n    CodeRepository = new CodeRepositoryProps {\n        CodeConfiguration = new CodeConfiguration {\n            ConfigurationSource = ConfigurationSourceType.REPOSITORY,\n\n            // the properties below are optional\n            ConfigurationValues = new CodeConfigurationValues {\n                Runtime = runtime,\n\n                // the properties below are optional\n                BuildCommand = \"buildCommand\",\n                Environment = new Dictionary<string, string> {\n                    { \"environmentKey\", \"environment\" }\n                },\n                Port = \"port\",\n                StartCommand = \"startCommand\"\n            }\n        },\n        Connection = gitHubConnection,\n        RepositoryUrl = \"repositoryUrl\",\n        SourceCodeVersion = new SourceCodeVersion {\n            Type = \"type\",\n            Value = \"value\"\n        }\n    },\n    EcrRepository = repository,\n    ImageRepository = new ImageRepository {\n        ImageIdentifier = \"imageIdentifier\",\n        ImageRepositoryType = ImageRepositoryType.ECR_PUBLIC,\n\n        // the properties below are optional\n        ImageConfiguration = new ImageConfiguration {\n            Environment = new Dictionary<string, string> {\n                { \"environmentKey\", \"environment\" }\n            },\n            Port = 123,\n            StartCommand = \"startCommand\"\n        }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\nimport software.amazon.awscdk.services.ecr.*;\n\nGitHubConnection gitHubConnection;\nRepository repository;\nRuntime runtime;\n\nSourceConfig sourceConfig = SourceConfig.builder()\n        .codeRepository(CodeRepositoryProps.builder()\n                .codeConfiguration(CodeConfiguration.builder()\n                        .configurationSource(ConfigurationSourceType.REPOSITORY)\n\n                        // the properties below are optional\n                        .configurationValues(CodeConfigurationValues.builder()\n                                .runtime(runtime)\n\n                                // the properties below are optional\n                                .buildCommand(\"buildCommand\")\n                                .environment(Map.of(\n                                        \"environmentKey\", \"environment\"))\n                                .port(\"port\")\n                                .startCommand(\"startCommand\")\n                                .build())\n                        .build())\n                .connection(gitHubConnection)\n                .repositoryUrl(\"repositoryUrl\")\n                .sourceCodeVersion(SourceCodeVersion.builder()\n                        .type(\"type\")\n                        .value(\"value\")\n                        .build())\n                .build())\n        .ecrRepository(repository)\n        .imageRepository(ImageRepository.builder()\n                .imageIdentifier(\"imageIdentifier\")\n                .imageRepositoryType(ImageRepositoryType.ECR_PUBLIC)\n\n                // the properties below are optional\n                .imageConfiguration(ImageConfiguration.builder()\n                        .environment(Map.of(\n                                \"environmentKey\", \"environment\"))\n                        .port(123)\n                        .startCommand(\"startCommand\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\nimport ecr \"github.com/aws-samples/dummy/awscdkawsecr\"\n\nvar gitHubConnection gitHubConnection\nvar repository repository\nvar runtime runtime\n\nsourceConfig := &sourceConfig{\n\tcodeRepository: &codeRepositoryProps{\n\t\tcodeConfiguration: &codeConfiguration{\n\t\t\tconfigurationSource: apprunner.configurationSourceType_REPOSITORY,\n\n\t\t\t// the properties below are optional\n\t\t\tconfigurationValues: &codeConfigurationValues{\n\t\t\t\truntime: runtime,\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tbuildCommand: jsii.String(\"buildCommand\"),\n\t\t\t\tenvironment: map[string]*string{\n\t\t\t\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t\t\t\t},\n\t\t\t\tport: jsii.String(\"port\"),\n\t\t\t\tstartCommand: jsii.String(\"startCommand\"),\n\t\t\t},\n\t\t},\n\t\tconnection: gitHubConnection,\n\t\trepositoryUrl: jsii.String(\"repositoryUrl\"),\n\t\tsourceCodeVersion: &sourceCodeVersion{\n\t\t\ttype: jsii.String(\"type\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tecrRepository: repository,\n\timageRepository: &imageRepository{\n\t\timageIdentifier: jsii.String(\"imageIdentifier\"),\n\t\timageRepositoryType: apprunner.imageRepositoryType_ECR_PUBLIC,\n\n\t\t// the properties below are optional\n\t\timageConfiguration: &imageConfiguration{\n\t\t\tenvironment: map[string]*string{\n\t\t\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t\t\t},\n\t\t\tport: jsii.Number(123),\n\t\t\tstartCommand: jsii.String(\"startCommand\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as ecr from '@aws-cdk/aws-ecr';\n\ndeclare const gitHubConnection: apprunner.GitHubConnection;\ndeclare const repository: ecr.Repository;\ndeclare const runtime: apprunner.Runtime;\nconst sourceConfig: apprunner.SourceConfig = {\n  codeRepository: {\n    codeConfiguration: {\n      configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n\n      // the properties below are optional\n      configurationValues: {\n        runtime: runtime,\n\n        // the properties below are optional\n        buildCommand: 'buildCommand',\n        environment: {\n          environmentKey: 'environment',\n        },\n        port: 'port',\n        startCommand: 'startCommand',\n      },\n    },\n    connection: gitHubConnection,\n    repositoryUrl: 'repositoryUrl',\n    sourceCodeVersion: {\n      type: 'type',\n      value: 'value',\n    },\n  },\n  ecrRepository: repository,\n  imageRepository: {\n    imageIdentifier: 'imageIdentifier',\n    imageRepositoryType: apprunner.ImageRepositoryType.ECR_PUBLIC,\n\n    // the properties below are optional\n    imageConfiguration: {\n      environment: {\n        environmentKey: 'environment',\n      },\n      port: 123,\n      startCommand: 'startCommand',\n    },\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.SourceConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.CodeConfiguration",
        "@aws-cdk/aws-apprunner.CodeConfigurationValues",
        "@aws-cdk/aws-apprunner.CodeRepositoryProps",
        "@aws-cdk/aws-apprunner.ConfigurationSourceType",
        "@aws-cdk/aws-apprunner.ConfigurationSourceType#REPOSITORY",
        "@aws-cdk/aws-apprunner.GitHubConnection",
        "@aws-cdk/aws-apprunner.ImageConfiguration",
        "@aws-cdk/aws-apprunner.ImageRepository",
        "@aws-cdk/aws-apprunner.ImageRepositoryType",
        "@aws-cdk/aws-apprunner.ImageRepositoryType#ECR_PUBLIC",
        "@aws-cdk/aws-apprunner.Runtime",
        "@aws-cdk/aws-apprunner.SourceCodeVersion",
        "@aws-cdk/aws-apprunner.SourceConfig",
        "@aws-cdk/aws-ecr.IRepository"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as ecr from '@aws-cdk/aws-ecr';\n\ndeclare const gitHubConnection: apprunner.GitHubConnection;\ndeclare const repository: ecr.Repository;\ndeclare const runtime: apprunner.Runtime;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sourceConfig: apprunner.SourceConfig = {\n  codeRepository: {\n    codeConfiguration: {\n      configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n\n      // the properties below are optional\n      configurationValues: {\n        runtime: runtime,\n\n        // the properties below are optional\n        buildCommand: 'buildCommand',\n        environment: {\n          environmentKey: 'environment',\n        },\n        port: 'port',\n        startCommand: 'startCommand',\n      },\n    },\n    connection: gitHubConnection,\n    repositoryUrl: 'repositoryUrl',\n    sourceCodeVersion: {\n      type: 'type',\n      value: 'value',\n    },\n  },\n  ecrRepository: repository,\n  imageRepository: {\n    imageIdentifier: 'imageIdentifier',\n    imageRepositoryType: apprunner.ImageRepositoryType.ECR_PUBLIC,\n\n    // the properties below are optional\n    imageConfiguration: {\n      environment: {\n        environmentKey: 'environment',\n      },\n      port: 123,\n      startCommand: 'startCommand',\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 12,
        "75": 47,
        "130": 3,
        "153": 4,
        "169": 4,
        "193": 9,
        "194": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 24,
        "290": 1
      },
      "fqnsFingerprint": "368716a7306f5902c5a52535517b7ba631cef33dd0bdb552339ea3bbd778b647"
    },
    "bac112400552ce4543e5dfebebba6fe01412955f51d4d11fd9f9436c19bfec22": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\n\n\nvpc = ec2.Vpc(self, \"Vpc\",\n    cidr=\"10.0.0.0/16\"\n)\n\nvpc_connector = apprunner.VpcConnector(self, \"VpcConnector\",\n    vpc=vpc,\n    vpc_subnets=vpc.select_subnets(subnet_type=ec2.SubnetType.PUBLIC),\n    vpc_connector_name=\"MyVpcConnector\"\n)\n\napprunner.Service(self, \"Service\",\n    source=apprunner.Source.from_ecr_public(\n        image_configuration=apprunner.ImageConfiguration(port=8000),\n        image_identifier=\"public.ecr.aws/aws-containers/hello-app-runner:latest\"\n    ),\n    vpc_connector=vpc_connector\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\n\n\nVpc vpc = new Vpc(this, \"Vpc\", new VpcProps {\n    Cidr = \"10.0.0.0/16\"\n});\n\nVpcConnector vpcConnector = new VpcConnector(this, \"VpcConnector\", new VpcConnectorProps {\n    Vpc = vpc,\n    VpcSubnets = vpc.SelectSubnets(new SubnetSelection { SubnetType = SubnetType.PUBLIC }),\n    VpcConnectorName = \"MyVpcConnector\"\n});\n\nnew Service(this, \"Service\", new ServiceProps {\n    Source = Source.FromEcrPublic(new EcrPublicProps {\n        ImageConfiguration = new ImageConfiguration { Port = 8000 },\n        ImageIdentifier = \"public.ecr.aws/aws-containers/hello-app-runner:latest\"\n    }),\n    VpcConnector = vpcConnector\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\n\n\nVpc vpc = Vpc.Builder.create(this, \"Vpc\")\n        .cidr(\"10.0.0.0/16\")\n        .build();\n\nVpcConnector vpcConnector = VpcConnector.Builder.create(this, \"VpcConnector\")\n        .vpc(vpc)\n        .vpcSubnets(vpc.selectSubnets(SubnetSelection.builder().subnetType(SubnetType.PUBLIC).build()))\n        .vpcConnectorName(\"MyVpcConnector\")\n        .build();\n\nService.Builder.create(this, \"Service\")\n        .source(Source.fromEcrPublic(EcrPublicProps.builder()\n                .imageConfiguration(ImageConfiguration.builder().port(8000).build())\n                .imageIdentifier(\"public.ecr.aws/aws-containers/hello-app-runner:latest\")\n                .build()))\n        .vpcConnector(vpcConnector)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\n\nvpc := ec2.NewVpc(this, jsii.String(\"Vpc\"), &vpcProps{\n\tcidr: jsii.String(\"10.0.0.0/16\"),\n})\n\nvpcConnector := apprunner.NewVpcConnector(this, jsii.String(\"VpcConnector\"), &vpcConnectorProps{\n\tvpc: vpc,\n\tvpcSubnets: vpc.selectSubnets(&subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t}),\n\tvpcConnectorName: jsii.String(\"MyVpcConnector\"),\n})\n\napprunner.NewService(this, jsii.String(\"Service\"), &serviceProps{\n\tsource: apprunner.source.fromEcrPublic(&ecrPublicProps{\n\t\timageConfiguration: &imageConfiguration{\n\t\t\tport: jsii.Number(8000),\n\t\t},\n\t\timageIdentifier: jsii.String(\"public.ecr.aws/aws-containers/hello-app-runner:latest\"),\n\t}),\n\tvpcConnector: vpcConnector,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\n\nconst vpc = new ec2.Vpc(this, 'Vpc', {\n  cidr: '10.0.0.0/16',\n});\n\nconst vpcConnector = new apprunner.VpcConnector(this, 'VpcConnector', {\n  vpc,\n  vpcSubnets: vpc.selectSubnets({ subnetType: ec2.SubnetType.PUBLIC }),\n  vpcConnectorName: 'MyVpcConnector',\n});\n\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n  vpcConnector,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.VpcConnector"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.EcrPublicProps",
        "@aws-cdk/aws-apprunner.IVpcConnector",
        "@aws-cdk/aws-apprunner.ImageConfiguration",
        "@aws-cdk/aws-apprunner.Service",
        "@aws-cdk/aws-apprunner.ServiceProps",
        "@aws-cdk/aws-apprunner.Source",
        "@aws-cdk/aws-apprunner.Source#fromEcrPublic",
        "@aws-cdk/aws-apprunner.VpcConnector",
        "@aws-cdk/aws-apprunner.VpcConnectorProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'Vpc', {\n  cidr: '10.0.0.0/16',\n});\n\nconst vpcConnector = new apprunner.VpcConnector(this, 'VpcConnector', {\n  vpc,\n  vpcSubnets: vpc.selectSubnets({ subnetType: ec2.SubnetType.PUBLIC }),\n  vpcConnectorName: 'MyVpcConnector',\n});\n\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n  vpcConnector,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 27,
        "104": 3,
        "193": 6,
        "194": 8,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "1eefb12a9c7259866a86dd0ae8e25b1bc21831e4f1fffd1523094303d48f7b7c"
    },
    "37abd90cd2ca196187620e0a8a9a3a463062d469b68fdba1e3d527ef40a591c0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apprunner as apprunner\nimport aws_cdk.aws_ec2 as ec2\n\n# security_group: ec2.SecurityGroup\n\nvpc_connector_attributes = apprunner.VpcConnectorAttributes(\n    security_groups=[security_group],\n    vpc_connector_arn=\"vpcConnectorArn\",\n    vpc_connector_name=\"vpcConnectorName\",\n    vpc_connector_revision=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppRunner;\nusing Amazon.CDK.AWS.EC2;\n\nSecurityGroup securityGroup;\n\nVpcConnectorAttributes vpcConnectorAttributes = new VpcConnectorAttributes {\n    SecurityGroups = new [] { securityGroup },\n    VpcConnectorArn = \"vpcConnectorArn\",\n    VpcConnectorName = \"vpcConnectorName\",\n    VpcConnectorRevision = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apprunner.*;\nimport software.amazon.awscdk.services.ec2.*;\n\nSecurityGroup securityGroup;\n\nVpcConnectorAttributes vpcConnectorAttributes = VpcConnectorAttributes.builder()\n        .securityGroups(List.of(securityGroup))\n        .vpcConnectorArn(\"vpcConnectorArn\")\n        .vpcConnectorName(\"vpcConnectorName\")\n        .vpcConnectorRevision(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apprunner \"github.com/aws-samples/dummy/awscdkawsapprunner\"\nimport ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar securityGroup securityGroup\n\nvpcConnectorAttributes := &vpcConnectorAttributes{\n\tsecurityGroups: []iSecurityGroup{\n\t\tsecurityGroup,\n\t},\n\tvpcConnectorArn: jsii.String(\"vpcConnectorArn\"),\n\tvpcConnectorName: jsii.String(\"vpcConnectorName\"),\n\tvpcConnectorRevision: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const securityGroup: ec2.SecurityGroup;\nconst vpcConnectorAttributes: apprunner.VpcConnectorAttributes = {\n  securityGroups: [securityGroup],\n  vpcConnectorArn: 'vpcConnectorArn',\n  vpcConnectorName: 'vpcConnectorName',\n  vpcConnectorRevision: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.VpcConnectorAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.VpcConnectorAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const securityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst vpcConnectorAttributes: apprunner.VpcConnectorAttributes = {\n  securityGroups: [securityGroup],\n  vpcConnectorArn: 'vpcConnectorArn',\n  vpcConnectorName: 'vpcConnectorName',\n  vpcConnectorRevision: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 13,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "859cf426d07bf4620ad9adffa1f91d2986b5dff4f4904712da9227ea5af1271c"
    },
    "49b3e9372d64276b62d5cc128ac52f5bd70f8da54396fbc9284bea96869c2076": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\n\n\nvpc = ec2.Vpc(self, \"Vpc\",\n    cidr=\"10.0.0.0/16\"\n)\n\nvpc_connector = apprunner.VpcConnector(self, \"VpcConnector\",\n    vpc=vpc,\n    vpc_subnets=vpc.select_subnets(subnet_type=ec2.SubnetType.PUBLIC),\n    vpc_connector_name=\"MyVpcConnector\"\n)\n\napprunner.Service(self, \"Service\",\n    source=apprunner.Source.from_ecr_public(\n        image_configuration=apprunner.ImageConfiguration(port=8000),\n        image_identifier=\"public.ecr.aws/aws-containers/hello-app-runner:latest\"\n    ),\n    vpc_connector=vpc_connector\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\n\n\nVpc vpc = new Vpc(this, \"Vpc\", new VpcProps {\n    Cidr = \"10.0.0.0/16\"\n});\n\nVpcConnector vpcConnector = new VpcConnector(this, \"VpcConnector\", new VpcConnectorProps {\n    Vpc = vpc,\n    VpcSubnets = vpc.SelectSubnets(new SubnetSelection { SubnetType = SubnetType.PUBLIC }),\n    VpcConnectorName = \"MyVpcConnector\"\n});\n\nnew Service(this, \"Service\", new ServiceProps {\n    Source = Source.FromEcrPublic(new EcrPublicProps {\n        ImageConfiguration = new ImageConfiguration { Port = 8000 },\n        ImageIdentifier = \"public.ecr.aws/aws-containers/hello-app-runner:latest\"\n    }),\n    VpcConnector = vpcConnector\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\n\n\nVpc vpc = Vpc.Builder.create(this, \"Vpc\")\n        .cidr(\"10.0.0.0/16\")\n        .build();\n\nVpcConnector vpcConnector = VpcConnector.Builder.create(this, \"VpcConnector\")\n        .vpc(vpc)\n        .vpcSubnets(vpc.selectSubnets(SubnetSelection.builder().subnetType(SubnetType.PUBLIC).build()))\n        .vpcConnectorName(\"MyVpcConnector\")\n        .build();\n\nService.Builder.create(this, \"Service\")\n        .source(Source.fromEcrPublic(EcrPublicProps.builder()\n                .imageConfiguration(ImageConfiguration.builder().port(8000).build())\n                .imageIdentifier(\"public.ecr.aws/aws-containers/hello-app-runner:latest\")\n                .build()))\n        .vpcConnector(vpcConnector)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\n\nvpc := ec2.NewVpc(this, jsii.String(\"Vpc\"), &vpcProps{\n\tcidr: jsii.String(\"10.0.0.0/16\"),\n})\n\nvpcConnector := apprunner.NewVpcConnector(this, jsii.String(\"VpcConnector\"), &vpcConnectorProps{\n\tvpc: vpc,\n\tvpcSubnets: vpc.selectSubnets(&subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t}),\n\tvpcConnectorName: jsii.String(\"MyVpcConnector\"),\n})\n\napprunner.NewService(this, jsii.String(\"Service\"), &serviceProps{\n\tsource: apprunner.source.fromEcrPublic(&ecrPublicProps{\n\t\timageConfiguration: &imageConfiguration{\n\t\t\tport: jsii.Number(8000),\n\t\t},\n\t\timageIdentifier: jsii.String(\"public.ecr.aws/aws-containers/hello-app-runner:latest\"),\n\t}),\n\tvpcConnector: vpcConnector,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\n\nconst vpc = new ec2.Vpc(this, 'Vpc', {\n  cidr: '10.0.0.0/16',\n});\n\nconst vpcConnector = new apprunner.VpcConnector(this, 'VpcConnector', {\n  vpc,\n  vpcSubnets: vpc.selectSubnets({ subnetType: ec2.SubnetType.PUBLIC }),\n  vpcConnectorName: 'MyVpcConnector',\n});\n\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n  vpcConnector,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apprunner.VpcConnectorProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apprunner.EcrPublicProps",
        "@aws-cdk/aws-apprunner.IVpcConnector",
        "@aws-cdk/aws-apprunner.ImageConfiguration",
        "@aws-cdk/aws-apprunner.Service",
        "@aws-cdk/aws-apprunner.ServiceProps",
        "@aws-cdk/aws-apprunner.Source",
        "@aws-cdk/aws-apprunner.Source#fromEcrPublic",
        "@aws-cdk/aws-apprunner.VpcConnector",
        "@aws-cdk/aws-apprunner.VpcConnectorProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'Vpc', {\n  cidr: '10.0.0.0/16',\n});\n\nconst vpcConnector = new apprunner.VpcConnector(this, 'VpcConnector', {\n  vpc,\n  vpcSubnets: vpc.selectSubnets({ subnetType: ec2.SubnetType.PUBLIC }),\n  vpcConnectorName: 'MyVpcConnector',\n});\n\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n  vpcConnector,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 27,
        "104": 3,
        "193": 6,
        "194": 8,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "1eefb12a9c7259866a86dd0ae8e25b1bc21831e4f1fffd1523094303d48f7b7c"
    }
  }
}