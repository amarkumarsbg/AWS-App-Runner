{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@aws-cdk/aws-ec2": "1.172.0",
    "@aws-cdk/aws-ecr": "1.172.0",
    "@aws-cdk/aws-ecr-assets": "1.172.0",
    "@aws-cdk/aws-iam": "1.172.0",
    "@aws-cdk/core": "1.172.0",
    "constructs": "^3.3.69"
  },
  "dependencyClosure": {
    "@aws-cdk/assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.Assets",
          "packageId": "Amazon.CDK.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.assets"
        },
        "js": {
          "npm": "@aws-cdk/assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.assets",
          "module": "aws_cdk.assets"
        }
      }
    },
    "@aws-cdk/aws-cloudwatch": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudWatch",
          "packageId": "Amazon.CDK.AWS.CloudWatch"
        },
        "java": {
          "maven": {
            "artifactId": "cloudwatch",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudwatch"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudwatch"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudwatch",
          "module": "aws_cdk.aws_cloudwatch"
        }
      }
    },
    "@aws-cdk/aws-ec2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EC2",
          "packageId": "Amazon.CDK.AWS.EC2"
        },
        "java": {
          "maven": {
            "artifactId": "ec2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ec2"
        },
        "js": {
          "npm": "@aws-cdk/aws-ec2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ec2",
          "module": "aws_cdk.aws_ec2"
        }
      }
    },
    "@aws-cdk/aws-ecr": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ECR",
          "packageId": "Amazon.CDK.AWS.ECR"
        },
        "java": {
          "maven": {
            "artifactId": "ecr",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr",
          "module": "aws_cdk.aws_ecr"
        }
      }
    },
    "@aws-cdk/aws-ecr-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Ecr.Assets",
          "packageId": "Amazon.CDK.ECR.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "ecr-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr-assets",
          "module": "aws_cdk.aws_ecr_assets"
        }
      }
    },
    "@aws-cdk/aws-events": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events"
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      }
    },
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      }
    },
    "@aws-cdk/aws-kms": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KMS",
          "packageId": "Amazon.CDK.AWS.KMS"
        },
        "java": {
          "maven": {
            "artifactId": "kms",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kms"
        },
        "js": {
          "npm": "@aws-cdk/aws-kms"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kms",
          "module": "aws_cdk.aws_kms"
        }
      }
    },
    "@aws-cdk/aws-logs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Logs",
          "packageId": "Amazon.CDK.AWS.Logs"
        },
        "java": {
          "maven": {
            "artifactId": "logs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.logs"
        },
        "js": {
          "npm": "@aws-cdk/aws-logs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-logs",
          "module": "aws_cdk.aws_logs"
        }
      }
    },
    "@aws-cdk/aws-s3": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3",
          "packageId": "Amazon.CDK.AWS.S3"
        },
        "java": {
          "maven": {
            "artifactId": "s3",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3",
          "module": "aws_cdk.aws_s3"
        }
      }
    },
    "@aws-cdk/aws-s3-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3.Assets",
          "packageId": "Amazon.CDK.AWS.S3.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "s3-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3-assets",
          "module": "aws_cdk.aws_s3_assets"
        }
      }
    },
    "@aws-cdk/aws-ssm": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SSM",
          "packageId": "Amazon.CDK.AWS.SSM"
        },
        "java": {
          "maven": {
            "artifactId": "ssm",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ssm"
        },
        "js": {
          "npm": "@aws-cdk/aws-ssm"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ssm",
          "module": "aws_cdk.aws_ssm"
        }
      }
    },
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "The CDK Construct Library for AWS::AppRunner",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.67.0 (build 2c027f5)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "AWS::AppRunner",
    "aws-apprunner"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "@aws-cdk/aws-apprunner",
  "readme": {
    "markdown": "# AWS::AppRunner Construct Library\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cfn-resources: Stable](https://img.shields.io/badge/cfn--resources-stable-success.svg?style=for-the-badge)\n\n> All classes with the `Cfn` prefix in this module ([CFN Resources]) are always stable and safe to use.\n>\n> [CFN Resources]: https://docs.aws.amazon.com/cdk/latest/guide/constructs.html#constructs_lib\n\n![cdk-constructs: Experimental](https://img.shields.io/badge/cdk--constructs-experimental-important.svg?style=for-the-badge)\n\n> The APIs of higher level constructs in this module are experimental and under active development.\n> They are subject to non-backward compatible changes or removal in any future version. These are\n> not subject to the [Semantic Versioning](https://semver.org/) model and breaking changes will be\n> announced in the release notes. This means that while you may use them, you may need to update\n> your source code when upgrading to a newer version of this package.\n\n---\n\n<!--END STABILITY BANNER-->\n\nThis module is part of the [AWS Cloud Development Kit](https://github.com/aws/aws-cdk) project.\n\n```ts nofixture\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n```\n\n## Introduction\n\nAWS App Runner is a fully managed service that makes it easy for developers to quickly deploy containerized web applications and APIs, at scale and with no prior infrastructure experience required. Start with your source code or a container image. App Runner automatically builds and deploys the web application and load balances traffic with encryption. App Runner also scales up or down automatically to meet your traffic needs. With App Runner, rather than thinking about servers or scaling, you have more time to focus on your applications.\n\n## Service\n\nThe `Service` construct allows you to create AWS App Runner services with `ECR Public`, `ECR` or `Github` with the `source` property in the following scenarios:\n\n- `Source.fromEcr()` - To define the source repository from `ECR`.\n- `Source.fromEcrPublic()` - To define the source repository from `ECR Public`.\n- `Source.fromGitHub()` - To define the source repository from the `Github repository`.\n- `Source.fromAsset()` - To define the source from local asset directory.\n\n\n## ECR Public\n\nTo create a `Service` with ECR Public:\n\n```ts\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n});\n```\n\n## ECR\n\nTo create a `Service` from an existing ECR repository:\n\n```ts\nimport * as ecr from '@aws-cdk/aws-ecr';\n\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcr({\n    imageConfiguration: { port: 80 },\n    repository: ecr.Repository.fromRepositoryName(this, 'NginxRepository', 'nginx'),\n    tagOrDigest: 'latest',\n  }),\n});\n```\n\nTo create a `Service` from local docker image asset directory  built and pushed to Amazon ECR:\n\n```ts\nimport * as assets from '@aws-cdk/aws-ecr-assets';\n\nconst imageAsset = new assets.DockerImageAsset(this, 'ImageAssets', {\n  directory: path.join(__dirname, './docker.assets'),\n});\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromAsset({\n    imageConfiguration: { port: 8000 },\n    asset: imageAsset,\n  }),\n});\n```\n\n## GitHub\n\nTo create a `Service` from the GitHub repository, you need to specify an existing App Runner `Connection`.\n\nSee [Managing App Runner connections](https://docs.aws.amazon.com/apprunner/latest/dg/manage-connections.html) for more details.\n\n```ts\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});\n```\n\nUse `codeConfigurationValues` to override configuration values with the `API` configuration source type.\n\n```ts\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.API,\n    codeConfigurationValues: {\n      runtime: apprunner.Runtime.PYTHON_3,\n      port: '8000',\n      startCommand: 'python app.py',\n      buildCommand: 'yum install -y pycairo && pip install -r requirements.txt',\n    },\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});\n```\n\n## IAM Roles\n\nYou are allowed to define `instanceRole` and `accessRole` for the `Service`.\n\n`instanceRole` - The IAM role that provides permissions to your App Runner service. These are permissions that\nyour code needs when it calls any AWS APIs.\n\n`accessRole` - The IAM role that grants the App Runner service access to a source repository. It's required for\nECR image repositories (but not for ECR Public repositories). If not defined, a new access role will be generated\nwhen required.\n\nSee [App Runner IAM Roles](https://docs.aws.amazon.com/apprunner/latest/dg/security_iam_service-with-iam.html#security_iam_service-with-iam-roles) for more details.\n\n## VPC Connector\n\nTo associate an App Runner service with a custom VPC, define `vpcConnector` for the service.\n\n```ts\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nconst vpc = new ec2.Vpc(this, 'Vpc', {\n  cidr: '10.0.0.0/16',\n});\n\nconst vpcConnector = new apprunner.VpcConnector(this, 'VpcConnector', {\n  vpc,\n  vpcSubnets: vpc.selectSubnets({ subnetType: ec2.SubnetType.PUBLIC }),\n  vpcConnectorName: 'MyVpcConnector',\n});\n\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n  vpcConnector,\n});\n```\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-apprunner",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "assemblyOriginatorKeyFile": "../../key.snk",
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.AppRunner",
      "packageId": "Amazon.CDK.AWS.AppRunner",
      "signAssembly": true
    },
    "java": {
      "maven": {
        "artifactId": "apprunner",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.apprunner"
    },
    "js": {
      "npm": "@aws-cdk/aws-apprunner"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 1"
      ],
      "distName": "aws-cdk.aws-apprunner",
      "module": "aws_cdk.aws_apprunner"
    }
  },
  "types": {
    "@aws-cdk/aws-apprunner.AssetProps": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties of the image repository for `Source.fromAsset()`.",
        "example": "import * as assets from '@aws-cdk/aws-ecr-assets';\n\nconst imageAsset = new assets.DockerImageAsset(this, 'ImageAssets', {\n  directory: path.join(__dirname, './docker.assets'),\n});\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromAsset({\n    imageConfiguration: { port: 8000 },\n    asset: imageAsset,\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.AssetProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 236
      },
      "name": "AssetProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Represents the docker image asset."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 246
          },
          "name": "asset",
          "type": {
            "fqn": "@aws-cdk/aws-ecr-assets.DockerImageAsset"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no image configuration will be passed. The default `port` will be 8080.",
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imageconfiguration.html#cfn-apprunner-service-imageconfiguration-port",
            "stability": "experimental",
            "summary": "The image configuration for the image built from the asset."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 242
          },
          "name": "imageConfiguration",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.ImageConfiguration"
          }
        }
      ],
      "symbolId": "lib/service:AssetProps"
    },
    "@aws-cdk/aws-apprunner.AssetSource": {
      "assembly": "@aws-cdk/aws-apprunner",
      "base": "@aws-cdk/aws-apprunner.Source",
      "docs": {
        "stability": "experimental",
        "summary": "Represents the source from local assets.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as ecr_assets from '@aws-cdk/aws-ecr-assets';\n\ndeclare const dockerImageAsset: ecr_assets.DockerImageAsset;\nconst assetSource = new apprunner.AssetSource({\n  asset: dockerImageAsset,\n\n  // the properties below are optional\n  imageConfiguration: {\n    environment: {\n      environmentKey: 'environment',\n    },\n    port: 123,\n    startCommand: 'startCommand',\n  },\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.AssetSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/service.ts",
          "line": 358
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.AssetProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 356
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Called when the Job is initialized to allow this object to bind."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 362
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-apprunner.Source",
          "parameters": [
            {
              "name": "_scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.SourceConfig"
            }
          }
        }
      ],
      "name": "AssetSource",
      "symbolId": "lib/service:AssetSource"
    },
    "@aws-cdk/aws-apprunner.CfnObservabilityConfiguration": {
      "assembly": "@aws-cdk/aws-apprunner",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::AppRunner::ObservabilityConfiguration",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-observabilityconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Specify an AWS App Runner observability configuration by using the `AWS::AppRunner::ObservabilityConfiguration` resource in an AWS CloudFormation template.\n\nThe `AWS::AppRunner::ObservabilityConfiguration` resource is an AWS App Runner resource type that specifies an App Runner observability configuration.\n\nApp Runner requires this resource when you specify App Runner services and you want to enable non-default observability features. You can share an observability configuration across multiple services.\n\nCreate multiple revisions of a configuration by specifying this resource multiple times using the same `ObservabilityConfigurationName` . App Runner creates multiple resources with incremental `ObservabilityConfigurationRevision` values. When you specify a service and configure an observability configuration resource, the service uses the latest active revision of the observability configuration by default. You can optionally configure the service to use a specific revision.\n\nThe observability configuration resource is designed to configure multiple features (currently one feature, tracing). This resource takes optional parameters that describe the configuration of these features (currently one parameter, `TraceConfiguration` ). If you don't specify a feature parameter, App Runner doesn't enable the feature.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::AppRunner::ObservabilityConfiguration`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst cfnObservabilityConfiguration = new apprunner.CfnObservabilityConfiguration(this, 'MyCfnObservabilityConfiguration', /* all optional props */ {\n  observabilityConfigurationName: 'observabilityConfigurationName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  traceConfiguration: {\n    vendor: 'vendor',\n  },\n});"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnObservabilityConfiguration",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::AppRunner::ObservabilityConfiguration`."
        },
        "locationInModule": {
          "filename": "lib/apprunner.generated.ts",
          "line": 195
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.CfnObservabilityConfigurationProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 118
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 212
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 225
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnObservabilityConfiguration",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 122
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Latest"
            },
            "remarks": "It's set to `false` otherwise.",
            "stability": "external",
            "summary": "It's set to `true` for the configuration with the highest `Revision` among all configurations that share the same `ObservabilityConfigurationName` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 147
          },
          "name": "attrLatest",
          "type": {
            "fqn": "@aws-cdk/core.IResolvable"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "ObservabilityConfigurationArn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of this observability configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 153
          },
          "name": "attrObservabilityConfigurationArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "ObservabilityConfigurationRevision"
            },
            "remarks": "It's unique among all the active configurations ( `\"Status\": \"ACTIVE\"` ) that share the same `ObservabilityConfigurationName` .",
            "stability": "external",
            "summary": "The revision of this observability configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 159
          },
          "name": "attrObservabilityConfigurationRevision",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 217
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-observabilityconfiguration.html#cfn-apprunner-observabilityconfiguration-tags"
            },
            "remarks": "A tag is a key-value pair.",
            "stability": "external",
            "summary": "A list of metadata items that you can associate with your observability configuration resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 179
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-observabilityconfiguration.html#cfn-apprunner-observabilityconfiguration-observabilityconfigurationname"
            },
            "remarks": "When you use it for the first time in an AWS Region , App Runner creates revision number `1` of this name. When you use the same name in subsequent calls, App Runner creates incremental revisions of the configuration.\n\n> The name `DefaultConfiguration` is reserved. You can't use it to create a new observability configuration, and you can't create a revision of it.\n>\n> When you want to use your own observability configuration for your App Runner service, *create a configuration with a different name* , and then provide it when you create or update your service.\n\nIf you don't specify a name, AWS CloudFormation generates a name for your observability configuration.",
            "stability": "external",
            "summary": "A name for the observability configuration."
          },
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 172
          },
          "name": "observabilityConfigurationName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-observabilityconfiguration.html#cfn-apprunner-observabilityconfiguration-traceconfiguration"
            },
            "remarks": "If you don't specify it, App Runner doesn't enable tracing.",
            "stability": "external",
            "summary": "The configuration of the tracing feature within this observability configuration."
          },
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 186
          },
          "name": "traceConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnObservabilityConfiguration.TraceConfigurationProperty"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnObservabilityConfiguration"
    },
    "@aws-cdk/aws-apprunner.CfnObservabilityConfiguration.TraceConfigurationProperty": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-observabilityconfiguration-traceconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Describes the configuration of the tracing feature within an AWS App Runner observability configuration.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst traceConfigurationProperty: apprunner.CfnObservabilityConfiguration.TraceConfigurationProperty = {\n  vendor: 'vendor',\n};"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnObservabilityConfiguration.TraceConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 239
      },
      "name": "TraceConfigurationProperty",
      "namespace": "CfnObservabilityConfiguration",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-observabilityconfiguration-traceconfiguration.html#cfn-apprunner-observabilityconfiguration-traceconfiguration-vendor"
            },
            "stability": "external",
            "summary": "The implementation provider chosen for tracing App Runner services."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 245
          },
          "name": "vendor",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnObservabilityConfiguration.TraceConfigurationProperty"
    },
    "@aws-cdk/aws-apprunner.CfnObservabilityConfigurationProps": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-observabilityconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnObservabilityConfiguration`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst cfnObservabilityConfigurationProps: apprunner.CfnObservabilityConfigurationProps = {\n  observabilityConfigurationName: 'observabilityConfigurationName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  traceConfiguration: {\n    vendor: 'vendor',\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnObservabilityConfigurationProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 19
      },
      "name": "CfnObservabilityConfigurationProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-observabilityconfiguration.html#cfn-apprunner-observabilityconfiguration-observabilityconfigurationname"
            },
            "remarks": "When you use it for the first time in an AWS Region , App Runner creates revision number `1` of this name. When you use the same name in subsequent calls, App Runner creates incremental revisions of the configuration.\n\n> The name `DefaultConfiguration` is reserved. You can't use it to create a new observability configuration, and you can't create a revision of it.\n>\n> When you want to use your own observability configuration for your App Runner service, *create a configuration with a different name* , and then provide it when you create or update your service.\n\nIf you don't specify a name, AWS CloudFormation generates a name for your observability configuration.",
            "stability": "external",
            "summary": "A name for the observability configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 32
          },
          "name": "observabilityConfigurationName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-observabilityconfiguration.html#cfn-apprunner-observabilityconfiguration-tags"
            },
            "remarks": "A tag is a key-value pair.",
            "stability": "external",
            "summary": "A list of metadata items that you can associate with your observability configuration resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 39
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnTag"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-observabilityconfiguration.html#cfn-apprunner-observabilityconfiguration-traceconfiguration"
            },
            "remarks": "If you don't specify it, App Runner doesn't enable tracing.",
            "stability": "external",
            "summary": "The configuration of the tracing feature within this observability configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 46
          },
          "name": "traceConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnObservabilityConfiguration.TraceConfigurationProperty"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnObservabilityConfigurationProps"
    },
    "@aws-cdk/aws-apprunner.CfnService": {
      "assembly": "@aws-cdk/aws-apprunner",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::AppRunner::Service",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-service.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Specify an AWS App Runner service by using the `AWS::AppRunner::Service` resource in an AWS CloudFormation template.\n\nThe `AWS::AppRunner::Service` resource is an AWS App Runner resource type that specifies an App Runner service.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::AppRunner::Service`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst cfnService = new apprunner.CfnService(this, 'MyCfnService', {\n  sourceConfiguration: {\n    authenticationConfiguration: {\n      accessRoleArn: 'accessRoleArn',\n      connectionArn: 'connectionArn',\n    },\n    autoDeploymentsEnabled: false,\n    codeRepository: {\n      repositoryUrl: 'repositoryUrl',\n      sourceCodeVersion: {\n        type: 'type',\n        value: 'value',\n      },\n\n      // the properties below are optional\n      codeConfiguration: {\n        configurationSource: 'configurationSource',\n\n        // the properties below are optional\n        codeConfigurationValues: {\n          runtime: 'runtime',\n\n          // the properties below are optional\n          buildCommand: 'buildCommand',\n          port: 'port',\n          runtimeEnvironmentVariables: [{\n            name: 'name',\n            value: 'value',\n          }],\n          startCommand: 'startCommand',\n        },\n      },\n    },\n    imageRepository: {\n      imageIdentifier: 'imageIdentifier',\n      imageRepositoryType: 'imageRepositoryType',\n\n      // the properties below are optional\n      imageConfiguration: {\n        port: 'port',\n        runtimeEnvironmentVariables: [{\n          name: 'name',\n          value: 'value',\n        }],\n        startCommand: 'startCommand',\n      },\n    },\n  },\n\n  // the properties below are optional\n  autoScalingConfigurationArn: 'autoScalingConfigurationArn',\n  encryptionConfiguration: {\n    kmsKey: 'kmsKey',\n  },\n  healthCheckConfiguration: {\n    healthyThreshold: 123,\n    interval: 123,\n    path: 'path',\n    protocol: 'protocol',\n    timeout: 123,\n    unhealthyThreshold: 123,\n  },\n  instanceConfiguration: {\n    cpu: 'cpu',\n    instanceRoleArn: 'instanceRoleArn',\n    memory: 'memory',\n  },\n  networkConfiguration: {\n    egressConfiguration: {\n      egressType: 'egressType',\n\n      // the properties below are optional\n      vpcConnectorArn: 'vpcConnectorArn',\n    },\n  },\n  observabilityConfiguration: {\n    observabilityEnabled: false,\n\n    // the properties below are optional\n    observabilityConfigurationArn: 'observabilityConfigurationArn',\n  },\n  serviceName: 'serviceName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnService",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::AppRunner::Service`."
        },
        "locationInModule": {
          "filename": "lib/apprunner.generated.ts",
          "line": 590
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.CfnServiceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 460
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 615
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 634
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnService",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 464
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "ServiceArn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of this service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 489
          },
          "name": "attrServiceArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "ServiceId"
            },
            "remarks": "It's unique within the AWS Region .",
            "stability": "external",
            "summary": "An ID that App Runner generated for this service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 495
          },
          "name": "attrServiceId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "ServiceUrl"
            },
            "remarks": "You can use this URL to access your service web application.",
            "stability": "external",
            "summary": "A subdomain URL that App Runner generated for this service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 501
          },
          "name": "attrServiceUrl",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Status"
            },
            "remarks": "- `CREATE_FAILED` – The service failed to create. To troubleshoot this failure, read the failure events and logs, change any parameters that need to be fixed, and retry the call to create the service.\n\nThe failed service isn't usable, and still counts towards your service quota. When you're done analyzing the failure, delete the service.\n- `DELETE_FAILED` – The service failed to delete and can't be successfully recovered. Retry the service deletion call to ensure that all related resources are removed.",
            "stability": "external",
            "summary": "The current state of the App Runner service. These particular values mean the following."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 512
          },
          "name": "attrStatus",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 620
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-service.html#cfn-apprunner-service-tags"
            },
            "remarks": "A tag is a key-value pair.",
            "stability": "external",
            "summary": "An optional list of metadata items that you can associate with the App Runner service resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 581
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-service.html#cfn-apprunner-service-sourceconfiguration"
            },
            "remarks": "It can be a code or an image repository.",
            "stability": "external",
            "summary": "The source to deploy to the App Runner service."
          },
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 519
          },
          "name": "sourceConfiguration",
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnService.SourceConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-service.html#cfn-apprunner-service-autoscalingconfigurationarn"
            },
            "remarks": "If not provided, App Runner associates the latest revision of a default auto scaling configuration.\n\nSpecify an ARN with a name and a revision number to associate that revision. For example: `arn:aws:apprunner:us-east-1:123456789012:autoscalingconfiguration/high-availability/3`\n\nSpecify just the name to associate the latest revision. For example: `arn:aws:apprunner:us-east-1:123456789012:autoscalingconfiguration/high-availability`",
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of an App Runner automatic scaling configuration resource that you want to associate with your service."
          },
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 530
          },
          "name": "autoScalingConfigurationArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-service.html#cfn-apprunner-service-encryptionconfiguration"
            },
            "remarks": "By default, App Runner uses an AWS managed key .",
            "stability": "external",
            "summary": "An optional custom encryption key that App Runner uses to encrypt the copy of your source repository that it maintains and your service logs."
          },
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 537
          },
          "name": "encryptionConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnService.EncryptionConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-service.html#cfn-apprunner-service-healthcheckconfiguration"
            },
            "stability": "external",
            "summary": "The settings for the health check that AWS App Runner performs to monitor the health of the App Runner service."
          },
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 544
          },
          "name": "healthCheckConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnService.HealthCheckConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-service.html#cfn-apprunner-service-instanceconfiguration"
            },
            "stability": "external",
            "summary": "The runtime configuration of instances (scaling units) of your service."
          },
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 551
          },
          "name": "instanceConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnService.InstanceConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-service.html#cfn-apprunner-service-networkconfiguration"
            },
            "stability": "external",
            "summary": "Configuration settings related to network traffic of the web application that the App Runner service runs."
          },
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 558
          },
          "name": "networkConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnService.NetworkConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-service.html#cfn-apprunner-service-observabilityconfiguration"
            },
            "stability": "external",
            "summary": "The observability configuration of your service."
          },
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 565
          },
          "name": "observabilityConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnService.ServiceObservabilityConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-service.html#cfn-apprunner-service-servicename"
            },
            "remarks": "It must be unique across all the running App Runner services in your AWS account in the AWS Region .\n\nIf you don't specify a name, AWS CloudFormation generates a name for your service.",
            "stability": "external",
            "summary": "A name for the App Runner service."
          },
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 574
          },
          "name": "serviceName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnService"
    },
    "@aws-cdk/aws-apprunner.CfnService.AuthenticationConfigurationProperty": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-authenticationconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The specific resource depends on the repository provider.",
        "stability": "external",
        "summary": "Describes resources needed to authenticate access to some source repositories.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst authenticationConfigurationProperty: apprunner.CfnService.AuthenticationConfigurationProperty = {\n  accessRoleArn: 'accessRoleArn',\n  connectionArn: 'connectionArn',\n};"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnService.AuthenticationConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 648
      },
      "name": "AuthenticationConfigurationProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-authenticationconfiguration.html#cfn-apprunner-service-authenticationconfiguration-accessrolearn"
            },
            "remarks": "It's required for ECR image repositories (but not for ECR Public repositories).",
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the IAM role that grants the App Runner service access to a source repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 654
          },
          "name": "accessRoleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-authenticationconfiguration.html#cfn-apprunner-service-authenticationconfiguration-connectionarn"
            },
            "remarks": "It's required for GitHub code repositories.",
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the App Runner connection that enables the App Runner service to connect to a source repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 660
          },
          "name": "connectionArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnService.AuthenticationConfigurationProperty"
    },
    "@aws-cdk/aws-apprunner.CfnService.CodeConfigurationProperty": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-codeconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Describes the configuration that AWS App Runner uses to build and run an App Runner service from a source code repository.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst codeConfigurationProperty: apprunner.CfnService.CodeConfigurationProperty = {\n  configurationSource: 'configurationSource',\n\n  // the properties below are optional\n  codeConfigurationValues: {\n    runtime: 'runtime',\n\n    // the properties below are optional\n    buildCommand: 'buildCommand',\n    port: 'port',\n    runtimeEnvironmentVariables: [{\n      name: 'name',\n      value: 'value',\n    }],\n    startCommand: 'startCommand',\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnService.CodeConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 724
      },
      "name": "CodeConfigurationProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-codeconfiguration.html#cfn-apprunner-service-codeconfiguration-configurationsource"
            },
            "remarks": "- `REPOSITORY` – App Runner reads configuration values from the `apprunner.yaml` file in the source code repository and ignores `CodeConfigurationValues` .\n- `API` – App Runner uses configuration values provided in `CodeConfigurationValues` and ignores the `apprunner.yaml` file in the source code repository.",
            "stability": "external",
            "summary": "The source of the App Runner configuration. Values are interpreted as follows:."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 739
          },
          "name": "configurationSource",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-codeconfiguration.html#cfn-apprunner-service-codeconfiguration-codeconfigurationvalues"
            },
            "remarks": "Use it to quickly launch an App Runner service without providing a `apprunner.yaml` file in the source code repository (or ignoring the file if it exists).",
            "stability": "external",
            "summary": "The basic configuration for building and running the App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 730
          },
          "name": "codeConfigurationValues",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnService.CodeConfigurationValuesProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnService.CodeConfigurationProperty"
    },
    "@aws-cdk/aws-apprunner.CfnService.CodeConfigurationValuesProperty": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-codeconfigurationvalues.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "This type doesn't support the full set of possible configuration options. Fur full configuration capabilities, use a `apprunner.yaml` file in the source code repository.",
        "stability": "external",
        "summary": "Describes the basic configuration needed for building and running an AWS App Runner service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst codeConfigurationValuesProperty: apprunner.CfnService.CodeConfigurationValuesProperty = {\n  runtime: 'runtime',\n\n  // the properties below are optional\n  buildCommand: 'buildCommand',\n  port: 'port',\n  runtimeEnvironmentVariables: [{\n    name: 'name',\n    value: 'value',\n  }],\n  startCommand: 'startCommand',\n};"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnService.CodeConfigurationValuesProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 804
      },
      "name": "CodeConfigurationValuesProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-codeconfigurationvalues.html#cfn-apprunner-service-codeconfigurationvalues-runtime"
            },
            "remarks": "It represents a programming language runtime.",
            "stability": "external",
            "summary": "A runtime environment type for building and running an App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 824
          },
          "name": "runtime",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-codeconfigurationvalues.html#cfn-apprunner-service-codeconfigurationvalues-buildcommand"
            },
            "stability": "external",
            "summary": "The command App Runner runs to build your application."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 810
          },
          "name": "buildCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-codeconfigurationvalues.html#cfn-apprunner-service-codeconfigurationvalues-port"
            },
            "remarks": "Default: `8080`",
            "stability": "external",
            "summary": "The port that your application listens to in the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 818
          },
          "name": "port",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-codeconfigurationvalues.html#cfn-apprunner-service-codeconfigurationvalues-runtimeenvironmentvariables"
            },
            "remarks": "An array of key-value pairs. Keys with a prefix of `AWSAPPRUNNER` are reserved for system use and aren't valid.",
            "stability": "external",
            "summary": "The environment variables that are available to your running App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 830
          },
          "name": "runtimeEnvironmentVariables",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-apprunner.CfnService.KeyValuePairProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-codeconfigurationvalues.html#cfn-apprunner-service-codeconfigurationvalues-startcommand"
            },
            "stability": "external",
            "summary": "The command App Runner runs to start your application."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 836
          },
          "name": "startCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnService.CodeConfigurationValuesProperty"
    },
    "@aws-cdk/aws-apprunner.CfnService.CodeRepositoryProperty": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-coderepository.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Describes a source code repository.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst codeRepositoryProperty: apprunner.CfnService.CodeRepositoryProperty = {\n  repositoryUrl: 'repositoryUrl',\n  sourceCodeVersion: {\n    type: 'type',\n    value: 'value',\n  },\n\n  // the properties below are optional\n  codeConfiguration: {\n    configurationSource: 'configurationSource',\n\n    // the properties below are optional\n    codeConfigurationValues: {\n      runtime: 'runtime',\n\n      // the properties below are optional\n      buildCommand: 'buildCommand',\n      port: 'port',\n      runtimeEnvironmentVariables: [{\n        name: 'name',\n        value: 'value',\n      }],\n      startCommand: 'startCommand',\n    },\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnService.CodeRepositoryProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 910
      },
      "name": "CodeRepositoryProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-coderepository.html#cfn-apprunner-service-coderepository-repositoryurl"
            },
            "stability": "external",
            "summary": "The location of the repository that contains the source code."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 924
          },
          "name": "repositoryUrl",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-coderepository.html#cfn-apprunner-service-coderepository-sourcecodeversion"
            },
            "stability": "external",
            "summary": "The version that should be used within the source code repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 930
          },
          "name": "sourceCodeVersion",
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnService.SourceCodeVersionProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-coderepository.html#cfn-apprunner-service-coderepository-codeconfiguration"
            },
            "remarks": "> `CodeConfiguration` is required only for `CreateService` request.",
            "stability": "external",
            "summary": "Configuration for building and running the service from a source code repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 918
          },
          "name": "codeConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnService.CodeConfigurationProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnService.CodeRepositoryProperty"
    },
    "@aws-cdk/aws-apprunner.CfnService.EgressConfigurationProperty": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-egressconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Describes configuration settings related to outbound network traffic of an AWS App Runner service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst egressConfigurationProperty: apprunner.CfnService.EgressConfigurationProperty = {\n  egressType: 'egressType',\n\n  // the properties below are optional\n  vpcConnectorArn: 'vpcConnectorArn',\n};"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnService.EgressConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 999
      },
      "name": "EgressConfigurationProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-egressconfiguration.html#cfn-apprunner-service-egressconfiguration-egresstype"
            },
            "remarks": "Set to `DEFAULT` for access to resources hosted on public networks.\n\nSet to `VPC` to associate your service to a custom VPC specified by `VpcConnectorArn` .",
            "stability": "external",
            "summary": "The type of egress configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1009
          },
          "name": "egressType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-egressconfiguration.html#cfn-apprunner-service-egressconfiguration-vpcconnectorarn"
            },
            "remarks": "Only valid when `EgressType = VPC` .",
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the App Runner VPC connector that you want to associate with your App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1015
          },
          "name": "vpcConnectorArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnService.EgressConfigurationProperty"
    },
    "@aws-cdk/aws-apprunner.CfnService.EncryptionConfigurationProperty": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-encryptionconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Describes a custom encryption key that AWS App Runner uses to encrypt copies of the source repository and service logs.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst encryptionConfigurationProperty: apprunner.CfnService.EncryptionConfigurationProperty = {\n  kmsKey: 'kmsKey',\n};"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnService.EncryptionConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 1080
      },
      "name": "EncryptionConfigurationProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-encryptionconfiguration.html#cfn-apprunner-service-encryptionconfiguration-kmskey"
            },
            "stability": "external",
            "summary": "The ARN of the KMS key that's used for encryption."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1086
          },
          "name": "kmsKey",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnService.EncryptionConfigurationProperty"
    },
    "@aws-cdk/aws-apprunner.CfnService.HealthCheckConfigurationProperty": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-healthcheckconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Describes the settings for the health check that AWS App Runner performs to monitor the health of a service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst healthCheckConfigurationProperty: apprunner.CfnService.HealthCheckConfigurationProperty = {\n  healthyThreshold: 123,\n  interval: 123,\n  path: 'path',\n  protocol: 'protocol',\n  timeout: 123,\n  unhealthyThreshold: 123,\n};"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnService.HealthCheckConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 1148
      },
      "name": "HealthCheckConfigurationProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-healthcheckconfiguration.html#cfn-apprunner-service-healthcheckconfiguration-healthythreshold"
            },
            "remarks": "Default: `1`",
            "stability": "external",
            "summary": "The number of consecutive checks that must succeed before App Runner decides that the service is healthy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1156
          },
          "name": "healthyThreshold",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-healthcheckconfiguration.html#cfn-apprunner-service-healthcheckconfiguration-interval"
            },
            "remarks": "Default: `5`",
            "stability": "external",
            "summary": "The time interval, in seconds, between health checks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1164
          },
          "name": "interval",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-healthcheckconfiguration.html#cfn-apprunner-service-healthcheckconfiguration-path"
            },
            "remarks": "`Path` is only applicable when you set `Protocol` to `HTTP` .\n\nDefault: `\"/\"`",
            "stability": "external",
            "summary": "The URL that health check requests are sent to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1174
          },
          "name": "path",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-healthcheckconfiguration.html#cfn-apprunner-service-healthcheckconfiguration-protocol"
            },
            "remarks": "If you set `Protocol` to `HTTP` , App Runner sends health check requests to the HTTP path specified by `Path` .\n\nDefault: `TCP`",
            "stability": "external",
            "summary": "The IP protocol that App Runner uses to perform health checks for your service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1184
          },
          "name": "protocol",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-healthcheckconfiguration.html#cfn-apprunner-service-healthcheckconfiguration-timeout"
            },
            "remarks": "Default: `2`",
            "stability": "external",
            "summary": "The time, in seconds, to wait for a health check response before deciding it failed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1192
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-healthcheckconfiguration.html#cfn-apprunner-service-healthcheckconfiguration-unhealthythreshold"
            },
            "remarks": "Default: `5`",
            "stability": "external",
            "summary": "The number of consecutive checks that must fail before App Runner decides that the service is unhealthy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1200
          },
          "name": "unhealthyThreshold",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnService.HealthCheckConfigurationProperty"
    },
    "@aws-cdk/aws-apprunner.CfnService.ImageConfigurationProperty": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imageconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Describes the configuration that AWS App Runner uses to run an App Runner service using an image pulled from a source image repository.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst imageConfigurationProperty: apprunner.CfnService.ImageConfigurationProperty = {\n  port: 'port',\n  runtimeEnvironmentVariables: [{\n    name: 'name',\n    value: 'value',\n  }],\n  startCommand: 'startCommand',\n};"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnService.ImageConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 1276
      },
      "name": "ImageConfigurationProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imageconfiguration.html#cfn-apprunner-service-imageconfiguration-port"
            },
            "remarks": "Default: `8080`",
            "stability": "external",
            "summary": "The port that your application listens to in the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1284
          },
          "name": "port",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imageconfiguration.html#cfn-apprunner-service-imageconfiguration-runtimeenvironmentvariables"
            },
            "remarks": "An array of key-value pairs. Keys with a prefix of `AWSAPPRUNNER` are reserved for system use and aren't valid.",
            "stability": "external",
            "summary": "Environment variables that are available to your running App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1290
          },
          "name": "runtimeEnvironmentVariables",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-apprunner.CfnService.KeyValuePairProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imageconfiguration.html#cfn-apprunner-service-imageconfiguration-startcommand"
            },
            "remarks": "If specified, this command overrides the Docker image’s default start command.",
            "stability": "external",
            "summary": "An optional command that App Runner runs to start the application in the source image."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1296
          },
          "name": "startCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnService.ImageConfigurationProperty"
    },
    "@aws-cdk/aws-apprunner.CfnService.ImageRepositoryProperty": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imagerepository.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Describes a source image repository.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst imageRepositoryProperty: apprunner.CfnService.ImageRepositoryProperty = {\n  imageIdentifier: 'imageIdentifier',\n  imageRepositoryType: 'imageRepositoryType',\n\n  // the properties below are optional\n  imageConfiguration: {\n    port: 'port',\n    runtimeEnvironmentVariables: [{\n      name: 'name',\n      value: 'value',\n    }],\n    startCommand: 'startCommand',\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnService.ImageRepositoryProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 1363
      },
      "name": "ImageRepositoryProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imagerepository.html#cfn-apprunner-service-imagerepository-imageidentifier"
            },
            "remarks": "For an image in Amazon Elastic Container Registry (Amazon ECR), this is an image name. For the image name format, see [Pulling an image](https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html) in the *Amazon ECR User Guide* .",
            "stability": "external",
            "summary": "The identifier of an image."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1377
          },
          "name": "imageIdentifier",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imagerepository.html#cfn-apprunner-service-imagerepository-imagerepositorytype"
            },
            "remarks": "This reflects the repository provider and whether the repository is private or public.",
            "stability": "external",
            "summary": "The type of the image repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1383
          },
          "name": "imageRepositoryType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imagerepository.html#cfn-apprunner-service-imagerepository-imageconfiguration"
            },
            "stability": "external",
            "summary": "Configuration for running the identified image."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1369
          },
          "name": "imageConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnService.ImageConfigurationProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnService.ImageRepositoryProperty"
    },
    "@aws-cdk/aws-apprunner.CfnService.InstanceConfigurationProperty": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-instanceconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Describes the runtime configuration of an AWS App Runner service instance (scaling unit).",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst instanceConfigurationProperty: apprunner.CfnService.InstanceConfigurationProperty = {\n  cpu: 'cpu',\n  instanceRoleArn: 'instanceRoleArn',\n  memory: 'memory',\n};"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnService.InstanceConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 1452
      },
      "name": "InstanceConfigurationProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-instanceconfiguration.html#cfn-apprunner-service-instanceconfiguration-cpu"
            },
            "remarks": "Default: `1 vCPU`",
            "stability": "external",
            "summary": "The number of CPU units reserved for each instance of your App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1460
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-instanceconfiguration.html#cfn-apprunner-service-instanceconfiguration-instancerolearn"
            },
            "remarks": "These are permissions that your code needs when it calls any AWS APIs.",
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of an IAM role that provides permissions to your App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1466
          },
          "name": "instanceRoleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-instanceconfiguration.html#cfn-apprunner-service-instanceconfiguration-memory"
            },
            "remarks": "Default: `2 GB`",
            "stability": "external",
            "summary": "The amount of memory, in MB or GB, reserved for each instance of your App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1474
          },
          "name": "memory",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnService.InstanceConfigurationProperty"
    },
    "@aws-cdk/aws-apprunner.CfnService.KeyValuePairProperty": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-keyvaluepair.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Describes a key-value pair, which is a string-to-string mapping.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst keyValuePairProperty: apprunner.CfnService.KeyValuePairProperty = {\n  name: 'name',\n  value: 'value',\n};"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnService.KeyValuePairProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 1541
      },
      "name": "KeyValuePairProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-keyvaluepair.html#cfn-apprunner-service-keyvaluepair-name"
            },
            "stability": "external",
            "summary": "The key name string to map to a value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1547
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-keyvaluepair.html#cfn-apprunner-service-keyvaluepair-value"
            },
            "stability": "external",
            "summary": "The value string to which the key name is mapped."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1553
          },
          "name": "value",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnService.KeyValuePairProperty"
    },
    "@aws-cdk/aws-apprunner.CfnService.NetworkConfigurationProperty": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-networkconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Consists of embedded objects for each configurable network feature.",
        "stability": "external",
        "summary": "Describes configuration settings related to network traffic of an AWS App Runner service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst networkConfigurationProperty: apprunner.CfnService.NetworkConfigurationProperty = {\n  egressConfiguration: {\n    egressType: 'egressType',\n\n    // the properties below are optional\n    vpcConnectorArn: 'vpcConnectorArn',\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnService.NetworkConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 1617
      },
      "name": "NetworkConfigurationProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-networkconfiguration.html#cfn-apprunner-service-networkconfiguration-egressconfiguration"
            },
            "stability": "external",
            "summary": "Network configuration settings for outbound message traffic."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1623
          },
          "name": "egressConfiguration",
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnService.EgressConfigurationProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnService.NetworkConfigurationProperty"
    },
    "@aws-cdk/aws-apprunner.CfnService.ServiceObservabilityConfigurationProperty": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-serviceobservabilityconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "These are additional observability features, like tracing, that you choose to enable. They're configured in a separate resource that you associate with your service.",
        "stability": "external",
        "summary": "Describes the observability configuration of an AWS App Runner service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst serviceObservabilityConfigurationProperty: apprunner.CfnService.ServiceObservabilityConfigurationProperty = {\n  observabilityEnabled: false,\n\n  // the properties below are optional\n  observabilityConfigurationArn: 'observabilityConfigurationArn',\n};"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnService.ServiceObservabilityConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 1685
      },
      "name": "ServiceObservabilityConfigurationProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-serviceobservabilityconfiguration.html#cfn-apprunner-service-serviceobservabilityconfiguration-observabilityenabled"
            },
            "stability": "external",
            "summary": "When `true` , an observability configuration resource is associated with the service, and an `ObservabilityConfigurationArn` is specified."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1701
          },
          "name": "observabilityEnabled",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-serviceobservabilityconfiguration.html#cfn-apprunner-service-serviceobservabilityconfiguration-observabilityconfigurationarn"
            },
            "remarks": "Specified only when `ObservabilityEnabled` is `true` .\n\nSpecify an ARN with a name and a revision number to associate that revision. For example: `arn:aws:apprunner:us-east-1:123456789012:observabilityconfiguration/xray-tracing/3`\n\nSpecify just the name to associate the latest revision. For example: `arn:aws:apprunner:us-east-1:123456789012:observabilityconfiguration/xray-tracing`",
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the observability configuration that is associated with the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1695
          },
          "name": "observabilityConfigurationArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnService.ServiceObservabilityConfigurationProperty"
    },
    "@aws-cdk/aws-apprunner.CfnService.SourceCodeVersionProperty": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-sourcecodeversion.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Identifies a version of code that AWS App Runner refers to within a source code repository.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst sourceCodeVersionProperty: apprunner.CfnService.SourceCodeVersionProperty = {\n  type: 'type',\n  value: 'value',\n};"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnService.SourceCodeVersionProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 1766
      },
      "name": "SourceCodeVersionProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-sourcecodeversion.html#cfn-apprunner-service-sourcecodeversion-type"
            },
            "remarks": "For a git-based repository, branches represent versions.",
            "stability": "external",
            "summary": "The type of version identifier."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1774
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-sourcecodeversion.html#cfn-apprunner-service-sourcecodeversion-value"
            },
            "remarks": "For a git-based repository, a branch name maps to a specific version. App Runner uses the most recent commit to the branch.",
            "stability": "external",
            "summary": "A source code version."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1782
          },
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnService.SourceCodeVersionProperty"
    },
    "@aws-cdk/aws-apprunner.CfnService.SourceConfigurationProperty": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-sourceconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "It can be a code or an image repository.",
        "stability": "external",
        "summary": "Describes the source deployed to an AWS App Runner service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst sourceConfigurationProperty: apprunner.CfnService.SourceConfigurationProperty = {\n  authenticationConfiguration: {\n    accessRoleArn: 'accessRoleArn',\n    connectionArn: 'connectionArn',\n  },\n  autoDeploymentsEnabled: false,\n  codeRepository: {\n    repositoryUrl: 'repositoryUrl',\n    sourceCodeVersion: {\n      type: 'type',\n      value: 'value',\n    },\n\n    // the properties below are optional\n    codeConfiguration: {\n      configurationSource: 'configurationSource',\n\n      // the properties below are optional\n      codeConfigurationValues: {\n        runtime: 'runtime',\n\n        // the properties below are optional\n        buildCommand: 'buildCommand',\n        port: 'port',\n        runtimeEnvironmentVariables: [{\n          name: 'name',\n          value: 'value',\n        }],\n        startCommand: 'startCommand',\n      },\n    },\n  },\n  imageRepository: {\n    imageIdentifier: 'imageIdentifier',\n    imageRepositoryType: 'imageRepositoryType',\n\n    // the properties below are optional\n    imageConfiguration: {\n      port: 'port',\n      runtimeEnvironmentVariables: [{\n        name: 'name',\n        value: 'value',\n      }],\n      startCommand: 'startCommand',\n    },\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnService.SourceConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 1848
      },
      "name": "SourceConfigurationProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-sourceconfiguration.html#cfn-apprunner-service-sourceconfiguration-authenticationconfiguration"
            },
            "stability": "external",
            "summary": "Describes the resources that are needed to authenticate access to some source repositories."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1854
          },
          "name": "authenticationConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnService.AuthenticationConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-sourceconfiguration.html#cfn-apprunner-service-sourceconfiguration-autodeploymentsenabled"
            },
            "remarks": "Each repository change (including any source code commit or new image version) starts a deployment.\n\nDefault: App Runner sets to `false` for a source image that uses an ECR Public repository or an ECR repository that's in an AWS account other than the one that the service is in. App Runner sets to `true` in all other cases (which currently include a source code repository or a source image using a same-account ECR repository).",
            "stability": "external",
            "summary": "If `true` , continuous integration from the source repository is enabled for the App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1862
          },
          "name": "autoDeploymentsEnabled",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-sourceconfiguration.html#cfn-apprunner-service-sourceconfiguration-coderepository"
            },
            "remarks": "You must provide either this member or `ImageRepository` (but not both).",
            "stability": "external",
            "summary": "The description of a source code repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1870
          },
          "name": "codeRepository",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnService.CodeRepositoryProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-sourceconfiguration.html#cfn-apprunner-service-sourceconfiguration-imagerepository"
            },
            "remarks": "You must provide either this member or `CodeRepository` (but not both).",
            "stability": "external",
            "summary": "The description of a source image repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1878
          },
          "name": "imageRepository",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnService.ImageRepositoryProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnService.SourceConfigurationProperty"
    },
    "@aws-cdk/aws-apprunner.CfnServiceProps": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-service.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnService`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst cfnServiceProps: apprunner.CfnServiceProps = {\n  sourceConfiguration: {\n    authenticationConfiguration: {\n      accessRoleArn: 'accessRoleArn',\n      connectionArn: 'connectionArn',\n    },\n    autoDeploymentsEnabled: false,\n    codeRepository: {\n      repositoryUrl: 'repositoryUrl',\n      sourceCodeVersion: {\n        type: 'type',\n        value: 'value',\n      },\n\n      // the properties below are optional\n      codeConfiguration: {\n        configurationSource: 'configurationSource',\n\n        // the properties below are optional\n        codeConfigurationValues: {\n          runtime: 'runtime',\n\n          // the properties below are optional\n          buildCommand: 'buildCommand',\n          port: 'port',\n          runtimeEnvironmentVariables: [{\n            name: 'name',\n            value: 'value',\n          }],\n          startCommand: 'startCommand',\n        },\n      },\n    },\n    imageRepository: {\n      imageIdentifier: 'imageIdentifier',\n      imageRepositoryType: 'imageRepositoryType',\n\n      // the properties below are optional\n      imageConfiguration: {\n        port: 'port',\n        runtimeEnvironmentVariables: [{\n          name: 'name',\n          value: 'value',\n        }],\n        startCommand: 'startCommand',\n      },\n    },\n  },\n\n  // the properties below are optional\n  autoScalingConfigurationArn: 'autoScalingConfigurationArn',\n  encryptionConfiguration: {\n    kmsKey: 'kmsKey',\n  },\n  healthCheckConfiguration: {\n    healthyThreshold: 123,\n    interval: 123,\n    path: 'path',\n    protocol: 'protocol',\n    timeout: 123,\n    unhealthyThreshold: 123,\n  },\n  instanceConfiguration: {\n    cpu: 'cpu',\n    instanceRoleArn: 'instanceRoleArn',\n    memory: 'memory',\n  },\n  networkConfiguration: {\n    egressConfiguration: {\n      egressType: 'egressType',\n\n      // the properties below are optional\n      vpcConnectorArn: 'vpcConnectorArn',\n    },\n  },\n  observabilityConfiguration: {\n    observabilityEnabled: false,\n\n    // the properties below are optional\n    observabilityConfigurationArn: 'observabilityConfigurationArn',\n  },\n  serviceName: 'serviceName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnServiceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 306
      },
      "name": "CfnServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-service.html#cfn-apprunner-service-sourceconfiguration"
            },
            "remarks": "It can be a code or an image repository.",
            "stability": "external",
            "summary": "The source to deploy to the App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 313
          },
          "name": "sourceConfiguration",
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnService.SourceConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-service.html#cfn-apprunner-service-autoscalingconfigurationarn"
            },
            "remarks": "If not provided, App Runner associates the latest revision of a default auto scaling configuration.\n\nSpecify an ARN with a name and a revision number to associate that revision. For example: `arn:aws:apprunner:us-east-1:123456789012:autoscalingconfiguration/high-availability/3`\n\nSpecify just the name to associate the latest revision. For example: `arn:aws:apprunner:us-east-1:123456789012:autoscalingconfiguration/high-availability`",
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of an App Runner automatic scaling configuration resource that you want to associate with your service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 324
          },
          "name": "autoScalingConfigurationArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-service.html#cfn-apprunner-service-encryptionconfiguration"
            },
            "remarks": "By default, App Runner uses an AWS managed key .",
            "stability": "external",
            "summary": "An optional custom encryption key that App Runner uses to encrypt the copy of your source repository that it maintains and your service logs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 331
          },
          "name": "encryptionConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnService.EncryptionConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-service.html#cfn-apprunner-service-healthcheckconfiguration"
            },
            "stability": "external",
            "summary": "The settings for the health check that AWS App Runner performs to monitor the health of the App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 338
          },
          "name": "healthCheckConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnService.HealthCheckConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-service.html#cfn-apprunner-service-instanceconfiguration"
            },
            "stability": "external",
            "summary": "The runtime configuration of instances (scaling units) of your service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 345
          },
          "name": "instanceConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnService.InstanceConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-service.html#cfn-apprunner-service-networkconfiguration"
            },
            "stability": "external",
            "summary": "Configuration settings related to network traffic of the web application that the App Runner service runs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 352
          },
          "name": "networkConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnService.NetworkConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-service.html#cfn-apprunner-service-observabilityconfiguration"
            },
            "stability": "external",
            "summary": "The observability configuration of your service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 359
          },
          "name": "observabilityConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-apprunner.CfnService.ServiceObservabilityConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-service.html#cfn-apprunner-service-servicename"
            },
            "remarks": "It must be unique across all the running App Runner services in your AWS account in the AWS Region .\n\nIf you don't specify a name, AWS CloudFormation generates a name for your service.",
            "stability": "external",
            "summary": "A name for the App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 368
          },
          "name": "serviceName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-service.html#cfn-apprunner-service-tags"
            },
            "remarks": "A tag is a key-value pair.",
            "stability": "external",
            "summary": "An optional list of metadata items that you can associate with the App Runner service resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 375
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnTag"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnServiceProps"
    },
    "@aws-cdk/aws-apprunner.CfnVpcConnector": {
      "assembly": "@aws-cdk/aws-apprunner",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::AppRunner::VpcConnector",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-vpcconnector.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Specify an AWS App Runner VPC connector by using the `AWS::AppRunner::VpcConnector` resource in an AWS CloudFormation template.\n\nThe `AWS::AppRunner::VpcConnector` resource is an AWS App Runner resource type that specifies an App Runner VPC connector.\n\nApp Runner requires this resource when you want to associate your App Runner service to a custom Amazon Virtual Private Cloud ( Amazon VPC ).",
        "stability": "external",
        "summary": "A CloudFormation `AWS::AppRunner::VpcConnector`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst cfnVpcConnector = new apprunner.CfnVpcConnector(this, 'MyCfnVpcConnector', {\n  subnets: ['subnets'],\n\n  // the properties below are optional\n  securityGroups: ['securityGroups'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcConnectorName: 'vpcConnectorName',\n});"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnVpcConnector",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::AppRunner::VpcConnector`."
        },
        "locationInModule": {
          "filename": "lib/apprunner.generated.ts",
          "line": 2129
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.CfnVpcConnectorProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 2051
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 2147
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 2161
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnVpcConnector",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 2055
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "VpcConnectorArn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of this VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 2080
          },
          "name": "attrVpcConnectorArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "VpcConnectorRevision"
            },
            "remarks": "It's unique among all the active connectors ( `\"Status\": \"ACTIVE\"` ) that share the same `Name` .\n\n> At this time, App Runner supports only one revision per name.",
            "stability": "external",
            "summary": "The revision of this VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 2088
          },
          "name": "attrVpcConnectorRevision",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 2152
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-vpcconnector.html#cfn-apprunner-vpcconnector-tags"
            },
            "remarks": "A tag is a key-value pair.",
            "stability": "external",
            "summary": "A list of metadata items that you can associate with your VPC connector resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 2111
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-vpcconnector.html#cfn-apprunner-vpcconnector-subnets"
            },
            "remarks": "Specify IDs of subnets of a single Amazon VPC. App Runner determines the Amazon VPC from the subnets you specify.\n\n> App Runner currently only provides support for IPv4.",
            "stability": "external",
            "summary": "A list of IDs of subnets that App Runner should use when it associates your service with a custom Amazon VPC."
          },
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 2097
          },
          "name": "subnets",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-vpcconnector.html#cfn-apprunner-vpcconnector-securitygroups"
            },
            "remarks": "If not specified, App Runner uses the default security group of the Amazon VPC. The default security group allows all outbound traffic.",
            "stability": "external",
            "summary": "A list of IDs of security groups that App Runner should use for access to AWS resources under the specified subnets."
          },
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 2104
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-vpcconnector.html#cfn-apprunner-vpcconnector-vpcconnectorname"
            },
            "remarks": "If you don't specify a name, AWS CloudFormation generates a name for your VPC connector.",
            "stability": "external",
            "summary": "A name for the VPC connector."
          },
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 2120
          },
          "name": "vpcConnectorName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnVpcConnector"
    },
    "@aws-cdk/aws-apprunner.CfnVpcConnectorProps": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-vpcconnector.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnVpcConnector`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst cfnVpcConnectorProps: apprunner.CfnVpcConnectorProps = {\n  subnets: ['subnets'],\n\n  // the properties below are optional\n  securityGroups: ['securityGroups'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcConnectorName: 'vpcConnectorName',\n};"
      },
      "fqn": "@aws-cdk/aws-apprunner.CfnVpcConnectorProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/apprunner.generated.ts",
        "line": 1947
      },
      "name": "CfnVpcConnectorProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-vpcconnector.html#cfn-apprunner-vpcconnector-subnets"
            },
            "remarks": "Specify IDs of subnets of a single Amazon VPC. App Runner determines the Amazon VPC from the subnets you specify.\n\n> App Runner currently only provides support for IPv4.",
            "stability": "external",
            "summary": "A list of IDs of subnets that App Runner should use when it associates your service with a custom Amazon VPC."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1956
          },
          "name": "subnets",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-vpcconnector.html#cfn-apprunner-vpcconnector-securitygroups"
            },
            "remarks": "If not specified, App Runner uses the default security group of the Amazon VPC. The default security group allows all outbound traffic.",
            "stability": "external",
            "summary": "A list of IDs of security groups that App Runner should use for access to AWS resources under the specified subnets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1963
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-vpcconnector.html#cfn-apprunner-vpcconnector-tags"
            },
            "remarks": "A tag is a key-value pair.",
            "stability": "external",
            "summary": "A list of metadata items that you can associate with your VPC connector resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1970
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnTag"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apprunner-vpcconnector.html#cfn-apprunner-vpcconnector-vpcconnectorname"
            },
            "remarks": "If you don't specify a name, AWS CloudFormation generates a name for your VPC connector.",
            "stability": "external",
            "summary": "A name for the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/apprunner.generated.ts",
            "line": 1979
          },
          "name": "vpcConnectorName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/apprunner.generated:CfnVpcConnectorProps"
    },
    "@aws-cdk/aws-apprunner.CodeConfiguration": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-codeconfiguration.html",
        "stability": "experimental",
        "summary": "Describes the configuration that AWS App Runner uses to build and run an App Runner service from a source code repository.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n\ndeclare const runtime: apprunner.Runtime;\nconst codeConfiguration: apprunner.CodeConfiguration = {\n  configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n\n  // the properties below are optional\n  configurationValues: {\n    runtime: runtime,\n\n    // the properties below are optional\n    buildCommand: 'buildCommand',\n    environment: {\n      environmentKey: 'environment',\n    },\n    port: 'port',\n    startCommand: 'startCommand',\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.CodeConfiguration",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 560
      },
      "name": "CodeConfiguration",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The source of the App Runner configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 573
          },
          "name": "configurationSource",
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.ConfigurationSourceType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- not specified. Use `apprunner.yaml` instead.",
            "remarks": "Use it to quickly launch an App Runner service without providing a apprunner.yaml file in the\nsource code repository (or ignoring the file if it exists).",
            "stability": "experimental",
            "summary": "The basic configuration for building and running the App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 568
          },
          "name": "configurationValues",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.CodeConfigurationValues"
          }
        }
      ],
      "symbolId": "lib/service:CodeConfiguration"
    },
    "@aws-cdk/aws-apprunner.CodeConfigurationValues": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "remarks": "This type doesn't support the full set of possible configuration options. Fur full configuration capabilities,\nuse a `apprunner.yaml` file in the source code repository.",
        "stability": "experimental",
        "summary": "Describes the basic configuration needed for building and running an AWS App Runner service.",
        "example": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.API,\n    codeConfigurationValues: {\n      runtime: apprunner.Runtime.PYTHON_3,\n      port: '8000',\n      startCommand: 'python app.py',\n      buildCommand: 'yum install -y pycairo && pip install -r requirements.txt',\n    },\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.CodeConfigurationValues",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 603
      },
      "name": "CodeConfigurationValues",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "It represents\na programming language runtime.",
            "stability": "experimental",
            "summary": "A runtime environment type for building and running an App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 622
          },
          "name": "runtime",
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.Runtime"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no build command.",
            "stability": "experimental",
            "summary": "The command App Runner runs to build your application."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 609
          },
          "name": "buildCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no environment variables.",
            "stability": "experimental",
            "summary": "The environment variables that are available to your running App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 629
          },
          "name": "environment",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "8080",
            "stability": "experimental",
            "summary": "The port that your application listens to in the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 616
          },
          "name": "port",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no start command.",
            "stability": "experimental",
            "summary": "The command App Runner runs to start your application."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 636
          },
          "name": "startCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:CodeConfigurationValues"
    },
    "@aws-cdk/aws-apprunner.CodeRepositoryProps": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties of the CodeRepository.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n\ndeclare const gitHubConnection: apprunner.GitHubConnection;\ndeclare const runtime: apprunner.Runtime;\nconst codeRepositoryProps: apprunner.CodeRepositoryProps = {\n  codeConfiguration: {\n    configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n\n    // the properties below are optional\n    configurationValues: {\n      runtime: runtime,\n\n      // the properties below are optional\n      buildCommand: 'buildCommand',\n      environment: {\n        environmentKey: 'environment',\n      },\n      port: 'port',\n      startCommand: 'startCommand',\n    },\n  },\n  connection: gitHubConnection,\n  repositoryUrl: 'repositoryUrl',\n  sourceCodeVersion: {\n    type: 'type',\n    value: 'value',\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.CodeRepositoryProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 453
      },
      "name": "CodeRepositoryProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Configuration for building and running the service from a source code repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 457
          },
          "name": "codeConfiguration",
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.CodeConfiguration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The App Runner connection for GitHub."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 472
          },
          "name": "connection",
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.GitHubConnection"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The location of the repository that contains the source code."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 462
          },
          "name": "repositoryUrl",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The version that should be used within the source code repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 467
          },
          "name": "sourceCodeVersion",
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.SourceCodeVersion"
          }
        }
      ],
      "symbolId": "lib/service:CodeRepositoryProps"
    },
    "@aws-cdk/aws-apprunner.ConfigurationSourceType": {
      "assembly": "@aws-cdk/aws-apprunner",
      "docs": {
        "stability": "experimental",
        "summary": "The source of the App Runner configuration.",
        "example": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.ConfigurationSourceType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 540
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "App Runner reads configuration values from `the apprunner.yaml` file in the source code repository and ignores `configurationValues`."
          },
          "name": "REPOSITORY"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "App Runner uses configuration values provided in `configurationValues` and ignores the `apprunner.yaml` file in the source code repository."
          },
          "name": "API"
        }
      ],
      "name": "ConfigurationSourceType",
      "symbolId": "lib/service:ConfigurationSourceType"
    },
    "@aws-cdk/aws-apprunner.Cpu": {
      "assembly": "@aws-cdk/aws-apprunner",
      "docs": {
        "stability": "experimental",
        "summary": "The number of CPU units reserved for each instance of your App Runner service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst cpu = apprunner.Cpu.of('unit');",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.Cpu",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 28
      },
      "methods": [
        {
          "docs": {
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-instanceconfiguration.html#cfn-apprunner-service-instanceconfiguration-cpu",
            "stability": "experimental",
            "summary": "Custom CPU unit."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 46
          },
          "name": "of",
          "parameters": [
            {
              "docs": {
                "summary": "custom CPU unit."
              },
              "name": "unit",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.Cpu"
            }
          },
          "static": true
        }
      ],
      "name": "Cpu",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "1 vCPU."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 32
          },
          "name": "ONE_VCPU",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.Cpu"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "2 vCPU."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 37
          },
          "name": "TWO_VCPU",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.Cpu"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The unit of CPU."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 52
          },
          "name": "unit",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:Cpu"
    },
    "@aws-cdk/aws-apprunner.EcrProps": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties of the image repository for `Source.fromEcr()`.",
        "example": "import * as ecr from '@aws-cdk/aws-ecr';\n\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcr({\n    imageConfiguration: { port: 80 },\n    repository: ecr.Repository.fromRepositoryName(this, 'NginxRepository', 'nginx'),\n    tagOrDigest: 'latest',\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.EcrProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 209
      },
      "name": "EcrProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Represents the ECR repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 219
          },
          "name": "repository",
          "type": {
            "fqn": "@aws-cdk/aws-ecr.IRepository"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no image configuration will be passed. The default `port` will be 8080.",
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imageconfiguration.html#cfn-apprunner-service-imageconfiguration-port",
            "stability": "experimental",
            "summary": "The image configuration for the image from ECR."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 215
          },
          "name": "imageConfiguration",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.ImageConfiguration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 'latest'",
            "deprecated": "use `tagOrDigest`",
            "stability": "deprecated",
            "summary": "Image tag."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 225
          },
          "name": "tag",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 'latest'",
            "stability": "experimental",
            "summary": "Image tag or digest (digests must start with `sha256:`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 230
          },
          "name": "tagOrDigest",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:EcrProps"
    },
    "@aws-cdk/aws-apprunner.EcrPublicProps": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties of the image repository for `Source.fromEcrPublic()`.",
        "example": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.EcrPublicProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 193
      },
      "name": "EcrPublicProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The ECR Public image URI."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 203
          },
          "name": "imageIdentifier",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no image configuration will be passed. The default `port` will be 8080.",
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imageconfiguration.html#cfn-apprunner-service-imageconfiguration-port",
            "stability": "experimental",
            "summary": "The image configuration for the image from ECR Public."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 199
          },
          "name": "imageConfiguration",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.ImageConfiguration"
          }
        }
      ],
      "symbolId": "lib/service:EcrPublicProps"
    },
    "@aws-cdk/aws-apprunner.EcrPublicSource": {
      "assembly": "@aws-cdk/aws-apprunner",
      "base": "@aws-cdk/aws-apprunner.Source",
      "docs": {
        "stability": "experimental",
        "summary": "Represents the service source from ECR Public.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst ecrPublicSource = new apprunner.EcrPublicSource({\n  imageIdentifier: 'imageIdentifier',\n\n  // the properties below are optional\n  imageConfiguration: {\n    environment: {\n      environmentKey: 'environment',\n    },\n    port: 123,\n    startCommand: 'startCommand',\n  },\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.EcrPublicSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/service.ts",
          "line": 338
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.EcrPublicProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 336
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Called when the Job is initialized to allow this object to bind."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 342
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-apprunner.Source",
          "parameters": [
            {
              "name": "_scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.SourceConfig"
            }
          }
        }
      ],
      "name": "EcrPublicSource",
      "symbolId": "lib/service:EcrPublicSource"
    },
    "@aws-cdk/aws-apprunner.EcrSource": {
      "assembly": "@aws-cdk/aws-apprunner",
      "base": "@aws-cdk/aws-apprunner.Source",
      "docs": {
        "stability": "experimental",
        "summary": "Represents the service source from ECR.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as ecr from '@aws-cdk/aws-ecr';\n\ndeclare const repository: ecr.Repository;\nconst ecrSource = new apprunner.EcrSource({\n  repository: repository,\n\n  // the properties below are optional\n  imageConfiguration: {\n    environment: {\n      environmentKey: 'environment',\n    },\n    port: 123,\n    startCommand: 'startCommand',\n  },\n  tag: 'tag',\n  tagOrDigest: 'tagOrDigest',\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.EcrSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/service.ts",
          "line": 315
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.EcrProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 313
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Called when the Job is initialized to allow this object to bind."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 319
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-apprunner.Source",
          "parameters": [
            {
              "name": "_scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.SourceConfig"
            }
          }
        }
      ],
      "name": "EcrSource",
      "symbolId": "lib/service:EcrSource"
    },
    "@aws-cdk/aws-apprunner.GitHubConnection": {
      "assembly": "@aws-cdk/aws-apprunner",
      "docs": {
        "remarks": "It's required for GitHub code repositories.",
        "stability": "experimental",
        "summary": "Represents the App Runner connection that enables the App Runner service to connect to a source repository.",
        "example": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.GitHubConnection",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/service.ts",
          "line": 656
        },
        "parameters": [
          {
            "name": "arn",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 643
      },
      "methods": [
        {
          "docs": {
            "returns": "Connection",
            "stability": "experimental",
            "summary": "Using existing App Runner connection by specifying the connection ARN."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 649
          },
          "name": "fromConnectionArn",
          "parameters": [
            {
              "docs": {
                "summary": "connection ARN."
              },
              "name": "arn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.GitHubConnection"
            }
          },
          "static": true
        }
      ],
      "name": "GitHubConnection",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of the Connection for App Runner service to connect to the repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 655
          },
          "name": "connectionArn",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:GitHubConnection"
    },
    "@aws-cdk/aws-apprunner.GithubRepositoryProps": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties of the Github repository for `Source.fromGitHub()`.",
        "example": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.GithubRepositoryProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 159
      },
      "name": "GithubRepositoryProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The source of the App Runner configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 169
          },
          "name": "configurationSource",
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.ConfigurationSourceType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Only required for Github source.",
            "stability": "experimental",
            "summary": "ARN of the connection to Github."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 186
          },
          "name": "connection",
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.GitHubConnection"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The location of the repository that contains the source code."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 174
          },
          "name": "repositoryUrl",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "main",
            "stability": "experimental",
            "summary": "The branch name that represents a specific version for the repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 181
          },
          "name": "branch",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no values will be passed. The `apprunner.yaml` from the github reopsitory will be used instead.",
            "remarks": "Will be ignored if configurationSource is `REPOSITORY`.",
            "stability": "experimental",
            "summary": "The code configuration values."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 164
          },
          "name": "codeConfigurationValues",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.CodeConfigurationValues"
          }
        }
      ],
      "symbolId": "lib/service:GithubRepositoryProps"
    },
    "@aws-cdk/aws-apprunner.GithubSource": {
      "assembly": "@aws-cdk/aws-apprunner",
      "base": "@aws-cdk/aws-apprunner.Source",
      "docs": {
        "stability": "experimental",
        "summary": "Represents the service source from a Github repository.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\n\ndeclare const gitHubConnection: apprunner.GitHubConnection;\ndeclare const runtime: apprunner.Runtime;\nconst githubSource = new apprunner.GithubSource({\n  configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n  connection: gitHubConnection,\n  repositoryUrl: 'repositoryUrl',\n\n  // the properties below are optional\n  branch: 'branch',\n  codeConfigurationValues: {\n    runtime: runtime,\n\n    // the properties below are optional\n    buildCommand: 'buildCommand',\n    environment: {\n      environmentKey: 'environment',\n    },\n    port: 'port',\n    startCommand: 'startCommand',\n  },\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.GithubSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/service.ts",
          "line": 289
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.GithubRepositoryProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 287
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Called when the Job is initialized to allow this object to bind."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 293
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-apprunner.Source",
          "parameters": [
            {
              "name": "_scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.SourceConfig"
            }
          }
        }
      ],
      "name": "GithubSource",
      "symbolId": "lib/service:GithubSource"
    },
    "@aws-cdk/aws-apprunner.IService": {
      "assembly": "@aws-cdk/aws-apprunner",
      "docs": {
        "stability": "experimental",
        "summary": "Represents the App Runner Service."
      },
      "fqn": "@aws-cdk/aws-apprunner.IService",
      "interfaces": [
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 689
      },
      "name": "IService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 698
          },
          "name": "serviceArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The Name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 693
          },
          "name": "serviceName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:IService"
    },
    "@aws-cdk/aws-apprunner.IVpcConnector": {
      "assembly": "@aws-cdk/aws-apprunner",
      "docs": {
        "stability": "experimental",
        "summary": "Represents the App Runner VPC Connector."
      },
      "fqn": "@aws-cdk/aws-apprunner.IVpcConnector",
      "interfaces": [
        "@aws-cdk/core.IResource",
        "@aws-cdk/aws-ec2.IConnectable"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/vpc-connector.ts",
        "line": 66
      },
      "name": "IVpcConnector",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The ARN of the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 77
          },
          "name": "vpcConnectorArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The Name of the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 71
          },
          "name": "vpcConnectorName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The revision of the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 83
          },
          "name": "vpcConnectorRevision",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/vpc-connector:IVpcConnector"
    },
    "@aws-cdk/aws-apprunner.ImageConfiguration": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imageconfiguration.html",
        "stability": "experimental",
        "summary": "Describes the configuration that AWS App Runner uses to run an App Runner service using an image pulled from a source image repository.",
        "example": "import * as assets from '@aws-cdk/aws-ecr-assets';\n\nconst imageAsset = new assets.DockerImageAsset(this, 'ImageAssets', {\n  directory: path.join(__dirname, './docker.assets'),\n});\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromAsset({\n    imageConfiguration: { port: 8000 },\n    asset: imageAsset,\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.ImageConfiguration",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 380
      },
      "name": "ImageConfiguration",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no environment variables",
            "stability": "experimental",
            "summary": "Environment variables that are available to your running App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 393
          },
          "name": "environment",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "8080",
            "stability": "experimental",
            "summary": "The port that your application listens to in the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 386
          },
          "name": "port",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no start command",
            "remarks": "If specified, this command overrides the Docker image’s default start command.",
            "stability": "experimental",
            "summary": "An optional command that App Runner runs to start the application in the source image."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 401
          },
          "name": "startCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:ImageConfiguration"
    },
    "@aws-cdk/aws-apprunner.ImageRepository": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imagerepository.html",
        "stability": "experimental",
        "summary": "Describes a source image repository.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst imageRepository: apprunner.ImageRepository = {\n  imageIdentifier: 'imageIdentifier',\n  imageRepositoryType: apprunner.ImageRepositoryType.ECR_PUBLIC,\n\n  // the properties below are optional\n  imageConfiguration: {\n    environment: {\n      environmentKey: 'environment',\n    },\n    port: 123,\n    startCommand: 'startCommand',\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.ImageRepository",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 409
      },
      "name": "ImageRepository",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "For `ECR_PUBLIC` imageRepositoryType, the identifier domain should\nalways be `public.ecr.aws`. For `ECR`, the pattern should be\n`([0-9]{12}.dkr.ecr.[a-z\\-]+-[0-9]{1}.amazonaws.com\\/.*)`.",
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imagerepository.html for more details.",
            "stability": "experimental",
            "summary": "The identifier of the image."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 417
          },
          "name": "imageIdentifier",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This reflects the repository provider and whether\nthe repository is private or public.",
            "stability": "experimental",
            "summary": "The type of the image repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 423
          },
          "name": "imageRepositoryType",
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.ImageRepositoryType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no image configuration will be passed. The default `port` will be 8080.",
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imageconfiguration.html#cfn-apprunner-service-imageconfiguration-port",
            "stability": "experimental",
            "summary": "Configuration for running the identified image."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 430
          },
          "name": "imageConfiguration",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.ImageConfiguration"
          }
        }
      ],
      "symbolId": "lib/service:ImageRepository"
    },
    "@aws-cdk/aws-apprunner.ImageRepositoryType": {
      "assembly": "@aws-cdk/aws-apprunner",
      "docs": {
        "stability": "experimental",
        "summary": "The image repository types."
      },
      "fqn": "@aws-cdk/aws-apprunner.ImageRepositoryType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 12
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Amazon ECR Public."
          },
          "name": "ECR_PUBLIC"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Amazon ECR."
          },
          "name": "ECR"
        }
      ],
      "name": "ImageRepositoryType",
      "symbolId": "lib/service:ImageRepositoryType"
    },
    "@aws-cdk/aws-apprunner.Memory": {
      "assembly": "@aws-cdk/aws-apprunner",
      "docs": {
        "stability": "experimental",
        "summary": "The amount of memory reserved for each instance of your App Runner service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst memory = apprunner.Memory.FOUR_GB;",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.Memory",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 59
      },
      "methods": [
        {
          "docs": {
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-instanceconfiguration.html#cfn-apprunner-service-instanceconfiguration-memory",
            "stability": "experimental",
            "summary": "Custom Memory unit."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 82
          },
          "name": "of",
          "parameters": [
            {
              "docs": {
                "summary": "custom Memory unit."
              },
              "name": "unit",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.Memory"
            }
          },
          "static": true
        }
      ],
      "name": "Memory",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "4 GB(for 1 or 2 vCPU)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 73
          },
          "name": "FOUR_GB",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.Memory"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "3 GB(for 1 vCPU)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 68
          },
          "name": "THREE_GB",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.Memory"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "2 GB(for 1 vCPU)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 63
          },
          "name": "TWO_GB",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.Memory"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The unit of memory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 88
          },
          "name": "unit",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:Memory"
    },
    "@aws-cdk/aws-apprunner.Runtime": {
      "assembly": "@aws-cdk/aws-apprunner",
      "docs": {
        "stability": "experimental",
        "summary": "The code runtimes.",
        "example": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.API,\n    codeConfigurationValues: {\n      runtime: apprunner.Runtime.PYTHON_3,\n      port: '8000',\n      startCommand: 'python app.py',\n      buildCommand: 'yum install -y pycairo && pip install -r requirements.txt',\n    },\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.Runtime",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 94
      },
      "methods": [
        {
          "docs": {
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-codeconfigurationvalues.html#cfn-apprunner-service-codeconfigurationvalues-runtime for all available runtimes.",
            "stability": "experimental",
            "summary": "Other runtimes."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 113
          },
          "name": "of",
          "parameters": [
            {
              "docs": {
                "summary": "runtime name."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.Runtime"
            }
          },
          "static": true
        }
      ],
      "name": "Runtime",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "NodeJS 12."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 98
          },
          "name": "NODEJS_12",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.Runtime"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Python 3."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 103
          },
          "name": "PYTHON_3",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.Runtime"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The runtime name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 119
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:Runtime"
    },
    "@aws-cdk/aws-apprunner.Service": {
      "assembly": "@aws-cdk/aws-apprunner",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "stability": "experimental",
        "summary": "The App Runner Service.",
        "example": "import * as assets from '@aws-cdk/aws-ecr-assets';\n\nconst imageAsset = new assets.DockerImageAsset(this, 'ImageAssets', {\n  directory: path.join(__dirname, './docker.assets'),\n});\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromAsset({\n    imageConfiguration: { port: 8000 },\n    asset: imageAsset,\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.Service",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/service.ts",
          "line": 776
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.ServiceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 704
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import from service attributes."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 723
          },
          "name": "fromServiceAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-apprunner.ServiceAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.IService"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import from service name."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 708
          },
          "name": "fromServiceName",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "serviceName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.IService"
            }
          },
          "static": true
        }
      ],
      "name": "Service",
      "properties": [
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The ARN of the Service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 750
          },
          "name": "serviceArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The ID of the Service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 756
          },
          "name": "serviceId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 774
          },
          "name": "serviceName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The status of the Service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 768
          },
          "name": "serviceStatus",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The URL of the Service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 762
          },
          "name": "serviceUrl",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:Service"
    },
    "@aws-cdk/aws-apprunner.ServiceAttributes": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Attributes for the App Runner Service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst serviceAttributes: apprunner.ServiceAttributes = {\n  serviceArn: 'serviceArn',\n  serviceName: 'serviceName',\n  serviceStatus: 'serviceStatus',\n  serviceUrl: 'serviceUrl',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.ServiceAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 664
      },
      "name": "ServiceAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 673
          },
          "name": "serviceArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 668
          },
          "name": "serviceName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The status of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 683
          },
          "name": "serviceStatus",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The URL of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 678
          },
          "name": "serviceUrl",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:ServiceAttributes"
    },
    "@aws-cdk/aws-apprunner.ServiceProps": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties of the AppRunner Service.",
        "example": "import * as assets from '@aws-cdk/aws-ecr-assets';\n\nconst imageAsset = new assets.DockerImageAsset(this, 'ImageAssets', {\n  directory: path.join(__dirname, './docker.assets'),\n});\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromAsset({\n    imageConfiguration: { port: 8000 },\n    asset: imageAsset,\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.ServiceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 478
      },
      "name": "ServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The source of the repository for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 482
          },
          "name": "source",
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.Source"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- generate a new access role.",
            "remarks": "It's required for ECR image repositories (but not for ECR Public repositories).\n\nThe role must be assumable by the 'build.apprunner.amazonaws.com' service principal.",
            "see": "https://docs.aws.amazon.com/apprunner/latest/dg/security_iam_service-with-iam.html#security_iam_service-with-iam-roles-service.access",
            "stability": "experimental",
            "summary": "The IAM role that grants the App Runner service access to a source repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 508
          },
          "name": "accessRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Cpu.ONE_VCPU",
            "stability": "experimental",
            "summary": "The number of CPU units reserved for each instance of your App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 489
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.Cpu"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no instance role attached.",
            "remarks": "These are permissions that your code needs when it calls any AWS APIs.\n\nThe role must be assumable by the 'tasks.apprunner.amazonaws.com' service principal.",
            "see": "https://docs.aws.amazon.com/apprunner/latest/dg/security_iam_service-with-iam.html#security_iam_service-with-iam-roles-service.instance",
            "stability": "experimental",
            "summary": "The IAM role that provides permissions to your App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 520
          },
          "name": "instanceRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Memory.TWO_GB",
            "stability": "experimental",
            "summary": "The amount of memory reserved for each instance of your App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 496
          },
          "name": "memory",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.Memory"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- auto-generated if undefined.",
            "stability": "experimental",
            "summary": "Name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 527
          },
          "name": "serviceName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no VPC connector, uses the DEFAULT egress type instead",
            "stability": "experimental",
            "summary": "Settings for an App Runner VPC connector to associate with the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 534
          },
          "name": "vpcConnector",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.IVpcConnector"
          }
        }
      ],
      "symbolId": "lib/service:ServiceProps"
    },
    "@aws-cdk/aws-apprunner.Source": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-apprunner",
      "docs": {
        "stability": "experimental",
        "summary": "Represents the App Runner service source.",
        "example": "import * as assets from '@aws-cdk/aws-ecr-assets';\n\nconst imageAsset = new assets.DockerImageAsset(this, 'ImageAssets', {\n  directory: path.join(__dirname, './docker.assets'),\n});\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromAsset({\n    imageConfiguration: { port: 8000 },\n    asset: imageAsset,\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.Source",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 253
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Source from local assets."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 275
          },
          "name": "fromAsset",
          "parameters": [
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-apprunner.AssetProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.AssetSource"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Source from the ECR repository."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 263
          },
          "name": "fromEcr",
          "parameters": [
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-apprunner.EcrProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.EcrSource"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Source from the ECR Public repository."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 269
          },
          "name": "fromEcrPublic",
          "parameters": [
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-apprunner.EcrPublicProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.EcrPublicSource"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Source from the GitHub repository."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 257
          },
          "name": "fromGitHub",
          "parameters": [
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-apprunner.GithubRepositoryProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.GithubSource"
            }
          },
          "static": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Called when the Job is initialized to allow this object to bind."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 281
          },
          "name": "bind",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.SourceConfig"
            }
          }
        }
      ],
      "name": "Source",
      "symbolId": "lib/service:Source"
    },
    "@aws-cdk/aws-apprunner.SourceCodeVersion": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-sourcecodeversion.html",
        "stability": "experimental",
        "summary": "Identifies a version of code that AWS App Runner refers to within a source code repository.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nconst sourceCodeVersion: apprunner.SourceCodeVersion = {\n  type: 'type',\n  value: 'value',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.SourceCodeVersion",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 438
      },
      "name": "SourceCodeVersion",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The type of version identifier."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 442
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A source code version."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 447
          },
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:SourceCodeVersion"
    },
    "@aws-cdk/aws-apprunner.SourceConfig": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Result of binding `Source` into a `Service`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as ecr from '@aws-cdk/aws-ecr';\n\ndeclare const gitHubConnection: apprunner.GitHubConnection;\ndeclare const repository: ecr.Repository;\ndeclare const runtime: apprunner.Runtime;\nconst sourceConfig: apprunner.SourceConfig = {\n  codeRepository: {\n    codeConfiguration: {\n      configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n\n      // the properties below are optional\n      configurationValues: {\n        runtime: runtime,\n\n        // the properties below are optional\n        buildCommand: 'buildCommand',\n        environment: {\n          environmentKey: 'environment',\n        },\n        port: 'port',\n        startCommand: 'startCommand',\n      },\n    },\n    connection: gitHubConnection,\n    repositoryUrl: 'repositoryUrl',\n    sourceCodeVersion: {\n      type: 'type',\n      value: 'value',\n    },\n  },\n  ecrRepository: repository,\n  imageRepository: {\n    imageIdentifier: 'imageIdentifier',\n    imageRepositoryType: apprunner.ImageRepositoryType.ECR_PUBLIC,\n\n    // the properties below are optional\n    imageConfiguration: {\n      environment: {\n        environmentKey: 'environment',\n      },\n      port: 123,\n      startCommand: 'startCommand',\n    },\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.SourceConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 133
      },
      "name": "SourceConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no code repository.",
            "stability": "experimental",
            "summary": "The code repository configuration (mutually exclusive  with `imageRepository`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 153
          },
          "name": "codeRepository",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.CodeRepositoryProps"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no ECR repository.",
            "stability": "experimental",
            "summary": "The ECR repository (required to grant the pull privileges for the iam role)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 146
          },
          "name": "ecrRepository",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecr.IRepository"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no image repository.",
            "stability": "experimental",
            "summary": "The image repository configuration (mutually exclusive  with `codeRepository`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 139
          },
          "name": "imageRepository",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner.ImageRepository"
          }
        }
      ],
      "symbolId": "lib/service:SourceConfig"
    },
    "@aws-cdk/aws-apprunner.VpcConnector": {
      "assembly": "@aws-cdk/aws-apprunner",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "custom": {
          "resource": "AWS::AppRunner::VpcConnector",
          "exampleMetadata": "infused"
        },
        "stability": "experimental",
        "summary": "The App Runner VPC Connector.",
        "example": "import * as ec2 from '@aws-cdk/aws-ec2';\n\nconst vpc = new ec2.Vpc(this, 'Vpc', {\n  cidr: '10.0.0.0/16',\n});\n\nconst vpcConnector = new apprunner.VpcConnector(this, 'VpcConnector', {\n  vpc,\n  vpcSubnets: vpc.selectSubnets({ subnetType: ec2.SubnetType.PUBLIC }),\n  vpcConnectorName: 'MyVpcConnector',\n});\n\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n  vpcConnector,\n});"
      },
      "fqn": "@aws-cdk/aws-apprunner.VpcConnector",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/vpc-connector.ts",
          "line": 134
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.VpcConnectorProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-apprunner.IVpcConnector"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/vpc-connector.ts",
        "line": 91
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import from VPC connector attributes."
          },
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 95
          },
          "name": "fromVpcConnectorAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-apprunner.VpcConnectorAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner.IVpcConnector"
            }
          },
          "static": true
        }
      ],
      "name": "VpcConnector",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Allows specifying security group connections for the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 132
          },
          "name": "connections",
          "overrides": "@aws-cdk/aws-ec2.IConnectable",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.Connections"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The ARN of the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 115
          },
          "name": "vpcConnectorArn",
          "overrides": "@aws-cdk/aws-apprunner.IVpcConnector",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The name of the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 127
          },
          "name": "vpcConnectorName",
          "overrides": "@aws-cdk/aws-apprunner.IVpcConnector",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The revision of the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 121
          },
          "name": "vpcConnectorRevision",
          "overrides": "@aws-cdk/aws-apprunner.IVpcConnector",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/vpc-connector:VpcConnector"
    },
    "@aws-cdk/aws-apprunner.VpcConnectorAttributes": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Attributes for the App Runner VPC Connector.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner from '@aws-cdk/aws-apprunner';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const securityGroup: ec2.SecurityGroup;\nconst vpcConnectorAttributes: apprunner.VpcConnectorAttributes = {\n  securityGroups: [securityGroup],\n  vpcConnectorArn: 'vpcConnectorArn',\n  vpcConnectorName: 'vpcConnectorName',\n  vpcConnectorRevision: 123,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.VpcConnectorAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/vpc-connector.ts",
        "line": 41
      },
      "name": "VpcConnectorAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The security groups associated with the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 60
          },
          "name": "securityGroups",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 50
          },
          "name": "vpcConnectorArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The name of the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 45
          },
          "name": "vpcConnectorName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The revision of the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 55
          },
          "name": "vpcConnectorRevision",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/vpc-connector:VpcConnectorAttributes"
    },
    "@aws-cdk/aws-apprunner.VpcConnectorProps": {
      "assembly": "@aws-cdk/aws-apprunner",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties of the AppRunner VPC Connector.",
        "example": "import * as ec2 from '@aws-cdk/aws-ec2';\n\nconst vpc = new ec2.Vpc(this, 'Vpc', {\n  cidr: '10.0.0.0/16',\n});\n\nconst vpcConnector = new apprunner.VpcConnector(this, 'VpcConnector', {\n  vpc,\n  vpcSubnets: vpc.selectSubnets({ subnetType: ec2.SubnetType.PUBLIC }),\n  vpcConnectorName: 'MyVpcConnector',\n});\n\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n  vpcConnector,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner.VpcConnectorProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/vpc-connector.ts",
        "line": 10
      },
      "name": "VpcConnectorProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The VPC for the VPC Connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 14
          },
          "name": "vpc",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a new security group will be created in the specified VPC",
            "stability": "experimental",
            "summary": "A list of IDs of security groups that App Runner should use for access to AWS resources under the specified subnets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 28
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a name generated by CloudFormation",
            "stability": "experimental",
            "summary": "The name for the VpcConnector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 35
          },
          "name": "vpcConnectorName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Private subnets.",
            "stability": "experimental",
            "summary": "Where to place the VPC Connector within the VPC."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 21
          },
          "name": "vpcSubnets",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        }
      ],
      "symbolId": "lib/vpc-connector:VpcConnectorProps"
    }
  },
  "version": "1.172.0",
  "fingerprint": "**********"
}